{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from \"igniteui-react-core\";\nexport var LegendBaseStyles = [\"\\n:host {\\n    display: block;\\n}\\n.ig-legend {\\n    border: none;\\n    border: var(--legend-border, none);\\n    overflow: auto;\\n    overflow: var(--legend-item-overflow, auto);\\n}\\n.ig-chart-legend-item-text {\\n    font: 12px Verdana, Arial, sans-serif;\\n    font: var(--legend-item-font, 12px Verdana, Arial, sans-serif);\\n    vertical-align: middle;\\n    vertical-align: var(--legend-item-vertical-align, middle);\\n}\\n.ig-chart-legend-items-list\\n{\\n    padding: 5px;\\n    padding: var(--legend-item-padding, 5px);\\n    margin: 0px;\\n    margin: var(--legend-item-margin, 0px);\\n    background-color: transparent;\\n    background-color: var(--legend-list-background-color, transparent);\\n}\\n.ig-chart-legend-item-badge, .ui-chart-legend-item-badge canvas\\n{\\n    vertical-align: middle;\\n    vertical-align: var(--legend-item-badge-vertical-align, middle);\\n}\\n.ig-chart-legend-item\\n{\\n    background-color: transparent;\\n    background-color: var(--legend-item-background-color, transparent);\\n}\\n\"];\n/**\n * Represents the base class for a legend in IgxDataChartComponent.\n*/\n\nvar IgrLegendBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrLegendBase, _super);\n\n  function IgrLegendBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._zoneRunner = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    IgrLegendBase.ensureCss();\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    if (document) {//introduce styles globally for now.\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(IgrLegendBase.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLegendBase.prototype.onImplementationCreated = function () {};\n\n  IgrLegendBase.ensureCss = function () {\n    if (!document) {\n      return;\n    }\n\n    if (IgrLegendBase._checked.has(document)) {\n      return;\n    }\n\n    for (var i = 0; i < document.head.children.length; i++) {\n      var child = document.head.children[i];\n\n      if (child.tagName == \"link\" && child.hasAttribute(\"data-ig-legend-style\")) {\n        return;\n      }\n    }\n\n    var link = document.createElement(\"link\");\n    link.setAttribute('rel', 'stylesheet');\n    link.setAttribute('type', 'text/css');\n    link.setAttribute('href', 'data:text/css;charset=UTF-8,' + encodeURIComponent(LegendBaseStyles[0]));\n    link.setAttribute('data-ig-legend-style', 'true');\n    document.head.appendChild(link);\n\n    IgrLegendBase._checked.set(document, true);\n  };\n\n  IgrLegendBase.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          {\n            this[p] = this.props[p];\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  IgrLegendBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrLegendBase.prototype.render = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrLegendBase.prototype, \"isItemwise\", {\n    /**\n    * Gets if the legend is item-wise.\n    */\n    get: function () {\n      return this.i.isItemwise;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLegendBase.prototype, \"isFinancial\", {\n    /**\n     * Gets if the legend is a financial legend.\n    */\n    get: function () {\n      return this.i.isFinancial;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLegendBase.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLegendBase.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrLegendBase.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"LegendBase\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrLegendBase._checked = new WeakMap();\n  return IgrLegendBase;\n}(React.Component);\n\nexport { IgrLegendBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-legend-base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from \"igniteui-react-core\";\nexport var LegendBaseStyles = [\"\\n:host {\\n    display: block;\\n}\\n.ig-legend {\\n    border: none;\\n    border: var(--legend-border, none);\\n    overflow: auto;\\n    overflow: var(--legend-item-overflow, auto);\\n}\\n.ig-chart-legend-item-text {\\n    font: 12px Verdana, Arial, sans-serif;\\n    font: var(--legend-item-font, 12px Verdana, Arial, sans-serif);\\n    vertical-align: middle;\\n    vertical-align: var(--legend-item-vertical-align, middle);\\n}\\n.ig-chart-legend-items-list\\n{\\n    padding: 5px;\\n    padding: var(--legend-item-padding, 5px);\\n    margin: 0px;\\n    margin: var(--legend-item-margin, 0px);\\n    background-color: transparent;\\n    background-color: var(--legend-list-background-color, transparent);\\n}\\n.ig-chart-legend-item-badge, .ui-chart-legend-item-badge canvas\\n{\\n    vertical-align: middle;\\n    vertical-align: var(--legend-item-badge-vertical-align, middle);\\n}\\n.ig-chart-legend-item\\n{\\n    background-color: transparent;\\n    background-color: var(--legend-item-background-color, transparent);\\n}\\n\"];\n/**\n * Represents the base class for a legend in IgxDataChartComponent.\n*/\nvar IgrLegendBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrLegendBase, _super);\n    function IgrLegendBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._zoneRunner = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        IgrLegendBase.ensureCss();\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        if (document) {\n            //introduce styles globally for now.\n        }\n        return _this;\n    }\n    Object.defineProperty(IgrLegendBase.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLegendBase.prototype.onImplementationCreated = function () {\n    };\n    IgrLegendBase.ensureCss = function () {\n        if (!document) {\n            return;\n        }\n        if (IgrLegendBase._checked.has(document)) {\n            return;\n        }\n        for (var i = 0; i < document.head.children.length; i++) {\n            var child = document.head.children[i];\n            if (child.tagName == \"link\" && child.hasAttribute(\"data-ig-legend-style\")) {\n                return;\n            }\n        }\n        var link = document.createElement(\"link\");\n        link.setAttribute('rel', 'stylesheet');\n        link.setAttribute('type', 'text/css');\n        link.setAttribute('href', 'data:text/css;charset=UTF-8,' + encodeURIComponent(LegendBaseStyles[0]));\n        link.setAttribute('data-ig-legend-style', 'true');\n        document.head.appendChild(link);\n        IgrLegendBase._checked.set(document, true);\n    };\n    IgrLegendBase.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    {\n                        this[p] = this.props[p];\n                    }\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    };\n    IgrLegendBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrLegendBase.prototype.render = function () {\n        return null;\n    };\n    Object.defineProperty(IgrLegendBase.prototype, \"isItemwise\", {\n        /**\n     * Gets if the legend is item-wise.\n    */\n        get: function () {\n            return this.i.isItemwise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLegendBase.prototype, \"isFinancial\", {\n        /**\n         * Gets if the legend is a financial legend.\n        */\n        get: function () {\n            return this.i.isFinancial;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLegendBase.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLegendBase.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrLegendBase.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"LegendBase\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    IgrLegendBase._checked = new WeakMap();\n    return IgrLegendBase;\n}(React.Component));\nexport { IgrLegendBase };\n//# sourceMappingURL=igr-legend-base.js.map\n"]},"metadata":{},"sourceType":"module"}