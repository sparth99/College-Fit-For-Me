{"ast":null,"code":"import { AxisRangeChangedEventArgs as AxisRangeChangedEventArgs_internal } from \"./AxisRangeChangedEventArgs\";\n/**\n * Provides data for Axis RangeChanged events.\n*\n* The `AxisRangeChangedEventArgs` event fire when the axis range changes.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n* \t\t<IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n* \t\t<IgrNumericYAxis  name=\"yAxis\" rangeChanaged={this.yAxisRangeChanged} />\n*     <IgrFinancialPriceSeries\n* \t\tname=\"series2\"\n* \t\txAxisName=\"xAxis\"\n* \t\tyAxisName=\"yAxis\"\n* \t\tdisplayType=\"Candlestick\"\n* \t\tlowMemberPath=\"Low\"\n* \t\thighMemberPath=\"High\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"Close\"\n* \t\tvolumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n*   axis.rangeChanged.bind(this.yAxisRangeChanged);\n*   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) =>  {\n*\n*    }\n* ```\n*/\n\nvar IgrAxisRangeChangedEventArgs =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function IgrAxisRangeChangedEventArgs() {\n    this._implementation = this.createImplementation();\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  }\n\n  IgrAxisRangeChangedEventArgs.prototype.createImplementation = function () {\n    return new AxisRangeChangedEventArgs_internal(0);\n  };\n\n  Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrAxisRangeChangedEventArgs.prototype.onImplementationCreated = function () {};\n\n  IgrAxisRangeChangedEventArgs.prototype._provideImplementation = function (i) {\n    this._implementation = i;\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  };\n\n  Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"oldMinimumValue\", {\n    /**\n     * Gets the minimum value before the range changed. The reported minimum is the effective,\n     * not the set value.\n    *\n    * The `oldMinimumValue` property is used to gets the minimum value before the range changed.\n    */\n    get: function () {\n      return this.i.oldMinimumValue;\n    },\n    set: function (v) {\n      this.i.oldMinimumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"minimumValue\", {\n    /**\n     * Gets the minimum value after the range changed. The reported minimum is the effective,\n     * not the set value.\n    *\n    * The `minimumValue` property is used to getsthe minimum value after the range changed.\n    *\n    * ```ts\n    *   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) :void {\n    * \tlet maxVal= e.maximumValue\n    * \tlet minVal= e.minimumValue\n    *\n    *     }\n    * ```\n    */\n    get: function () {\n      return this.i.minimumValue;\n    },\n    set: function (v) {\n      this.i.minimumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"oldMaximumValue\", {\n    /**\n     * Gets the maximum value before the range changed. The reported maximum is the effective,\n     * not the set value.\n    *\n    * The `oldMaximumValue` property is used to gets the maximum value before the range changed.\n    */\n    get: function () {\n      return this.i.oldMaximumValue;\n    },\n    set: function (v) {\n      this.i.oldMaximumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"maximumValue\", {\n    /**\n     * Gets the maximum value after the range changed. The reported maximum is the effective,\n     * not the set value.\n    *\n    * The `maximumValue` property is used to gets the maximum value after the range changed.\n    *\n    * ```ts\n    *   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) :void {\n    * \tlet maxVal= e.maximumValue\n    * \tlet minVal= e.minimumValue\n    *\n    *     }\n    * ```\n    */\n    get: function () {\n      return this.i.maximumValue;\n    },\n    set: function (v) {\n      this.i.maximumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrAxisRangeChangedEventArgs;\n}();\n\nexport { IgrAxisRangeChangedEventArgs };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-axis-range-changed-event-args.ts"],"names":[],"mappings":"AAKA,SAAS,yBAAyB,IAAI,kCAAtC,QAAgF,6BAAhF;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAAA,4BAAA;AAAA;;AAAA;AAAA,YAAA;AAiBC,WAAA,4BAAA,GAAA;AACA,SAAK,eAAL,GAAuB,KAAK,oBAAL,EAAvB;AACC,SAAK,eAAL,CAA6B,cAA7B,GAA8C,IAA9C;AACD,SAAK,uBAAL;AACC;;AAlBQ,EAAA,4BAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,kCAAJ,CAAuC,CAAvC,CAAP;AACA,GAHS;;AAQT,EAAA,MAAA,CAAA,cAAA,CAAW,4BAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHgB;;;SAG5B,YAAA;AACC,aAAO,KAAK,eAAZ;AACA,KAFW;oBAAA;;AAAA,GAAZ;;AAGQ,EAAA,4BAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,YAAA,CAEC,CAFO;;AAQE,EAAA,4BAAA,CAAA,SAAA,CAAA,sBAAA,GAAV,UAAiC,CAAjC,EAAuC;AACnC,SAAK,eAAL,GAAuB,CAAvB;AACC,SAAK,eAAL,CAA6B,cAA7B,GAA8C,IAA9C;AACL,SAAK,uBAAL;AACC,GAJS;;AAWV,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AANnB;;;;;;SAMA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,eAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,CAAL,CAAO,eAAP,GAAyB,CAAC,CAA1B;AACA,KALkB;oBAAA;;AAAA,GAAnB;AAoBA,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAdhB;;;;;;;;;;;;;;SAcA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,YAAf;AACA,KAFe;SAGhB,UAAiB,CAAjB,EAA0B;AACzB,WAAK,CAAL,CAAO,YAAP,GAAsB,CAAC,CAAvB;AACA,KALe;oBAAA;;AAAA,GAAhB;AAYA,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AANnB;;;;;;SAMA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,eAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,CAAL,CAAO,eAAP,GAAyB,CAAC,CAA1B;AACA,KALkB;oBAAA;;AAAA,GAAnB;AAoBA,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAdhB;;;;;;;;;;;;;;SAcA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,YAAf;AACA,KAFe;SAGhB,UAAiB,CAAjB,EAA0B;AACzB,WAAK,CAAL,CAAO,YAAP,GAAsB,CAAC,CAAvB;AACA,KALe;oBAAA;;AAAA,GAAhB;AAMD,SAAA,4BAAA;AAAC,CA3FD,EAAA","sourceRoot":"","sourcesContent":["import { AxisRangeChangedEventArgs as AxisRangeChangedEventArgs_internal } from \"./AxisRangeChangedEventArgs\";\n/**\n * Provides data for Axis RangeChanged events.\n*\n* The `AxisRangeChangedEventArgs` event fire when the axis range changes.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n* \t\t<IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n* \t\t<IgrNumericYAxis  name=\"yAxis\" rangeChanaged={this.yAxisRangeChanged} />\n*     <IgrFinancialPriceSeries\n* \t\tname=\"series2\"\n* \t\txAxisName=\"xAxis\"\n* \t\tyAxisName=\"yAxis\"\n* \t\tdisplayType=\"Candlestick\"\n* \t\tlowMemberPath=\"Low\"\n* \t\thighMemberPath=\"High\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"Close\"\n* \t\tvolumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n*   axis.rangeChanged.bind(this.yAxisRangeChanged);\n*   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) =>  {\n*\n*    }\n* ```\n*/\nvar IgrAxisRangeChangedEventArgs = /** @class */ /*@__PURE__*/ (function () {\n    function IgrAxisRangeChangedEventArgs() {\n        this._implementation = this.createImplementation();\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    }\n    IgrAxisRangeChangedEventArgs.prototype.createImplementation = function () {\n        return new AxisRangeChangedEventArgs_internal(0);\n    };\n    Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrAxisRangeChangedEventArgs.prototype.onImplementationCreated = function () {\n    };\n    IgrAxisRangeChangedEventArgs.prototype._provideImplementation = function (i) {\n        this._implementation = i;\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    };\n    Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"oldMinimumValue\", {\n        /**\n         * Gets the minimum value before the range changed. The reported minimum is the effective,\n         * not the set value.\n        *\n        * The `oldMinimumValue` property is used to gets the minimum value before the range changed.\n        */\n        get: function () {\n            return this.i.oldMinimumValue;\n        },\n        set: function (v) {\n            this.i.oldMinimumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"minimumValue\", {\n        /**\n         * Gets the minimum value after the range changed. The reported minimum is the effective,\n         * not the set value.\n        *\n        * The `minimumValue` property is used to getsthe minimum value after the range changed.\n        *\n        * ```ts\n        *   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) :void {\n        * \tlet maxVal= e.maximumValue\n        * \tlet minVal= e.minimumValue\n        *\n        *     }\n        * ```\n        */\n        get: function () {\n            return this.i.minimumValue;\n        },\n        set: function (v) {\n            this.i.minimumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"oldMaximumValue\", {\n        /**\n         * Gets the maximum value before the range changed. The reported maximum is the effective,\n         * not the set value.\n        *\n        * The `oldMaximumValue` property is used to gets the maximum value before the range changed.\n        */\n        get: function () {\n            return this.i.oldMaximumValue;\n        },\n        set: function (v) {\n            this.i.oldMaximumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAxisRangeChangedEventArgs.prototype, \"maximumValue\", {\n        /**\n         * Gets the maximum value after the range changed. The reported maximum is the effective,\n         * not the set value.\n        *\n        * The `maximumValue` property is used to gets the maximum value after the range changed.\n        *\n        * ```ts\n        *   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) :void {\n        * \tlet maxVal= e.maximumValue\n        * \tlet minVal= e.minimumValue\n        *\n        *     }\n        * ```\n        */\n        get: function () {\n            return this.i.maximumValue;\n        },\n        set: function (v) {\n            this.i.maximumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrAxisRangeChangedEventArgs;\n}());\nexport { IgrAxisRangeChangedEventArgs };\n//# sourceMappingURL=igr-axis-range-changed-event-args.js.map\n"]},"metadata":{},"sourceType":"module"}