{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PercentagePriceOscillatorIndicator } from \"./PercentagePriceOscillatorIndicator\";\n/**\n * Represents a IgxDataChartComponent percentage price oscillator series.\n * Default required members: High, Low, Volume\n*\n* You can use the `IgrPercentagePriceOscillatorIndicator` to show the difference between two moving averages.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPercentagePriceOscillatorIndicator\n*     name=\"series\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPercentagePriceOscillatorIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrPercentagePriceOscillatorIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrPercentagePriceOscillatorIndicator, _super);\n\n  function IgrPercentagePriceOscillatorIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrPercentagePriceOscillatorIndicator.prototype.createImplementation = function () {\n    return new PercentagePriceOscillatorIndicator();\n  };\n\n  Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"shortPeriod\", {\n    /**\n     * Gets or sets the short moving average period for the current PercentagePriceOscillatorIndicator object.\n     * The typical, and initial, value for short PPO periods is 10.\n    *\n    * You can use the `shortPeriod` to set the short moving average period.\n    *\n    * ```ts\n    * this.series.shortPeriod = 10;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *    <IgrPercentagePriceOscillatorIndicator\n    *     name=\"series\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     shortPeriod = {10}/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.shortPeriod;\n    },\n    set: function (v) {\n      this.i.shortPeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"longPeriod\", {\n    /**\n     * Gets or sets the long moving average period for the current PercentagePriceOscillatorIndicator object.\n     * The typical, and initial, value for long PVO periods is 30.\n    *\n    * You can use the `longPeriod` to set the long moving average period.\n    *\n    * ```ts\n    * this.series.longPeriod = 30;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *    <IgrPercentagePriceOscillatorIndicator\n    *     name=\"series\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    * \tlongPeriod = {30} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.longPeriod;\n    },\n    set: function (v) {\n      this.i.longPeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrPercentagePriceOscillatorIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrPercentagePriceOscillatorIndicator };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-percentage-price-oscillator-indicator.ts"],"names":[],"mappings":";AAKA,SAAS,yBAAT,QAA2E,gCAA3E;AAIA,SAAS,kCAAT,QAAmD,sCAAnD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAA,qCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2D,EAAA,OAAA,CAAA,SAAA,CAAA,qCAAA,EAAA,MAAA;;AAa1D,WAAA,qCAAA,CAAY,KAAZ,EAA8D;WAC7D,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,qCAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,kCAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,qCAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAoC5B,EAAA,MAAA,CAAA,cAAA,CAAI,qCAAA,CAAA,SAAJ,EAAI,aAAJ,EAAe;AA9Bf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,WAAf;AACA,KAFc;SAGf,UAAgB,CAAhB,EAAyB;AACxB,WAAK,CAAL,CAAO,WAAP,GAAqB,CAAC,CAAtB;AACA,KALc;oBAAA;;AAAA,GAAf;AAoCA,EAAA,MAAA,CAAA,cAAA,CAAI,qCAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AA9Bd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,UAAf;AACA,KAFa;SAGd,UAAe,CAAf,EAAwB;AACvB,WAAK,CAAL,CAAO,UAAP,GAAoB,CAAC,CAArB;AACA,KALa;oBAAA;;AAAA,GAAd;AAMD,SAAA,qCAAA;AAAC,CAxFD,CAA2D,yBAA3D,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PercentagePriceOscillatorIndicator } from \"./PercentagePriceOscillatorIndicator\";\n/**\n * Represents a IgxDataChartComponent percentage price oscillator series.\n * Default required members: High, Low, Volume\n*\n* You can use the `IgrPercentagePriceOscillatorIndicator` to show the difference between two moving averages.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPercentagePriceOscillatorIndicator\n*     name=\"series\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPercentagePriceOscillatorIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrPercentagePriceOscillatorIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrPercentagePriceOscillatorIndicator, _super);\n    function IgrPercentagePriceOscillatorIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrPercentagePriceOscillatorIndicator.prototype.createImplementation = function () {\n        return new PercentagePriceOscillatorIndicator();\n    };\n    Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"shortPeriod\", {\n        /**\n         * Gets or sets the short moving average period for the current PercentagePriceOscillatorIndicator object.\n         * The typical, and initial, value for short PPO periods is 10.\n        *\n        * You can use the `shortPeriod` to set the short moving average period.\n        *\n        * ```ts\n        * this.series.shortPeriod = 10;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *    <IgrPercentagePriceOscillatorIndicator\n        *     name=\"series\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     shortPeriod = {10}/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.shortPeriod;\n        },\n        set: function (v) {\n            this.i.shortPeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"longPeriod\", {\n        /**\n         * Gets or sets the long moving average period for the current PercentagePriceOscillatorIndicator object.\n         * The typical, and initial, value for long PVO periods is 30.\n        *\n        * You can use the `longPeriod` to set the long moving average period.\n        *\n        * ```ts\n        * this.series.longPeriod = 30;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *    <IgrPercentagePriceOscillatorIndicator\n        *     name=\"series\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        * \tlongPeriod = {30} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.longPeriod;\n        },\n        set: function (v) {\n            this.i.longPeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrPercentagePriceOscillatorIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrPercentagePriceOscillatorIndicator };\n//# sourceMappingURL=igr-percentage-price-oscillator-indicator.js.map\n"]},"metadata":{},"sourceType":"module"}