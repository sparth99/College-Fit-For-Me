{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrItemwiseStrategyBasedIndicator } from \"./igr-itemwise-strategy-based-indicator\";\nimport { WeightedCloseIndicator } from \"./WeightedCloseIndicator\";\n/**\n * Represents a IgxDataChartComponent Weigted Close indicator series.\n * The weighted close indicator shows an average of the high low and close\n * for a day but with the closing price counted twice in the average.\n * Default required members: High, Low, Close\n*\n* The `IgrWeightedCloseIndicator` is similar to the `IgrTypicalPriceIndicator` in that it represents an average of the high price, low price, and closing price for a day.\n* However, with the `IgrWeightedCloseIndicator`, more emphasis is placed on the closing price and it is included twice when calculating the arithmetic average.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrWeightedCloseIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrWeightedCloseIndicator({name:\"series\"});\n* series.xAxis = this.xAxis;\n* series.yAxis = this.yAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* this.chart.series.add(series);\n* ```\n*/\n\nvar IgrWeightedCloseIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrWeightedCloseIndicator, _super);\n\n  function IgrWeightedCloseIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrWeightedCloseIndicator.prototype.createImplementation = function () {\n    return new WeightedCloseIndicator();\n  };\n\n  Object.defineProperty(IgrWeightedCloseIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrWeightedCloseIndicator;\n}(IgrItemwiseStrategyBasedIndicator);\n\nexport { IgrWeightedCloseIndicator };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-weighted-close-indicator.ts"],"names":[],"mappings":";AAKA,SAAS,iCAAT,QAA2F,yCAA3F;AAKA,SAAS,sBAAT,QAAuC,0BAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,IAAA,yBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,OAAA,CAAA,SAAA,CAAA,yBAAA,EAAA,MAAA;;AAa9C,WAAA,yBAAA,CAAY,KAAZ,EAAkD;WACjD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,yBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,sBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,yBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAM7B,SAAA,yBAAA;AAAC,CAhBD,CAA+C,iCAA/C,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrItemwiseStrategyBasedIndicator } from \"./igr-itemwise-strategy-based-indicator\";\nimport { WeightedCloseIndicator } from \"./WeightedCloseIndicator\";\n/**\n * Represents a IgxDataChartComponent Weigted Close indicator series.\n * The weighted close indicator shows an average of the high low and close\n * for a day but with the closing price counted twice in the average.\n * Default required members: High, Low, Close\n*\n* The `IgrWeightedCloseIndicator` is similar to the `IgrTypicalPriceIndicator` in that it represents an average of the high price, low price, and closing price for a day.\n* However, with the `IgrWeightedCloseIndicator`, more emphasis is placed on the closing price and it is included twice when calculating the arithmetic average.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrWeightedCloseIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrWeightedCloseIndicator({name:\"series\"});\n* series.xAxis = this.xAxis;\n* series.yAxis = this.yAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* this.chart.series.add(series);\n* ```\n*/\nvar IgrWeightedCloseIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrWeightedCloseIndicator, _super);\n    function IgrWeightedCloseIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrWeightedCloseIndicator.prototype.createImplementation = function () {\n        return new WeightedCloseIndicator();\n    };\n    Object.defineProperty(IgrWeightedCloseIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrWeightedCloseIndicator;\n}(IgrItemwiseStrategyBasedIndicator));\nexport { IgrWeightedCloseIndicator };\n//# sourceMappingURL=igr-weighted-close-indicator.js.map\n"]},"metadata":{},"sourceType":"module"}