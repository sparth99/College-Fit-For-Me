{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { AxisLabelsLocation_$type } from \"./AxisLabelsLocation\";\nimport { IgrDomainChart } from \"./igr-domain-chart\";\nimport { brushToString, stringToBrush, ensureBool, ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a base class for domain charts with X/Y axes\n*/\n\nvar IgrXYChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrXYChart, _super);\n\n  function IgrXYChart(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrXYChart.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisFormatLabel\", {\n    /**\n     * Gets or sets function which takes an context object and returns a formatted label for the X-axis.\n    *\n    * To customize the text of the x-axis label, set `xAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be your data item.\n    *\n    * ```ts\n    * formatX(item: any): string {\n    *     return \"[ \" + item.label + \"! ]\";\n    * }\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisFormatLabel=\"formatX\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.id;\n    },\n    set: function (v) {\n      this.i.id = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisFormatLabel\", {\n    /**\n     * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.\n    *\n    * To customize the text of the y-axis label, set `yAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be the numeric value corresponding to a position on the y-axis.\n    *\n    * ```ts\n    * formatY(value: any): string {\n    *     return \"[ \" + value+ \"! ]\";\n    * }\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisFormatLabel=\"formatY\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ie;\n    },\n    set: function (v) {\n      this.i.ie = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelLeftMargin` property to apply a margin left of the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelLeftMargin =\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelLeftMargin={100}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.js;\n    },\n    set: function (v) {\n      this.i.js = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelTopMargin` property to apply a margin above the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTopMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleTopMargin\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ju;\n    },\n    set: function (v) {\n      this.i.ju = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelRightMargin` property to apply a margin right of the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelRightMargin=\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelRightMargin={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jt;\n    },\n    set: function (v) {\n      this.i.jt = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelBottomMargin` property to apply a margin below the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelBottomMargin =\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelBottomMargin={100}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jr;\n    },\n    set: function (v) {\n      this.i.jr = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelLeftMargin` property to apply a margin left of the y-axis labels.\n    *\n    * ```ts\n    * this.chart. yAxisLabelLeftMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisLabelLeftMargin={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j9;\n    },\n    set: function (v) {\n      this.i.j9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelTopMargin` property to apply a margin above the y-axis labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelTopMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelTopMargin\t={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kb;\n    },\n    set: function (v) {\n      this.i.kb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelRightMargin` property to apply a margin right of the y-axis labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelRightMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelRightMargin={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ka;\n    },\n    set: function (v) {\n      this.i.ka = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelBottomMargin` property to apply a margin below the y-axis labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelBottomMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelBottomMargin={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j8;\n    },\n    set: function (v) {\n      this.i.j8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextColor\", {\n    /**\n     * Gets or sets color of labels on the X-axis\n    *\n    * To change the color of x-axis labels, set the `xAxisLabelTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.xAxisLabelTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelTextColor=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.nz);\n    },\n    set: function (v) {\n      this.i.nz = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextColor\", {\n    /**\n     * Gets or sets color of labels on the Y-axis\n    *\n    * To change the color of y-axis labels, set the `yAxisLabelTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.yAxisLabelTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelTextColor=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n6);\n    },\n    set: function (v) {\n      this.i.n6 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleMargin\", {\n    /**\n     * Gets or sets the margin around a title on the X-axis\n    *\n    * Use the `xAxisTitleMargin` property to set a margin around the y-axis title.\n    */\n    get: function () {\n      return this.i.j3;\n    },\n    set: function (v) {\n      this.i.j3 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleMargin\", {\n    /**\n     * Gets or sets the margin around a title on the Y-axis\n    *\n    * Use the `yAxisTitleMargin` property to set a margin around the y-axis title.\n    */\n    get: function () {\n      return this.i.kk;\n    },\n    set: function (v) {\n      this.i.kk = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleLeftMargin\", {\n    /**\n     * Gets or sets the left margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleLeftMargin` property to apply a margin left of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleLeftMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleLeftMargin={150}\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j2;\n    },\n    set: function (v) {\n      this.i.j2 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleLeftMargin\", {\n    /**\n     * Gets or sets the left margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleLeftMargin` property to apply a margin left of the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleLeftMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleLeftMargin={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kj;\n    },\n    set: function (v) {\n      this.i.kj = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTopMargin\", {\n    /**\n     * Gets or sets the top margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleTopMargin` property to apply a margin above the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTopMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleTopMargin\t={150}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j5;\n    },\n    set: function (v) {\n      this.i.j5 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTopMargin\", {\n    /**\n     * Gets or sets the top margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleTopMargin` property to apply a margin above the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleTopMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleTopMargin\t={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.km;\n    },\n    set: function (v) {\n      this.i.km = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleRightMargin\", {\n    /**\n     * Gets or sets the right margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleRightMargin` property to apply a margin right of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleRightMargin=\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleRightMargin=\"100\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j4;\n    },\n    set: function (v) {\n      this.i.j4 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleRightMargin\", {\n    /**\n     * Gets or sets the right margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleRightMargin` property to apply a margin right of the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleRightMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleRightMargin={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kl;\n    },\n    set: function (v) {\n      this.i.kl = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleBottomMargin` property to apply a margin below the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleBottomMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleBottomMargin={250}\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j1;\n    },\n    set: function (v) {\n      this.i.j1 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleBottomMargin` property to apply a margin below the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleBottomMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleBottomMargin\t={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ki;\n    },\n    set: function (v) {\n      this.i.ki = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextColor\", {\n    /**\n     * Gets or sets color of title on the X-axis\n    *\n    * To change the color of the x-axis title, set the `xAxisTitleTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisTitleTextColor=\"green\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n5);\n    },\n    set: function (v) {\n      this.i.n5 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextColor\", {\n    /**\n     * Gets or sets color of title on the Y-axis\n    *\n    * To change the color of the y-axis title, set the `yAxisTitleTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.yAxisTitleTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleTextColor=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.oc);\n    },\n    set: function (v) {\n      this.i.oc = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextStyle\", {\n    /**\n     * Gets or sets CSS font property for labels on X-axis\n    *\n    * To change the font of x-axis labels, set the `xAxisLabelTextStyle` property.\n    *\n    * ```ts\n    * this.chart.xAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.k8;\n    },\n    set: function (v) {\n      this.i.k8 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextStyle\", {\n    /**\n     * Gets or sets CSS font property for labels on Y-axis\n    *\n    * To change the font of x-axis labels, set the `yAxisLabelTextStyle` property.\n    *\n    * ```ts\n    * this.chart. yAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ma;\n    },\n    set: function (v) {\n      this.i.ma = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextStyle\", {\n    /**\n     * Gets or sets CSS font property for title on X-axis\n    *\n    * To change the font of the x-axis title, set the `xAxisTitleTextStyle` property.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.lw;\n    },\n    set: function (v) {\n      this.i.lw = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextStyle\", {\n    /**\n     * Gets or sets CSS font property for title on Y-axis\n    *\n    * To change the font of the x-axis title, set the `yAxisTitleTextStyle` property.\n    *\n    * ```ts\n    * this.chart.yAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.my;\n    },\n    set: function (v) {\n      this.i.my = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabel\", {\n    /**\n     * Gets or sets the format for labels along the X-axis.\n    */\n    get: function () {\n      return this.i.kp;\n    },\n    set: function (v) {\n      this.i.kp = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabel\", {\n    /**\n     * Gets or sets the property or string from which the labels are derived.\n    */\n    get: function () {\n      return this.i.kq;\n    },\n    set: function (v) {\n      this.i.kq = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStroke\", {\n    /**\n     * Gets or sets the color to apply to major gridlines along the X-axis.\n    *\n    * Set `xAxisMajorStroke` to control the color of major gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisMajorStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisMajorStroke=\"green\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n0);\n    },\n    set: function (v) {\n      this.i.n0 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStroke\", {\n    /**\n     * Gets or sets the color to apply to major gridlines along the Y-axis.\n    *\n    * Set `yAxisMajorStroke` to control the color of major gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMajorStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    *     yAxisMajorStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n7);\n    },\n    set: function (v) {\n      this.i.n7 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to major gridlines along the X-axis.\n    *\n    * Set `xAxisMajorStrokeThickness` to control the thickness of major gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisMajorStrokeThickness=\"3\" ;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisMajorStrokeThickness=\"3\"\n    * \txAxisExtent\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jv;\n    },\n    set: function (v) {\n      this.i.jv = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to major gridlines along the Y-axis.\n    *\n    * Set `yAxisMajorStrokeThickness` to control the thickness of major gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMajorStrokeThickness=\"2\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisMajorStrokeThickness={2}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kc;\n    },\n    set: function (v) {\n      this.i.kc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to minor gridlines along the X-axis.\n    *\n    * Set `xAxisMinorStrokeThickness` to control the thickness of minor gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisMinorStrokeThickness=\"3\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisMinorStrokeThickness=\"3\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jw;\n    },\n    set: function (v) {\n      this.i.jw = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to minor gridlines along the Y-axis.\n    *\n    * Set `yAxisMinorStrokeThickness` to control the thickness of minor gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMinorStrokeThickness=\"3\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisMinorStrokeThickness={3}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kd;\n    },\n    set: function (v) {\n      this.i.kd = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisStrip\", {\n    /**\n     * Gets or sets the color to apply to stripes along the X-axis.\n    *\n    * Set `xAxisStrip` to control the alternating color of stripes extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisStrip=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisStrip=\"green\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n2);\n    },\n    set: function (v) {\n      this.i.n2 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisStrip\", {\n    /**\n     * Gets or sets the color to apply to stripes along the Y-axis.\n    *\n    * Set `yAxisStrip` to control the alternating color of stripes extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisStrip=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisStrip=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n9);\n    },\n    set: function (v) {\n      this.i.n9 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisStroke\", {\n    /**\n     * Gets or sets the color to apply to the X-axis line.\n    *\n    * Set `xAxisStroke` to control the color of the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisStroke=\"green\"\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisStroke=\"green\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n3);\n    },\n    set: function (v) {\n      this.i.n3 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisStroke\", {\n    /**\n     * Gets or sets the color to apply to the Y-axis line.\n    *\n    * Set `yAxisStroke` to control the color of the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.oa);\n    },\n    set: function (v) {\n      this.i.oa = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to the X-axis line.\n    *\n    * Set `xAxisStrokeThickness` to control the thickness of the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisStrokeThickness=\"2\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisStrokeThickness={2}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jx;\n    },\n    set: function (v) {\n      this.i.jx = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to the Y-axis line.\n    *\n    * Set `yAxisStrokeThickness` to control the thickness of the y-axis line.\n    *\n    * ```ts\n    * this.chart. yAxisStrokeThickness=\"2\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisStrokeThickness={2}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ke;\n    },\n    set: function (v) {\n      this.i.ke = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTickLength\", {\n    /**\n     * Gets or sets the length of tickmarks along the X-axis.\n    *\n    * Set `xAxisTickLength` to control the length of tickmarks extending vertically from the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisTickLength=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTickLength\t={25}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jy;\n    },\n    set: function (v) {\n      this.i.jy = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTickLength\", {\n    /**\n     * Gets or sets the length of tickmarks along the Y-axis.\n    *\n    * Set `yAxisTickLength` to control the length of tickmarks extending horizontally from the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisTickLength=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTickLength\t={25}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kf;\n    },\n    set: function (v) {\n      this.i.kf = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStroke\", {\n    /**\n     * Gets or sets the color to apply to tickmarks along the X-axis.\n    *\n    * Set `xAxisTickStroke` to control the color of tickmarks extending vertically from the x-axis line.\n    *\n    * ```ts\n    * this.chart. xAxisTickStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisTickStroke=\"green\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n4);\n    },\n    set: function (v) {\n      this.i.n4 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStroke\", {\n    /**\n     * Gets or sets the color to apply to tickmarks along the Y-axis.\n    *\n    * Set `yAxisTickStroke` to control the color of tickmarks extending horizontally from the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisTickStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTickStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.ob);\n    },\n    set: function (v) {\n      this.i.ob = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to tickmarks along the X-axis.\n    *\n    * Set `xAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisTickStrokeThickness=\"20\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTickStrokeThickness={20}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jz;\n    },\n    set: function (v) {\n      this.i.jz = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to tickmarks along the Y-axis.\n    *\n    * Set `yAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisTickStrokeThickness=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTickStrokeThickness\t={25}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kg;\n    },\n    set: function (v) {\n      this.i.kg = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitle\", {\n    /**\n     * Gets or sets the Text to display below the X-axis.\n    *\n    * Set `xAxisTitle` to display a label adjacent to the x-axis.\n    *\n    * ```ts\n    * this.chart. xAxisTitle=\"x axis\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitle=\"x axis\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ln;\n    },\n    set: function (v) {\n      this.i.ln = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitle\", {\n    /**\n     * Gets or sets the Text to display to the left of the Y-axis.\n    *\n    * Set `yAxisTitle` to display a label adjacent to the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisTitle=\"y axis\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitle=\"y axis\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.mp;\n    },\n    set: function (v) {\n      this.i.mp = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStroke\", {\n    /**\n     * Gets or sets the color to apply to minor gridlines along the X-axis.\n    *\n    * Set `xAxisMinorStroke` to control the color of minor gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisExtent=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisMinorStroke=\"green\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n1);\n    },\n    set: function (v) {\n      this.i.n1 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStroke\", {\n    /**\n     * Gets or sets the color to apply to minor gridlines along the Y-axis.\n    *\n    * Set `yAxisMinorStroke` to control the color of minor gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMinorStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisMinorStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.n8);\n    },\n    set: function (v) {\n      this.i.n8 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelAngle\", {\n    /**\n     * Gets or sets the angle of rotation for labels along the X-axis.\n    *\n    * To control the rotation of labels on the x-axis, set the `xAxisLabelAngle` property to a number of rotational degrees.\n    *\n    * ```ts\n    * this.chart.xAxisLabelAngle=\"45\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelAngle={45}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jq;\n    },\n    set: function (v) {\n      this.i.jq = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelAngle\", {\n    /**\n     * Gets or sets the angle of rotation for labels along the Y-axis.\n    *\n    * To control the rotation of labels on the y-axis, set the `yAxisLabelAngle` property to a number of rotational degrees.\n    *\n    * ```ts\n    * this.chart.yAxisLabelAngle=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelAngle\t={25}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j7;\n    },\n    set: function (v) {\n      this.i.j7 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisExtent\", {\n    /**\n     * Gets or sets the distance between the X-axis and the bottom of the chart.\n    *\n    * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n    *\n    * ```ts\n    * this.chart.xAxisExtent=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisExtent\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jp;\n    },\n    set: function (v) {\n      this.i.jp = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisExtent\", {\n    /**\n     * Gets or sets the distance between the Y-axis and the left edge of the chart.\n    *\n    * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n    *\n    * ```ts\n    * this.chart.xAxisExtent=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisExtent\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j6;\n    },\n    set: function (v) {\n      this.i.j6 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAngle\", {\n    /**\n     * Gets or sets the angle of rotation for the X-axis title.\n    *\n    * Set `xAxisTitleAngle` to control the rotation of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleAngle=\"50\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleAngle\t={50}\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.j0;\n    },\n    set: function (v) {\n      this.i.j0 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAngle\", {\n    /**\n     * Gets or sets the angle of rotation for the Y-axis title.\n    *\n    * Set `yAxisTitleAngle` to control the rotation of the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleAngle=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleAngle\t={24}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.kh;\n    },\n    set: function (v) {\n      this.i.kh = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisInverted\", {\n    /**\n     * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.\n    *\n    * To reverse the direction of items along the x-axis, set the `xAxisInverted` property to true.\n    *\n    * ```ts\n    * this.chart.XAxisInverted=\"True\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tXAxisInverted=\"True\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ik;\n    },\n    set: function (v) {\n      this.i.ik = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisInverted\", {\n    /**\n     * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.\n    *\n    * You can use `yAxisInverted` to invert the scale of the y axis like this:\n    *\n    * ```ts\n    * this.chart.yAxisInverted=\"true\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisInverted=\"true\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    *\n    * The default value of `yAxisInverted` is false.\n    */\n    get: function () {\n      return this.i.il;\n    },\n    set: function (v) {\n      this.i.il = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of the X-axis title.\n    *\n    * Set `xAxisTitleAlignment` to control the horizontal alignment of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleAlignment=\"right\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisTitleAlignment=\"right\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.nj;\n    },\n    set: function (v) {\n      this.i.nj = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAlignment\", {\n    /**\n     * Gets or sets Vertical alignment of the Y-axis title.\n    *\n    * Set `yAxisTitleAlignment` to control the vertical alignment of the x-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleAlignment=\"bottom\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleAlignment=\"bottom\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.oi;\n    },\n    set: function (v) {\n      this.i.oi = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelHorizontalAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of X-axis labels.\n    */\n    get: function () {\n      return this.i.ni;\n    },\n    set: function (v) {\n      this.i.ni = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelHorizontalAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of Y-axis labels.\n    *\n    * Set the `yAxisLabelHorizontalAlignment` property to change the horizontal alignment of y-axis labels.\n    */\n    get: function () {\n      return this.i.nk;\n    },\n    set: function (v) {\n      this.i.nk = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVerticalAlignment\", {\n    /**\n     * Gets or sets Vertical alignment of X-axis labels.\n    *\n    * Use the `xAxisLabelVerticalAlignment` property to change the vertical position of x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelVerticalAlignment=\"bottom\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelVerticalAlignment=\"bottom\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.og;\n    },\n    set: function (v) {\n      this.i.og = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVerticalAlignment\", {\n    /**\n     * Gets or sets Vertical alignment of Y-axis labels.\n    */\n    get: function () {\n      return this.i.oh;\n    },\n    set: function (v) {\n      this.i.oh = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVisibility\", {\n    /**\n     * Gets or sets Visibility of X-axis labels.\n    *\n    * To hide the x-axis labels, set `xAxisLabelVisibility` to collapsed.\n    *\n    * ```ts\n    * this.chart.xAxisLabelVisibility=\"collapsed\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelVisibility=\"collapsed\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ol;\n    },\n    set: function (v) {\n      this.i.ol = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVisibility\", {\n    /**\n     * Gets or sets Visibility of Y-axis labels.\n    *\n    * To hide the y-axis labels, set `yAxisLabelVisibility` to collapsed.\n    *\n    * ```ts\n    * this.chart.yAxisLabelVisibility=\"collapsed\"\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelVisibility=\"collapsed\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.om;\n    },\n    set: function (v) {\n      this.i.om = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLocation\", {\n    /**\n     * The location of Y-axis labels, relative to the plot area.\n    *\n    * Set the `yAxisLabelLocation` property to change the location of the y-axis and its labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelLocation=\"outsideRight\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelLocation=\"outsideRight\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ih;\n    },\n    set: function (v) {\n      this.i.ih = ensureEnum(AxisLabelsLocation_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Called by the UI framework to provide a UI container for rendering this control.\n  \r\n  * @param container  * The UI container element.\n  */\n\n  IgrXYChart.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n  /**\n   * Converts the given visual location to a data value.\n  \r\n  * @param unscaledValue  * The x-coordinate of the location to scale.\n  */\n\n\n  IgrXYChart.prototype.getScaledValueX = function (unscaledValue) {\n    var iv = this.i.jl(unscaledValue);\n    return iv;\n  };\n  /**\n   * Converts the given data value to a visual location.\n  \r\n  * @param scaledValue  * The data value to un-scale.\n  */\n\n\n  IgrXYChart.prototype.getUnscaledValueX = function (scaledValue) {\n    var iv = this.i.jn(scaledValue);\n    return iv;\n  };\n  /**\n   * Converts the given visual location to a data value.\n  \r\n  * @param unscaledValue  * The y-coordinate of the location to scale.\n  */\n\n\n  IgrXYChart.prototype.getScaledValueY = function (unscaledValue) {\n    var iv = this.i.jm(unscaledValue);\n    return iv;\n  };\n  /**\n   * Converts the given data value to a visual location.\n  \r\n  * @param scaledValue  * The data value to un-scale.\n  */\n\n\n  IgrXYChart.prototype.getUnscaledValueY = function (scaledValue) {\n    var iv = this.i.jo(scaledValue);\n    return iv;\n  };\n\n  return IgrXYChart;\n}(IgrDomainChart);\n\nexport { IgrXYChart };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-xy-chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { AxisLabelsLocation_$type } from \"./AxisLabelsLocation\";\nimport { IgrDomainChart } from \"./igr-domain-chart\";\nimport { brushToString, stringToBrush, ensureBool, ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a base class for domain charts with X/Y axes\n*/\nvar IgrXYChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrXYChart, _super);\n    function IgrXYChart(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrXYChart.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisFormatLabel\", {\n        /**\n         * Gets or sets function which takes an context object and returns a formatted label for the X-axis.\n        *\n        * To customize the text of the x-axis label, set `xAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be your data item.\n        *\n        * ```ts\n        * formatX(item: any): string {\n        *     return \"[ \" + item.label + \"! ]\";\n        * }\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisFormatLabel=\"formatX\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.id;\n        },\n        set: function (v) {\n            this.i.id = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisFormatLabel\", {\n        /**\n         * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.\n        *\n        * To customize the text of the y-axis label, set `yAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be the numeric value corresponding to a position on the y-axis.\n        *\n        * ```ts\n        * formatY(value: any): string {\n        *     return \"[ \" + value+ \"! ]\";\n        * }\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisFormatLabel=\"formatY\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ie;\n        },\n        set: function (v) {\n            this.i.ie = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelLeftMargin` property to apply a margin left of the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelLeftMargin =\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelLeftMargin={100}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.js;\n        },\n        set: function (v) {\n            this.i.js = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelTopMargin` property to apply a margin above the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTopMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleTopMargin\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ju;\n        },\n        set: function (v) {\n            this.i.ju = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelRightMargin` property to apply a margin right of the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelRightMargin=\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelRightMargin={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jt;\n        },\n        set: function (v) {\n            this.i.jt = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelBottomMargin` property to apply a margin below the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelBottomMargin =\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelBottomMargin={100}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jr;\n        },\n        set: function (v) {\n            this.i.jr = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelLeftMargin` property to apply a margin left of the y-axis labels.\n        *\n        * ```ts\n        * this.chart. yAxisLabelLeftMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisLabelLeftMargin={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j9;\n        },\n        set: function (v) {\n            this.i.j9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelTopMargin` property to apply a margin above the y-axis labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelTopMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelTopMargin\t={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kb;\n        },\n        set: function (v) {\n            this.i.kb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelRightMargin` property to apply a margin right of the y-axis labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelRightMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelRightMargin={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ka;\n        },\n        set: function (v) {\n            this.i.ka = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelBottomMargin` property to apply a margin below the y-axis labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelBottomMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelBottomMargin={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j8;\n        },\n        set: function (v) {\n            this.i.j8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextColor\", {\n        /**\n         * Gets or sets color of labels on the X-axis\n        *\n        * To change the color of x-axis labels, set the `xAxisLabelTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.xAxisLabelTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelTextColor=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.nz);\n        },\n        set: function (v) {\n            this.i.nz = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextColor\", {\n        /**\n         * Gets or sets color of labels on the Y-axis\n        *\n        * To change the color of y-axis labels, set the `yAxisLabelTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.yAxisLabelTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelTextColor=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n6);\n        },\n        set: function (v) {\n            this.i.n6 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleMargin\", {\n        /**\n         * Gets or sets the margin around a title on the X-axis\n        *\n        * Use the `xAxisTitleMargin` property to set a margin around the y-axis title.\n        */\n        get: function () {\n            return this.i.j3;\n        },\n        set: function (v) {\n            this.i.j3 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleMargin\", {\n        /**\n         * Gets or sets the margin around a title on the Y-axis\n        *\n        * Use the `yAxisTitleMargin` property to set a margin around the y-axis title.\n        */\n        get: function () {\n            return this.i.kk;\n        },\n        set: function (v) {\n            this.i.kk = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleLeftMargin\", {\n        /**\n         * Gets or sets the left margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleLeftMargin` property to apply a margin left of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleLeftMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleLeftMargin={150}\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j2;\n        },\n        set: function (v) {\n            this.i.j2 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleLeftMargin\", {\n        /**\n         * Gets or sets the left margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleLeftMargin` property to apply a margin left of the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleLeftMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleLeftMargin={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kj;\n        },\n        set: function (v) {\n            this.i.kj = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTopMargin\", {\n        /**\n         * Gets or sets the top margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleTopMargin` property to apply a margin above the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTopMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleTopMargin\t={150}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j5;\n        },\n        set: function (v) {\n            this.i.j5 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTopMargin\", {\n        /**\n         * Gets or sets the top margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleTopMargin` property to apply a margin above the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleTopMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleTopMargin\t={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.km;\n        },\n        set: function (v) {\n            this.i.km = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleRightMargin\", {\n        /**\n         * Gets or sets the right margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleRightMargin` property to apply a margin right of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleRightMargin=\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleRightMargin=\"100\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j4;\n        },\n        set: function (v) {\n            this.i.j4 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleRightMargin\", {\n        /**\n         * Gets or sets the right margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleRightMargin` property to apply a margin right of the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleRightMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleRightMargin={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kl;\n        },\n        set: function (v) {\n            this.i.kl = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleBottomMargin` property to apply a margin below the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleBottomMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleBottomMargin={250}\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j1;\n        },\n        set: function (v) {\n            this.i.j1 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleBottomMargin` property to apply a margin below the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleBottomMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleBottomMargin\t={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ki;\n        },\n        set: function (v) {\n            this.i.ki = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextColor\", {\n        /**\n         * Gets or sets color of title on the X-axis\n        *\n        * To change the color of the x-axis title, set the `xAxisTitleTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisTitleTextColor=\"green\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n5);\n        },\n        set: function (v) {\n            this.i.n5 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextColor\", {\n        /**\n         * Gets or sets color of title on the Y-axis\n        *\n        * To change the color of the y-axis title, set the `yAxisTitleTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.yAxisTitleTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleTextColor=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.oc);\n        },\n        set: function (v) {\n            this.i.oc = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextStyle\", {\n        /**\n         * Gets or sets CSS font property for labels on X-axis\n        *\n        * To change the font of x-axis labels, set the `xAxisLabelTextStyle` property.\n        *\n        * ```ts\n        * this.chart.xAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.k8;\n        },\n        set: function (v) {\n            this.i.k8 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextStyle\", {\n        /**\n         * Gets or sets CSS font property for labels on Y-axis\n        *\n        * To change the font of x-axis labels, set the `yAxisLabelTextStyle` property.\n        *\n        * ```ts\n        * this.chart. yAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ma;\n        },\n        set: function (v) {\n            this.i.ma = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextStyle\", {\n        /**\n         * Gets or sets CSS font property for title on X-axis\n        *\n        * To change the font of the x-axis title, set the `xAxisTitleTextStyle` property.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.lw;\n        },\n        set: function (v) {\n            this.i.lw = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextStyle\", {\n        /**\n         * Gets or sets CSS font property for title on Y-axis\n        *\n        * To change the font of the x-axis title, set the `yAxisTitleTextStyle` property.\n        *\n        * ```ts\n        * this.chart.yAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.my;\n        },\n        set: function (v) {\n            this.i.my = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabel\", {\n        /**\n         * Gets or sets the format for labels along the X-axis.\n        */\n        get: function () {\n            return this.i.kp;\n        },\n        set: function (v) {\n            this.i.kp = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabel\", {\n        /**\n         * Gets or sets the property or string from which the labels are derived.\n        */\n        get: function () {\n            return this.i.kq;\n        },\n        set: function (v) {\n            this.i.kq = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStroke\", {\n        /**\n         * Gets or sets the color to apply to major gridlines along the X-axis.\n        *\n        * Set `xAxisMajorStroke` to control the color of major gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisMajorStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisMajorStroke=\"green\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n0);\n        },\n        set: function (v) {\n            this.i.n0 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStroke\", {\n        /**\n         * Gets or sets the color to apply to major gridlines along the Y-axis.\n        *\n        * Set `yAxisMajorStroke` to control the color of major gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMajorStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        *     yAxisMajorStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n7);\n        },\n        set: function (v) {\n            this.i.n7 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to major gridlines along the X-axis.\n        *\n        * Set `xAxisMajorStrokeThickness` to control the thickness of major gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisMajorStrokeThickness=\"3\" ;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisMajorStrokeThickness=\"3\"\n        * \txAxisExtent\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jv;\n        },\n        set: function (v) {\n            this.i.jv = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to major gridlines along the Y-axis.\n        *\n        * Set `yAxisMajorStrokeThickness` to control the thickness of major gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMajorStrokeThickness=\"2\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisMajorStrokeThickness={2}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kc;\n        },\n        set: function (v) {\n            this.i.kc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to minor gridlines along the X-axis.\n        *\n        * Set `xAxisMinorStrokeThickness` to control the thickness of minor gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisMinorStrokeThickness=\"3\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisMinorStrokeThickness=\"3\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jw;\n        },\n        set: function (v) {\n            this.i.jw = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to minor gridlines along the Y-axis.\n        *\n        * Set `yAxisMinorStrokeThickness` to control the thickness of minor gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMinorStrokeThickness=\"3\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisMinorStrokeThickness={3}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kd;\n        },\n        set: function (v) {\n            this.i.kd = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisStrip\", {\n        /**\n         * Gets or sets the color to apply to stripes along the X-axis.\n        *\n        * Set `xAxisStrip` to control the alternating color of stripes extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisStrip=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisStrip=\"green\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n2);\n        },\n        set: function (v) {\n            this.i.n2 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisStrip\", {\n        /**\n         * Gets or sets the color to apply to stripes along the Y-axis.\n        *\n        * Set `yAxisStrip` to control the alternating color of stripes extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisStrip=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisStrip=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n9);\n        },\n        set: function (v) {\n            this.i.n9 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisStroke\", {\n        /**\n         * Gets or sets the color to apply to the X-axis line.\n        *\n        * Set `xAxisStroke` to control the color of the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisStroke=\"green\"\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisStroke=\"green\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n3);\n        },\n        set: function (v) {\n            this.i.n3 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisStroke\", {\n        /**\n         * Gets or sets the color to apply to the Y-axis line.\n        *\n        * Set `yAxisStroke` to control the color of the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.oa);\n        },\n        set: function (v) {\n            this.i.oa = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to the X-axis line.\n        *\n        * Set `xAxisStrokeThickness` to control the thickness of the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisStrokeThickness=\"2\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisStrokeThickness={2}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jx;\n        },\n        set: function (v) {\n            this.i.jx = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to the Y-axis line.\n        *\n        * Set `yAxisStrokeThickness` to control the thickness of the y-axis line.\n        *\n        * ```ts\n        * this.chart. yAxisStrokeThickness=\"2\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisStrokeThickness={2}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ke;\n        },\n        set: function (v) {\n            this.i.ke = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTickLength\", {\n        /**\n         * Gets or sets the length of tickmarks along the X-axis.\n        *\n        * Set `xAxisTickLength` to control the length of tickmarks extending vertically from the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisTickLength=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTickLength\t={25}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jy;\n        },\n        set: function (v) {\n            this.i.jy = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTickLength\", {\n        /**\n         * Gets or sets the length of tickmarks along the Y-axis.\n        *\n        * Set `yAxisTickLength` to control the length of tickmarks extending horizontally from the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisTickLength=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTickLength\t={25}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kf;\n        },\n        set: function (v) {\n            this.i.kf = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStroke\", {\n        /**\n         * Gets or sets the color to apply to tickmarks along the X-axis.\n        *\n        * Set `xAxisTickStroke` to control the color of tickmarks extending vertically from the x-axis line.\n        *\n        * ```ts\n        * this.chart. xAxisTickStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisTickStroke=\"green\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n4);\n        },\n        set: function (v) {\n            this.i.n4 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStroke\", {\n        /**\n         * Gets or sets the color to apply to tickmarks along the Y-axis.\n        *\n        * Set `yAxisTickStroke` to control the color of tickmarks extending horizontally from the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisTickStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTickStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.ob);\n        },\n        set: function (v) {\n            this.i.ob = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to tickmarks along the X-axis.\n        *\n        * Set `xAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisTickStrokeThickness=\"20\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTickStrokeThickness={20}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jz;\n        },\n        set: function (v) {\n            this.i.jz = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to tickmarks along the Y-axis.\n        *\n        * Set `yAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisTickStrokeThickness=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTickStrokeThickness\t={25}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kg;\n        },\n        set: function (v) {\n            this.i.kg = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitle\", {\n        /**\n         * Gets or sets the Text to display below the X-axis.\n        *\n        * Set `xAxisTitle` to display a label adjacent to the x-axis.\n        *\n        * ```ts\n        * this.chart. xAxisTitle=\"x axis\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitle=\"x axis\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ln;\n        },\n        set: function (v) {\n            this.i.ln = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitle\", {\n        /**\n         * Gets or sets the Text to display to the left of the Y-axis.\n        *\n        * Set `yAxisTitle` to display a label adjacent to the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisTitle=\"y axis\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitle=\"y axis\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.mp;\n        },\n        set: function (v) {\n            this.i.mp = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStroke\", {\n        /**\n         * Gets or sets the color to apply to minor gridlines along the X-axis.\n        *\n        * Set `xAxisMinorStroke` to control the color of minor gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisExtent=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisMinorStroke=\"green\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n1);\n        },\n        set: function (v) {\n            this.i.n1 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStroke\", {\n        /**\n         * Gets or sets the color to apply to minor gridlines along the Y-axis.\n        *\n        * Set `yAxisMinorStroke` to control the color of minor gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMinorStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisMinorStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.n8);\n        },\n        set: function (v) {\n            this.i.n8 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelAngle\", {\n        /**\n         * Gets or sets the angle of rotation for labels along the X-axis.\n        *\n        * To control the rotation of labels on the x-axis, set the `xAxisLabelAngle` property to a number of rotational degrees.\n        *\n        * ```ts\n        * this.chart.xAxisLabelAngle=\"45\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelAngle={45}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jq;\n        },\n        set: function (v) {\n            this.i.jq = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelAngle\", {\n        /**\n         * Gets or sets the angle of rotation for labels along the Y-axis.\n        *\n        * To control the rotation of labels on the y-axis, set the `yAxisLabelAngle` property to a number of rotational degrees.\n        *\n        * ```ts\n        * this.chart.yAxisLabelAngle=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelAngle\t={25}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j7;\n        },\n        set: function (v) {\n            this.i.j7 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisExtent\", {\n        /**\n         * Gets or sets the distance between the X-axis and the bottom of the chart.\n        *\n        * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n        *\n        * ```ts\n        * this.chart.xAxisExtent=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisExtent\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jp;\n        },\n        set: function (v) {\n            this.i.jp = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisExtent\", {\n        /**\n         * Gets or sets the distance between the Y-axis and the left edge of the chart.\n        *\n        * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n        *\n        * ```ts\n        * this.chart.xAxisExtent=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisExtent\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j6;\n        },\n        set: function (v) {\n            this.i.j6 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAngle\", {\n        /**\n         * Gets or sets the angle of rotation for the X-axis title.\n        *\n        * Set `xAxisTitleAngle` to control the rotation of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleAngle=\"50\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleAngle\t={50}\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.j0;\n        },\n        set: function (v) {\n            this.i.j0 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAngle\", {\n        /**\n         * Gets or sets the angle of rotation for the Y-axis title.\n        *\n        * Set `yAxisTitleAngle` to control the rotation of the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleAngle=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleAngle\t={24}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.kh;\n        },\n        set: function (v) {\n            this.i.kh = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisInverted\", {\n        /**\n         * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.\n        *\n        * To reverse the direction of items along the x-axis, set the `xAxisInverted` property to true.\n        *\n        * ```ts\n        * this.chart.XAxisInverted=\"True\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tXAxisInverted=\"True\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ik;\n        },\n        set: function (v) {\n            this.i.ik = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisInverted\", {\n        /**\n         * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.\n        *\n        * You can use `yAxisInverted` to invert the scale of the y axis like this:\n        *\n        * ```ts\n        * this.chart.yAxisInverted=\"true\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisInverted=\"true\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        *\n        * The default value of `yAxisInverted` is false.\n        */\n        get: function () {\n            return this.i.il;\n        },\n        set: function (v) {\n            this.i.il = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of the X-axis title.\n        *\n        * Set `xAxisTitleAlignment` to control the horizontal alignment of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleAlignment=\"right\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisTitleAlignment=\"right\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.nj;\n        },\n        set: function (v) {\n            this.i.nj = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAlignment\", {\n        /**\n         * Gets or sets Vertical alignment of the Y-axis title.\n        *\n        * Set `yAxisTitleAlignment` to control the vertical alignment of the x-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleAlignment=\"bottom\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleAlignment=\"bottom\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.oi;\n        },\n        set: function (v) {\n            this.i.oi = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelHorizontalAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of X-axis labels.\n        */\n        get: function () {\n            return this.i.ni;\n        },\n        set: function (v) {\n            this.i.ni = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelHorizontalAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of Y-axis labels.\n        *\n        * Set the `yAxisLabelHorizontalAlignment` property to change the horizontal alignment of y-axis labels.\n        */\n        get: function () {\n            return this.i.nk;\n        },\n        set: function (v) {\n            this.i.nk = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVerticalAlignment\", {\n        /**\n         * Gets or sets Vertical alignment of X-axis labels.\n        *\n        * Use the `xAxisLabelVerticalAlignment` property to change the vertical position of x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelVerticalAlignment=\"bottom\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelVerticalAlignment=\"bottom\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.og;\n        },\n        set: function (v) {\n            this.i.og = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVerticalAlignment\", {\n        /**\n         * Gets or sets Vertical alignment of Y-axis labels.\n        */\n        get: function () {\n            return this.i.oh;\n        },\n        set: function (v) {\n            this.i.oh = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVisibility\", {\n        /**\n         * Gets or sets Visibility of X-axis labels.\n        *\n        * To hide the x-axis labels, set `xAxisLabelVisibility` to collapsed.\n        *\n        * ```ts\n        * this.chart.xAxisLabelVisibility=\"collapsed\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelVisibility=\"collapsed\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ol;\n        },\n        set: function (v) {\n            this.i.ol = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVisibility\", {\n        /**\n         * Gets or sets Visibility of Y-axis labels.\n        *\n        * To hide the y-axis labels, set `yAxisLabelVisibility` to collapsed.\n        *\n        * ```ts\n        * this.chart.yAxisLabelVisibility=\"collapsed\"\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelVisibility=\"collapsed\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.om;\n        },\n        set: function (v) {\n            this.i.om = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLocation\", {\n        /**\n         * The location of Y-axis labels, relative to the plot area.\n        *\n        * Set the `yAxisLabelLocation` property to change the location of the y-axis and its labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelLocation=\"outsideRight\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelLocation=\"outsideRight\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ih;\n        },\n        set: function (v) {\n            this.i.ih = ensureEnum(AxisLabelsLocation_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called by the UI framework to provide a UI container for rendering this control.\n    \r\n    * @param container  * The UI container element.\n    */\n    IgrXYChart.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    /**\n     * Converts the given visual location to a data value.\n    \r\n    * @param unscaledValue  * The x-coordinate of the location to scale.\n    */\n    IgrXYChart.prototype.getScaledValueX = function (unscaledValue) {\n        var iv = this.i.jl(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Converts the given data value to a visual location.\n    \r\n    * @param scaledValue  * The data value to un-scale.\n    */\n    IgrXYChart.prototype.getUnscaledValueX = function (scaledValue) {\n        var iv = this.i.jn(scaledValue);\n        return (iv);\n    };\n    /**\n     * Converts the given visual location to a data value.\n    \r\n    * @param unscaledValue  * The y-coordinate of the location to scale.\n    */\n    IgrXYChart.prototype.getScaledValueY = function (unscaledValue) {\n        var iv = this.i.jm(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Converts the given data value to a visual location.\n    \r\n    * @param scaledValue  * The data value to un-scale.\n    */\n    IgrXYChart.prototype.getUnscaledValueY = function (scaledValue) {\n        var iv = this.i.jo(scaledValue);\n        return (iv);\n    };\n    return IgrXYChart;\n}(IgrDomainChart));\nexport { IgrXYChart };\n//# sourceMappingURL=igr-xy-chart.js.map\n"]},"metadata":{},"sourceType":"module"}