{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TimeAxisDisplayType_$type } from \"./TimeAxisDisplayType\";\nimport { IgrTimeAxisBase } from \"./igr-time-axis-base\";\nimport { CategoryDateTimeXAxis } from \"./CategoryDateTimeXAxis\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a category-based horizontal X axis that uses a DateTime scale.\n*\n* `IgrCategoryDateTimeXAxis` class represents a category-based horizontal X axis that uses a DateTime scale.\n*\n* ```ts\n*   <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*     <IgrTimeXAxis name=\"xAxis\"\n* \t\t\tlabel=\"Time\"\n* \t\t\tdateTimeMemberPath=\"time\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n* \tthis.timeXAxis.title = \"Time X Axis\";\n* \tthis.timeXAxis.dataSource = this.financialData;\n* \tthis.timeXAxis.dateTimeMemberPath = \"Time\";\n* \tthis.timeXAxis.label = \"Date\";\n* ```\n*/\n\nvar IgrCategoryDateTimeXAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrCategoryDateTimeXAxis, _super);\n\n  function IgrCategoryDateTimeXAxis(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrCategoryDateTimeXAxis.prototype.createImplementation = function () {\n    return new CategoryDateTimeXAxis();\n  };\n\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"isContinuous\", {\n    /**\n     * Gets if the current axis is a continuous rather than a discrete scale\n    */\n    get: function () {\n      return this.i.b4;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"displayType\", {\n    /**\n     * Gets or sets the axis display type.\n     * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.\n     * Discrete display type will not use a constant interval, but will align each label with its data point.\n    *\n    * `displayType` property is used for axis display type.\n    *\n    * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.\n    *\n    * ```ts\n    *   <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *     <IgrTimeXAxis name=\"xAxis\" label=\"Date\"\n    * \t\t\tdateTimeMemberPath=\"Date\"\n    * \t\t\tdisplayType =\"continuous\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n    * this.xAxis.dataTimeMemberPath=\"date\";\n    * this.xAxis.displayType =\"continuous\"\n    * ```\n    */\n    get: function () {\n      return this.i.l4;\n    },\n    set: function (v) {\n      this.i.l4 = ensureEnum(TimeAxisDisplayType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"interval\", {\n    /**\n     * Gets or sets the X axis time interval.\n    *\n    * `interval` property is used to get/sets the frequency of displayed labels.\n    *\n    * ```ts\n    *   <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    * \t\twidth=\"700px\"\n    * \t\theight=\"500px\">\n    *     <IgrTimeXAxis name=\"xAxis\"\n    * \t\tlabel=\"Date\"\n    * \t\tinterval={2}\n    * \t\tdateTimeMemberPath=\"Date\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n    * This.xAxis.dataTimeMemberPath=\"date\";\n    * this.xAxis.interval=2 ;\n    * ```\n    */\n    get: function () {\n      return this.i.me;\n    },\n    set: function (v) {\n      this.i.me = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"actualInterval\", {\n    /**\n     * Gets the effective value for the current Interval.\n    */\n    get: function () {\n      return this.i.mb;\n    },\n    set: function (v) {\n      this.i.mb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"minorInterval\", {\n    /**\n     * Gets or sets the frequency of displayed minor lines.\n     * The set value is a factor that determines how the minor lines will be displayed.\n    */\n    get: function () {\n      return this.i.mf;\n    },\n    set: function (v) {\n      this.i.mf = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"actualMinorInterval\", {\n    /**\n     * Gets the effective value for the current MinorInterval.\n    */\n    get: function () {\n      return this.i.mc;\n    },\n    set: function (v) {\n      this.i.mc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"isCategoryDateTime\", {\n    /**\n     * Gets if the current axis is of category date time axis type\n    */\n    get: function () {\n      return this.i.b3;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrCategoryDateTimeXAxis.prototype.scrollIntoView = function (minimum, maximum) {\n    this.i.ml(minimum, maximum);\n  };\n\n  return IgrCategoryDateTimeXAxis;\n}(IgrTimeAxisBase);\n\nexport { IgrCategoryDateTimeXAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-category-date-time-x-axis.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { TimeAxisDisplayType_$type } from \"./TimeAxisDisplayType\";\nimport { IgrTimeAxisBase } from \"./igr-time-axis-base\";\nimport { CategoryDateTimeXAxis } from \"./CategoryDateTimeXAxis\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a category-based horizontal X axis that uses a DateTime scale.\n*\n* `IgrCategoryDateTimeXAxis` class represents a category-based horizontal X axis that uses a DateTime scale.\n*\n* ```ts\n*   <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*     <IgrTimeXAxis name=\"xAxis\"\n* \t\t\tlabel=\"Time\"\n* \t\t\tdateTimeMemberPath=\"time\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n* \tthis.timeXAxis.title = \"Time X Axis\";\n* \tthis.timeXAxis.dataSource = this.financialData;\n* \tthis.timeXAxis.dateTimeMemberPath = \"Time\";\n* \tthis.timeXAxis.label = \"Date\";\n* ```\n*/\nvar IgrCategoryDateTimeXAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrCategoryDateTimeXAxis, _super);\n    function IgrCategoryDateTimeXAxis(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrCategoryDateTimeXAxis.prototype.createImplementation = function () {\n        return new CategoryDateTimeXAxis();\n    };\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"isContinuous\", {\n        /**\n         * Gets if the current axis is a continuous rather than a discrete scale\n        */\n        get: function () {\n            return this.i.b4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"displayType\", {\n        /**\n         * Gets or sets the axis display type.\n         * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.\n         * Discrete display type will not use a constant interval, but will align each label with its data point.\n        *\n        * `displayType` property is used for axis display type.\n        *\n        * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.\n        *\n        * ```ts\n        *   <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *     <IgrTimeXAxis name=\"xAxis\" label=\"Date\"\n        * \t\t\tdateTimeMemberPath=\"Date\"\n        * \t\t\tdisplayType =\"continuous\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n        * this.xAxis.dataTimeMemberPath=\"date\";\n        * this.xAxis.displayType =\"continuous\"\n        * ```\n        */\n        get: function () {\n            return this.i.l4;\n        },\n        set: function (v) {\n            this.i.l4 = ensureEnum(TimeAxisDisplayType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"interval\", {\n        /**\n         * Gets or sets the X axis time interval.\n        *\n        * `interval` property is used to get/sets the frequency of displayed labels.\n        *\n        * ```ts\n        *   <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        * \t\twidth=\"700px\"\n        * \t\theight=\"500px\">\n        *     <IgrTimeXAxis name=\"xAxis\"\n        * \t\tlabel=\"Date\"\n        * \t\tinterval={2}\n        * \t\tdateTimeMemberPath=\"Date\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n        * This.xAxis.dataTimeMemberPath=\"date\";\n        * this.xAxis.interval=2 ;\n        * ```\n        */\n        get: function () {\n            return this.i.me;\n        },\n        set: function (v) {\n            this.i.me = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"actualInterval\", {\n        /**\n         * Gets the effective value for the current Interval.\n        */\n        get: function () {\n            return this.i.mb;\n        },\n        set: function (v) {\n            this.i.mb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"minorInterval\", {\n        /**\n         * Gets or sets the frequency of displayed minor lines.\n         * The set value is a factor that determines how the minor lines will be displayed.\n        */\n        get: function () {\n            return this.i.mf;\n        },\n        set: function (v) {\n            this.i.mf = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"actualMinorInterval\", {\n        /**\n         * Gets the effective value for the current MinorInterval.\n        */\n        get: function () {\n            return this.i.mc;\n        },\n        set: function (v) {\n            this.i.mc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, \"isCategoryDateTime\", {\n        /**\n         * Gets if the current axis is of category date time axis type\n        */\n        get: function () {\n            return this.i.b3;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrCategoryDateTimeXAxis.prototype.scrollIntoView = function (minimum, maximum) {\n        this.i.ml(minimum, maximum);\n    };\n    return IgrCategoryDateTimeXAxis;\n}(IgrTimeAxisBase));\nexport { IgrCategoryDateTimeXAxis };\n//# sourceMappingURL=igr-category-date-time-x-axis.js.map\n"]},"metadata":{},"sourceType":"module"}