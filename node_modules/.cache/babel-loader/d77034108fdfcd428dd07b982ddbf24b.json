{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Treemap } from \"./Treemap\";\nimport { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps, fromBrushCollection, toBrushCollection } from \"igniteui-react-core\";\nimport { FontInfo } from \"igniteui-react-core\";\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { TreemapNodeStyleMapping } from './TreemapNodeStyleMapping';\nimport { IgrTreemapNodeStyleMappingCollection } from './igr-treemap-node-style-mapping-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { CollectionAdapter } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { TreemapFillScaleMode_$type } from \"./TreemapFillScaleMode\";\nimport { IgrTreemapNodeStylingEventArgs } from \"./igr-treemap-node-styling-event-args\";\nimport { TreemapOrientation_$type } from './TreemapOrientation';\nimport { TreemapLayoutType_$type } from './TreemapLayoutType';\nimport { IgrTreemapNodePointerEventArgs } from './igr-treemap-node-pointer-event-args';\n\nvar IgrTreemap =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrTreemap, _super);\n\n  function IgrTreemap(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._wrapper = null;\n    _this.contentStyleMappings = [];\n    /**\n    * The style mappings actually present in the treemap. Do not directly modify this array.\n    * This array's contents can be modified by causing React to reproject the child content.\n    * Or adding and removing ranges from the manual ranges collection on the ranges property.\n    */\n\n    _this.actualStyleMappings = [];\n    _this._styleMappings = null;\n    _this._styleMappingsAdapter = null;\n    _this._implementation = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._nodeStyling = null;\n    _this._nodeStyling_wrapped = null;\n    _this._nodePointerOver = null;\n    _this._nodePointerOver_wrapped = null;\n    _this._nodePointerEnter = null;\n    _this._nodePointerEnter_wrapped = null;\n    _this._nodePointerLeave = null;\n    _this._nodePointerLeave_wrapped = null;\n    _this._nodePointerPressed = null;\n    _this._nodePointerPressed_wrapped = null;\n    _this._nodePointerReleased = null;\n    _this._nodePointerReleased_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n    _this._implementation = _this.createImplementation();\n\n    if (document) {\n      _this._container = document.createElement(\"div\");\n      _this._container.style.display = \"block\";\n      _this._container.style.width = \"100%\";\n      _this._container.style.height = \"100%\";\n    }\n\n    var root;\n    root = _this._container;\n\n    if (_this._container != null) {\n      root = _this._container;\n    }\n\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this._wrapper = ren;\n    var treemap = _this.i;\n    _this._treeMap = treemap;\n    _this._styleMappingsAdapter = new CollectionAdapter(_this.contentStyleMappings, _this.i.styleMappings, _this.actualStyleMappings, function (c) {\n      return c.i;\n    }, function (i) {\n      if (_this._container && _this._container.parentElement) {\n        i._styling(_this._container, _this, _this);\n      }\n    }, function (i) {});\n    treemap.provideContainer(ren);\n    treemap.notifySizeChanged();\n\n    if (props) {\n      _this.initializeProperties();\n    }\n\n    ren.addSizeWatcher(function () {\n      _this._treeMap.notifySizeChanged();\n    });\n    return _this;\n  }\n\n  Object.defineProperty(IgrTreemap.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._treeMap.notifySizeChanged();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._treeMap.notifySizeChanged();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTreemap.prototype._getMainRef = function (ref) {\n    this._elRef = ref;\n  };\n\n  IgrTreemap.prototype._updateContentChildren = function () {\n    this.contentStyleMappings.length = 0;\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (TreemapNodeStyleMapping.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentStyleMappings.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._styleMappingsAdapter !== null) {\n      this._styleMappingsAdapter.notifyContentChanged();\n    }\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"styleMappings\", {\n    /**\n     * A collection of manually added style mappings for the treemap.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._styleMappings === null) {\n        var coll = new IgrTreemapNodeStyleMappingCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._styleMappingsAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._styleMappings = coll;\n      }\n\n      return this._styleMappings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTreemap.prototype.render = function () {\n    var children = this._contentChildrenManager.getChildren(this.props.children);\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-treemap igr-treemap\",\n      ref: this._getMainRef,\n      children: children\n    }); //}\n\n    return div;\n  };\n\n  IgrTreemap.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_1, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrTreemap.prototype.initializeProperties = function () {\n    var e_2, _a;\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  }; // supports angular themes or custom properties set in CSS\n\n\n  IgrTreemap.prototype.updateStyle = function () {\n    this._styling(this._elRef, this);\n  };\n\n  IgrTreemap.prototype.componentWillUnmount = function () {\n    this._treeMap.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrTreemap.prototype.componentDidMount = function () {\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container);\n\n    this._treeMap.notifySizeChanged();\n\n    this.initializeContent();\n  };\n\n  IgrTreemap.prototype.initializeContent = function () {\n    this._styling(this._container, this);\n\n    if (this.actualStyleMappings && this.actualStyleMappings.length > 0) {\n      var currStyleMapping = this.actualStyleMappings;\n\n      for (var i = 0; i < currStyleMapping.length; i++) {\n        currStyleMapping[i]._styling(this._container, this, this);\n      }\n    }\n\n    this._updateContentChildren();\n\n    this.updateStyle();\n    this.i.notifySizeChanged();\n  };\n\n  IgrTreemap.prototype.createImplementation = function () {\n    return new Treemap();\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"valueMemberPath\", {\n    /**\n    * Gets or sets path to use to get the values from the items.\n    */\n    get: function () {\n      return this.i.d7;\n    },\n    set: function (v) {\n      this.i.d7 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"rootTitle\", {\n    /**\n     * Gets or sets the root title to use for breadcrumbs.\n    */\n    get: function () {\n      return this.i.dx;\n    },\n    set: function (v) {\n      this.i.dx = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"breadcrumbSequence\", {\n    /**\n     * Gets or sets the root title to use for breadcrumbs.\n    */\n    get: function () {\n      return this.i.ct;\n    },\n    set: function (v) {\n      this.i.ct = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentIdMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the Parent of the items.\n    */\n    get: function () {\n      return this.i.du;\n    },\n    set: function (v) {\n      this.i.du = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the Label of the items.\n    */\n    get: function () {\n      return this.i.dm;\n    },\n    set: function (v) {\n      this.i.dm = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"customValueMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the custom value of the items.\n    */\n    get: function () {\n      return this.i.cw;\n    },\n    set: function (v) {\n      this.i.cw = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"idMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the id of the items.\n    */\n    get: function () {\n      return this.i.dh;\n    },\n    set: function (v) {\n      this.i.dh = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"dataSource\", {\n    /**\n     * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.\n    */\n    get: function () {\n      return this.i.dataSource;\n    },\n    set: function (v) {\n      this.i.dataSource = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillBrushes\", {\n    /**\n     * Gets or sets brushes to use for the fill scale.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.b);\n    },\n    set: function (v) {\n      this.i.b = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleMode\", {\n    /**\n     * Gets or sets mode to use for the fill scale.\n    */\n    get: function () {\n      return this.i.d;\n    },\n    set: function (v) {\n      this.i.d = ensureEnum(TreemapFillScaleMode_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"isFillScaleLogarithmic\", {\n    /**\n     * Gets or sets whether the fill scale is logarithmic.\n    */\n    get: function () {\n      return this.i.a6;\n    },\n    set: function (v) {\n      this.i.a6 = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleLogarithmBase\", {\n    /**\n     * Gets or sets the logarithm base to use if the fill scale is logarithmic.\n    */\n    get: function () {\n      return this.i.ci;\n    },\n    set: function (v) {\n      this.i.ci = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleMinimumValue\", {\n    /**\n     * Gets or sets the minimum value to use for the fill scale.\n    */\n    get: function () {\n      return this.i.bz;\n    },\n    set: function (v) {\n      this.i.bz = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleMaximumValue\", {\n    /**\n     * Gets or sets the maximum value to use for the fill scale.\n    */\n    get: function () {\n      return this.i.by;\n    },\n    set: function (v) {\n      this.i.by = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHoverBackground\", {\n    /**\n     * Gets or sets the background to use for the header when it is hovered.\n    */\n    get: function () {\n      return brushToString(this.i.fm);\n    },\n    set: function (v) {\n      this.i.fm = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerBackground\", {\n    /**\n     * Gets or sets the background to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.fl);\n    },\n    set: function (v) {\n      this.i.fl = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerTextColor\", {\n    /**\n     * Gets or sets the text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.fo);\n    },\n    set: function (v) {\n      this.i.fo = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"textColor\", {\n    /**\n     * Gets or sets the text color to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.fq);\n    },\n    set: function (v) {\n      this.i.fq = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHoverTextColor\", {\n    /**\n     * Gets or sets the text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.fn);\n    },\n    set: function (v) {\n      this.i.fn = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"textStyle\", {\n    /**\n     * Gets or sets the font to use for content nodes\n    */\n    get: function () {\n      if (this.i.an == null) {\n        return null;\n      }\n\n      return this.i.an.fontString;\n    },\n    set: function (v) {\n      var fi = new FontInfo();\n      fi.fontString = v;\n      this.i.an = fi;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerTextStyle\", {\n    /**\n     * Gets or sets the font to use for header nodes\n    */\n    get: function () {\n      if (this.i.am == null) {\n        return null;\n      }\n\n      return this.i.am.fontString;\n    },\n    set: function (v) {\n      var fi = new FontInfo();\n      fi.fontString = v;\n      this.i.am = fi;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the header.\n    */\n    get: function () {\n      return this.i.b8;\n    },\n    set: function (v) {\n      this.i.b8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the header.\n    */\n    get: function () {\n      return this.i.ca;\n    },\n    set: function (v) {\n      this.i.ca = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the header.\n    */\n    get: function () {\n      return this.i.b9;\n    },\n    set: function (v) {\n      this.i.b9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the header.\n    */\n    get: function () {\n      return this.i.b7;\n    },\n    set: function (v) {\n      this.i.b7 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHeight\", {\n    /**\n     * Gets or sets the height to use for the header.\n    */\n    get: function () {\n      return this.i.b6;\n    },\n    set: function (v) {\n      this.i.b6 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"outline\", {\n    /**\n     * Gets or sets the outline to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.fp);\n    },\n    set: function (v) {\n      this.i.fp = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"strokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use for the node outline.\n    */\n    get: function () {\n      return this.i.cd;\n    },\n    set: function (v) {\n      this.i.cd = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"layoutOrientation\", {\n    /**\n     * Gets or sets the orientation to use for the stripped and slice and dice layout types.\n    */\n    get: function () {\n      return this.i.z;\n    },\n    set: function (v) {\n      this.i.z = ensureEnum(TreemapOrientation_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"layoutType\", {\n    /**\n     * Gets or sets the type of layout to use for the nodes.\n    */\n    get: function () {\n      return this.i.j;\n    },\n    set: function (v) {\n      this.i.j = ensureEnum(TreemapLayoutType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"minimumDisplaySize\", {\n    /**\n     * Gets or sets the minimum size (width or height) to display a node.\n    */\n    get: function () {\n      return this.i.cb;\n    },\n    set: function (v) {\n      this.i.cb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"transitionDuration\", {\n    /**\n     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\n    */\n    get: function () {\n      return this.i.ck;\n    },\n    set: function (v) {\n      this.i.ck = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    set: function (v) {\n      this.i.cc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"actualPixelScalingRatio\", {\n    get: function () {\n      return this.i.bw;\n    },\n    set: function (v) {\n      this.i.bw = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"animating\", {\n    get: function () {\n      return this.i.a2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTreemap.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrTreemap.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"Treemap\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Returns visuals as a serialized string.\n  */\n\n\n  IgrTreemap.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.cy();\n    return iv;\n  };\n\n  IgrTreemap.prototype.markDirty = function () {\n    this.i.ei();\n  };\n\n  IgrTreemap.prototype.onDetachedFromUI = function () {\n    this.i.onDetachedFromUI();\n  };\n\n  IgrTreemap.prototype.onAttachedToUI = function () {\n    this.i.onAttachedToUI();\n  };\n\n  IgrTreemap.prototype.flush = function () {\n    this.i.eg();\n  };\n\n  IgrTreemap.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.em(source_, index, oldItem, newItem);\n  };\n  /**\n   * Manually notifies the treemap's data source that the data it has bound to has been cleared and needs to be re-examined.\n   * This should not be called if the data that the pie chart is bound to is already observable.\n  \r\n  * @param source_  * The data source.\n  */\n\n\n  IgrTreemap.prototype.notifyClearItems = function (source_) {\n    this.i.ej(source_);\n  };\n\n  IgrTreemap.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.ek(source_, index, newItem);\n  };\n\n  IgrTreemap.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.el(source_, index, oldItem);\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"nodeStyling\", {\n    /**\n     * Fired when a node is being styled. Provides an opportunity to customize node styling.\n    */\n    get: function () {\n      return this._nodeStyling;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodeStyling_wrapped !== null) {\n        this.i.nodeStyling = delegateRemove(this.i.nodeStyling, this._nodeStyling_wrapped);\n        this._nodeStyling_wrapped = null;\n        this._nodeStyling = null;\n      }\n\n      this._nodeStyling = ev;\n\n      this._nodeStyling_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodeStylingEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodeStyling) {\n          _this.beforeNodeStyling(_this, outerArgs);\n        }\n\n        if (_this._nodeStyling) {\n          _this._nodeStyling(_this, outerArgs);\n        }\n      };\n\n      this.i.nodeStyling = delegateCombine(this.i.nodeStyling, this._nodeStyling_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerOver\", {\n    /**\n     * Fired with the pointer is moving over a node.\n    */\n    get: function () {\n      return this._nodePointerOver;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerOver_wrapped !== null) {\n        this.i.nodePointerOver = delegateRemove(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n        this._nodePointerOver_wrapped = null;\n        this._nodePointerOver = null;\n      }\n\n      this._nodePointerOver = ev;\n\n      this._nodePointerOver_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerOver) {\n          _this.beforeNodePointerOver(_this, outerArgs);\n        }\n\n        if (_this._nodePointerOver) {\n          _this._nodePointerOver(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerOver = delegateCombine(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerEnter\", {\n    /**\n     * Fired when the pointer enters a node.\n    */\n    get: function () {\n      return this._nodePointerEnter;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerEnter_wrapped !== null) {\n        this.i.nodePointerEnter = delegateRemove(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n        this._nodePointerEnter_wrapped = null;\n        this._nodePointerEnter = null;\n      }\n\n      this._nodePointerEnter = ev;\n\n      this._nodePointerEnter_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerEnter) {\n          _this.beforeNodePointerEnter(_this, outerArgs);\n        }\n\n        if (_this._nodePointerEnter) {\n          _this._nodePointerEnter(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerEnter = delegateCombine(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerLeave\", {\n    /**\n     * Fired when the pointer leaved a node.\n    */\n    get: function () {\n      return this._nodePointerLeave;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerLeave_wrapped !== null) {\n        this.i.nodePointerLeave = delegateRemove(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n        this._nodePointerLeave_wrapped = null;\n        this._nodePointerLeave = null;\n      }\n\n      this._nodePointerLeave = ev;\n\n      this._nodePointerLeave_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerLeave) {\n          _this.beforeNodePointerLeave(_this, outerArgs);\n        }\n\n        if (_this._nodePointerLeave) {\n          _this._nodePointerLeave(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerLeave = delegateCombine(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerPressed\", {\n    /**\n     * Fired when the pointer is pressed on a node.\n    */\n    get: function () {\n      return this._nodePointerPressed;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerPressed_wrapped !== null) {\n        this.i.nodePointerPressed = delegateRemove(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n        this._nodePointerPressed_wrapped = null;\n        this._nodePointerPressed = null;\n      }\n\n      this._nodePointerPressed = ev;\n\n      this._nodePointerPressed_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerPressed) {\n          _this.beforeNodePointerPressed(_this, outerArgs);\n        }\n\n        if (_this._nodePointerPressed) {\n          _this._nodePointerPressed(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerPressed = delegateCombine(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerReleased\", {\n    /**\n     * Fired when the pointer is released on a node.\n    */\n    get: function () {\n      return this._nodePointerReleased;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerReleased_wrapped !== null) {\n        this.i.nodePointerReleased = delegateRemove(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n        this._nodePointerReleased_wrapped = null;\n        this._nodePointerReleased = null;\n      }\n\n      this._nodePointerReleased = ev;\n\n      this._nodePointerReleased_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerReleased) {\n          _this.beforeNodePointerReleased(_this, outerArgs);\n        }\n\n        if (_this._nodePointerReleased) {\n          _this._nodePointerReleased(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerReleased = delegateCombine(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrTreemap;\n}(React.Component);\n\nexport { IgrTreemap };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-treemap.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Treemap } from \"./Treemap\";\nimport { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps, fromBrushCollection, toBrushCollection } from \"igniteui-react-core\";\nimport { FontInfo } from \"igniteui-react-core\";\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { TreemapNodeStyleMapping } from './TreemapNodeStyleMapping';\nimport { IgrTreemapNodeStyleMappingCollection } from './igr-treemap-node-style-mapping-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { CollectionAdapter } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { TreemapFillScaleMode_$type } from \"./TreemapFillScaleMode\";\nimport { IgrTreemapNodeStylingEventArgs } from \"./igr-treemap-node-styling-event-args\";\nimport { TreemapOrientation_$type } from './TreemapOrientation';\nimport { TreemapLayoutType_$type } from './TreemapLayoutType';\nimport { IgrTreemapNodePointerEventArgs } from './igr-treemap-node-pointer-event-args';\nvar IgrTreemap = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrTreemap, _super);\n    function IgrTreemap(props) {\n        var _this = _super.call(this, props) || this;\n        _this._wrapper = null;\n        _this.contentStyleMappings = [];\n        /**\n        * The style mappings actually present in the treemap. Do not directly modify this array.\n        * This array's contents can be modified by causing React to reproject the child content.\n        * Or adding and removing ranges from the manual ranges collection on the ranges property.\n        */\n        _this.actualStyleMappings = [];\n        _this._styleMappings = null;\n        _this._styleMappingsAdapter = null;\n        _this._implementation = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._nodeStyling = null;\n        _this._nodeStyling_wrapped = null;\n        _this._nodePointerOver = null;\n        _this._nodePointerOver_wrapped = null;\n        _this._nodePointerEnter = null;\n        _this._nodePointerEnter_wrapped = null;\n        _this._nodePointerLeave = null;\n        _this._nodePointerLeave_wrapped = null;\n        _this._nodePointerPressed = null;\n        _this._nodePointerPressed_wrapped = null;\n        _this._nodePointerReleased = null;\n        _this._nodePointerReleased_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        _this._implementation = _this.createImplementation();\n        if (document) {\n            _this._container = document.createElement(\"div\");\n            _this._container.style.display = \"block\";\n            _this._container.style.width = \"100%\";\n            _this._container.style.height = \"100%\";\n        }\n        var root;\n        root = _this._container;\n        if (_this._container != null) {\n            root = _this._container;\n        }\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this._wrapper = ren;\n        var treemap = _this.i;\n        _this._treeMap = treemap;\n        _this._styleMappingsAdapter = new CollectionAdapter(_this.contentStyleMappings, _this.i.styleMappings, _this.actualStyleMappings, function (c) { return c.i; }, function (i) {\n            if (_this._container && _this._container.parentElement) {\n                i._styling(_this._container, _this, _this);\n            }\n        }, function (i) { });\n        treemap.provideContainer(ren);\n        treemap.notifySizeChanged();\n        if (props) {\n            _this.initializeProperties();\n        }\n        ren.addSizeWatcher(function () {\n            _this._treeMap.notifySizeChanged();\n        });\n        return _this;\n    }\n    Object.defineProperty(IgrTreemap.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._treeMap.notifySizeChanged();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._treeMap.notifySizeChanged();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTreemap.prototype._getMainRef = function (ref) {\n        this._elRef = ref;\n    };\n    IgrTreemap.prototype._updateContentChildren = function () {\n        this.contentStyleMappings.length = 0;\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((TreemapNodeStyleMapping.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentStyleMappings.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._styleMappingsAdapter !== null) {\n            this._styleMappingsAdapter.notifyContentChanged();\n        }\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"styleMappings\", {\n        /**\n         * A collection of manually added style mappings for the treemap.\n        */\n        get: function () {\n            var _this = this;\n            if (this._styleMappings === null) {\n                var coll = new IgrTreemapNodeStyleMappingCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._styleMappingsAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._styleMappings = coll;\n            }\n            return this._styleMappings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTreemap.prototype.render = function () {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        var div = React.createElement(\"div\", {\n            className: \"ig-treemap igr-treemap\",\n            ref: this._getMainRef,\n            children: children\n        });\n        //}\n        return div;\n    };\n    IgrTreemap.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_1, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        return true;\n    };\n    IgrTreemap.prototype.initializeProperties = function () {\n        var e_2, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n    };\n    // supports angular themes or custom properties set in CSS\n    IgrTreemap.prototype.updateStyle = function () {\n        this._styling(this._elRef, this);\n    };\n    IgrTreemap.prototype.componentWillUnmount = function () {\n        this._treeMap.destroy();\n        this._wrapper.destroy();\n    };\n    IgrTreemap.prototype.componentDidMount = function () {\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container);\n        this._treeMap.notifySizeChanged();\n        this.initializeContent();\n    };\n    IgrTreemap.prototype.initializeContent = function () {\n        this._styling(this._container, this);\n        if (this.actualStyleMappings && this.actualStyleMappings.length > 0) {\n            var currStyleMapping = this.actualStyleMappings;\n            for (var i = 0; i < currStyleMapping.length; i++) {\n                currStyleMapping[i]._styling(this._container, this, this);\n            }\n        }\n        this._updateContentChildren();\n        this.updateStyle();\n        this.i.notifySizeChanged();\n    };\n    IgrTreemap.prototype.createImplementation = function () {\n        return new Treemap();\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"valueMemberPath\", {\n        /**\n     * Gets or sets path to use to get the values from the items.\n    */\n        get: function () {\n            return this.i.d7;\n        },\n        set: function (v) {\n            this.i.d7 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"rootTitle\", {\n        /**\n         * Gets or sets the root title to use for breadcrumbs.\n        */\n        get: function () {\n            return this.i.dx;\n        },\n        set: function (v) {\n            this.i.dx = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"breadcrumbSequence\", {\n        /**\n         * Gets or sets the root title to use for breadcrumbs.\n        */\n        get: function () {\n            return this.i.ct;\n        },\n        set: function (v) {\n            this.i.ct = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentIdMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the Parent of the items.\n        */\n        get: function () {\n            return this.i.du;\n        },\n        set: function (v) {\n            this.i.du = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the Label of the items.\n        */\n        get: function () {\n            return this.i.dm;\n        },\n        set: function (v) {\n            this.i.dm = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"customValueMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the custom value of the items.\n        */\n        get: function () {\n            return this.i.cw;\n        },\n        set: function (v) {\n            this.i.cw = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"idMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the id of the items.\n        */\n        get: function () {\n            return this.i.dh;\n        },\n        set: function (v) {\n            this.i.dh = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"dataSource\", {\n        /**\n         * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.\n        */\n        get: function () {\n            return this.i.dataSource;\n        },\n        set: function (v) {\n            this.i.dataSource = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillBrushes\", {\n        /**\n         * Gets or sets brushes to use for the fill scale.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.b);\n        },\n        set: function (v) {\n            this.i.b = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleMode\", {\n        /**\n         * Gets or sets mode to use for the fill scale.\n        */\n        get: function () {\n            return this.i.d;\n        },\n        set: function (v) {\n            this.i.d = ensureEnum(TreemapFillScaleMode_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"isFillScaleLogarithmic\", {\n        /**\n         * Gets or sets whether the fill scale is logarithmic.\n        */\n        get: function () {\n            return this.i.a6;\n        },\n        set: function (v) {\n            this.i.a6 = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleLogarithmBase\", {\n        /**\n         * Gets or sets the logarithm base to use if the fill scale is logarithmic.\n        */\n        get: function () {\n            return this.i.ci;\n        },\n        set: function (v) {\n            this.i.ci = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleMinimumValue\", {\n        /**\n         * Gets or sets the minimum value to use for the fill scale.\n        */\n        get: function () {\n            return this.i.bz;\n        },\n        set: function (v) {\n            this.i.bz = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleMaximumValue\", {\n        /**\n         * Gets or sets the maximum value to use for the fill scale.\n        */\n        get: function () {\n            return this.i.by;\n        },\n        set: function (v) {\n            this.i.by = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHoverBackground\", {\n        /**\n         * Gets or sets the background to use for the header when it is hovered.\n        */\n        get: function () {\n            return brushToString(this.i.fm);\n        },\n        set: function (v) {\n            this.i.fm = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerBackground\", {\n        /**\n         * Gets or sets the background to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.fl);\n        },\n        set: function (v) {\n            this.i.fl = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerTextColor\", {\n        /**\n         * Gets or sets the text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.fo);\n        },\n        set: function (v) {\n            this.i.fo = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"textColor\", {\n        /**\n         * Gets or sets the text color to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.fq);\n        },\n        set: function (v) {\n            this.i.fq = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHoverTextColor\", {\n        /**\n         * Gets or sets the text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.fn);\n        },\n        set: function (v) {\n            this.i.fn = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"textStyle\", {\n        /**\n         * Gets or sets the font to use for content nodes\n        */\n        get: function () {\n            if (this.i.an == null) {\n                return null;\n            }\n            return this.i.an.fontString;\n        },\n        set: function (v) {\n            var fi = new FontInfo();\n            fi.fontString = v;\n            this.i.an = fi;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerTextStyle\", {\n        /**\n         * Gets or sets the font to use for header nodes\n        */\n        get: function () {\n            if (this.i.am == null) {\n                return null;\n            }\n            return this.i.am.fontString;\n        },\n        set: function (v) {\n            var fi = new FontInfo();\n            fi.fontString = v;\n            this.i.am = fi;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the header.\n        */\n        get: function () {\n            return this.i.b8;\n        },\n        set: function (v) {\n            this.i.b8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the header.\n        */\n        get: function () {\n            return this.i.ca;\n        },\n        set: function (v) {\n            this.i.ca = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the header.\n        */\n        get: function () {\n            return this.i.b9;\n        },\n        set: function (v) {\n            this.i.b9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the header.\n        */\n        get: function () {\n            return this.i.b7;\n        },\n        set: function (v) {\n            this.i.b7 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHeight\", {\n        /**\n         * Gets or sets the height to use for the header.\n        */\n        get: function () {\n            return this.i.b6;\n        },\n        set: function (v) {\n            this.i.b6 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"outline\", {\n        /**\n         * Gets or sets the outline to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.fp);\n        },\n        set: function (v) {\n            this.i.fp = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"strokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use for the node outline.\n        */\n        get: function () {\n            return this.i.cd;\n        },\n        set: function (v) {\n            this.i.cd = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"layoutOrientation\", {\n        /**\n         * Gets or sets the orientation to use for the stripped and slice and dice layout types.\n        */\n        get: function () {\n            return this.i.z;\n        },\n        set: function (v) {\n            this.i.z = ensureEnum(TreemapOrientation_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"layoutType\", {\n        /**\n         * Gets or sets the type of layout to use for the nodes.\n        */\n        get: function () {\n            return this.i.j;\n        },\n        set: function (v) {\n            this.i.j = ensureEnum(TreemapLayoutType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"minimumDisplaySize\", {\n        /**\n         * Gets or sets the minimum size (width or height) to display a node.\n        */\n        get: function () {\n            return this.i.cb;\n        },\n        set: function (v) {\n            this.i.cb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"transitionDuration\", {\n        /**\n         * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\n        */\n        get: function () {\n            return this.i.ck;\n        },\n        set: function (v) {\n            this.i.ck = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.cc;\n        },\n        set: function (v) {\n            this.i.cc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"actualPixelScalingRatio\", {\n        get: function () {\n            return this.i.bw;\n        },\n        set: function (v) {\n            this.i.bw = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"animating\", {\n        get: function () {\n            return this.i.a2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTreemap.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrTreemap.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"Treemap\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Returns visuals as a serialized string.\n\r\n*/\n    IgrTreemap.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.cy();\n        return (iv);\n    };\n    IgrTreemap.prototype.markDirty = function () {\n        this.i.ei();\n    };\n    IgrTreemap.prototype.onDetachedFromUI = function () {\n        this.i.onDetachedFromUI();\n    };\n    IgrTreemap.prototype.onAttachedToUI = function () {\n        this.i.onAttachedToUI();\n    };\n    IgrTreemap.prototype.flush = function () {\n        this.i.eg();\n    };\n    IgrTreemap.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.em(source_, index, oldItem, newItem);\n    };\n    /**\n     * Manually notifies the treemap's data source that the data it has bound to has been cleared and needs to be re-examined.\n     * This should not be called if the data that the pie chart is bound to is already observable.\n    \r\n    * @param source_  * The data source.\n    */\n    IgrTreemap.prototype.notifyClearItems = function (source_) {\n        this.i.ej(source_);\n    };\n    IgrTreemap.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.ek(source_, index, newItem);\n    };\n    IgrTreemap.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.el(source_, index, oldItem);\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"nodeStyling\", {\n        /**\n         * Fired when a node is being styled. Provides an opportunity to customize node styling.\n        */\n        get: function () {\n            return this._nodeStyling;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodeStyling_wrapped !== null) {\n                this.i.nodeStyling = delegateRemove(this.i.nodeStyling, this._nodeStyling_wrapped);\n                this._nodeStyling_wrapped = null;\n                this._nodeStyling = null;\n            }\n            this._nodeStyling = ev;\n            this._nodeStyling_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodeStylingEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodeStyling) {\n                    _this.beforeNodeStyling(_this, outerArgs);\n                }\n                if (_this._nodeStyling) {\n                    _this._nodeStyling(_this, outerArgs);\n                }\n            };\n            this.i.nodeStyling = delegateCombine(this.i.nodeStyling, this._nodeStyling_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerOver\", {\n        /**\n         * Fired with the pointer is moving over a node.\n        */\n        get: function () {\n            return this._nodePointerOver;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerOver_wrapped !== null) {\n                this.i.nodePointerOver = delegateRemove(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n                this._nodePointerOver_wrapped = null;\n                this._nodePointerOver = null;\n            }\n            this._nodePointerOver = ev;\n            this._nodePointerOver_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerOver) {\n                    _this.beforeNodePointerOver(_this, outerArgs);\n                }\n                if (_this._nodePointerOver) {\n                    _this._nodePointerOver(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerOver = delegateCombine(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerEnter\", {\n        /**\n         * Fired when the pointer enters a node.\n        */\n        get: function () {\n            return this._nodePointerEnter;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerEnter_wrapped !== null) {\n                this.i.nodePointerEnter = delegateRemove(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n                this._nodePointerEnter_wrapped = null;\n                this._nodePointerEnter = null;\n            }\n            this._nodePointerEnter = ev;\n            this._nodePointerEnter_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerEnter) {\n                    _this.beforeNodePointerEnter(_this, outerArgs);\n                }\n                if (_this._nodePointerEnter) {\n                    _this._nodePointerEnter(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerEnter = delegateCombine(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerLeave\", {\n        /**\n         * Fired when the pointer leaved a node.\n        */\n        get: function () {\n            return this._nodePointerLeave;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerLeave_wrapped !== null) {\n                this.i.nodePointerLeave = delegateRemove(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n                this._nodePointerLeave_wrapped = null;\n                this._nodePointerLeave = null;\n            }\n            this._nodePointerLeave = ev;\n            this._nodePointerLeave_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerLeave) {\n                    _this.beforeNodePointerLeave(_this, outerArgs);\n                }\n                if (_this._nodePointerLeave) {\n                    _this._nodePointerLeave(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerLeave = delegateCombine(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerPressed\", {\n        /**\n         * Fired when the pointer is pressed on a node.\n        */\n        get: function () {\n            return this._nodePointerPressed;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerPressed_wrapped !== null) {\n                this.i.nodePointerPressed = delegateRemove(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n                this._nodePointerPressed_wrapped = null;\n                this._nodePointerPressed = null;\n            }\n            this._nodePointerPressed = ev;\n            this._nodePointerPressed_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerPressed) {\n                    _this.beforeNodePointerPressed(_this, outerArgs);\n                }\n                if (_this._nodePointerPressed) {\n                    _this._nodePointerPressed(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerPressed = delegateCombine(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerReleased\", {\n        /**\n         * Fired when the pointer is released on a node.\n        */\n        get: function () {\n            return this._nodePointerReleased;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerReleased_wrapped !== null) {\n                this.i.nodePointerReleased = delegateRemove(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n                this._nodePointerReleased_wrapped = null;\n                this._nodePointerReleased = null;\n            }\n            this._nodePointerReleased = ev;\n            this._nodePointerReleased_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerReleased) {\n                    _this.beforeNodePointerReleased(_this, outerArgs);\n                }\n                if (_this._nodePointerReleased) {\n                    _this._nodePointerReleased(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerReleased = delegateCombine(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrTreemap;\n}(React.Component));\nexport { IgrTreemap };\n//# sourceMappingURL=igr-treemap.js.map\n"]},"metadata":{},"sourceType":"module"}