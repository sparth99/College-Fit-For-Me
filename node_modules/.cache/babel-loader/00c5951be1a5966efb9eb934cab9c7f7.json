{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { FinancialChart } from './FinancialChart';\nimport { FinancialChartType_$type } from './FinancialChartType';\nimport { fromBrushCollection, toBrushCollection, brushToString, stringToBrush, ensureEnum, ensureBool } from \"igniteui-react-core\";\nimport { IgrXYChart } from './igr-xy-chart';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { DataSeriesType } from \"igniteui-react-core\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { FinancialChartVolumeType_$type } from './FinancialChartVolumeType';\nimport { FinancialChartXAxisMode, FinancialChartXAxisMode_$type } from './FinancialChartXAxisMode';\nimport { FinancialChartYAxisMode, FinancialChartYAxisMode_$type } from './FinancialChartYAxisMode';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { AxisLabelsLocation_$type } from './AxisLabelsLocation';\nimport { FinancialChartZoomSliderType_$type } from './FinancialChartZoomSliderType';\nimport { IgrFinancialChartDefaultTemplates } from './igr-financial-chart-default-templates';\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrFinancialIndicatorTypeCollection } from './igr-financial-indicator-type-collection';\nimport { FinancialIndicatorTypeCollection as FinancialIndicatorTypeCollection_internal } from './FinancialIndicatorTypeCollection';\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { FinancialIndicatorType_$type } from './FinancialIndicatorType';\nimport { IgrFinancialOverlayTypeCollection } from './igr-financial-overlay-type-collection';\nimport { FinancialOverlayTypeCollection as FinancialOverlayTypeCollection_internal } from './FinancialOverlayTypeCollection';\nimport { FinancialOverlayType_$type } from './FinancialOverlayType';\nimport { IgrIndicatorDisplayTypeCollection } from './igr-indicator-display-type-collection';\nimport { IndicatorDisplayTypeCollection as IndicatorDisplayTypeCollection_internal } from './IndicatorDisplayTypeCollection';\nimport { IndicatorDisplayType_$type } from './IndicatorDisplayType';\nimport { IgrFinancialChartRangeSelectorOptionCollection } from './igr-financial-chart-range-selector-option-collection';\nimport { FinancialChartRangeSelectorOptionCollection as FinancialChartRangeSelectorOptionCollection_internal } from './FinancialChartRangeSelectorOptionCollection';\nimport { FinancialChartRangeSelectorOption_$type } from './FinancialChartRangeSelectorOption';\nimport { IgrFinancialChartCustomIndicatorArgs } from './igr-financial-chart-custom-indicator-args';\nimport { CustomIndicatorNameCollection as CustomIndicatorNameCollection_internal } from './CustomIndicatorNameCollection';\nimport { IgrCustomIndicatorNameCollection } from './igr-custom-indicator-name-collection';\nimport { String_$type } from \"igniteui-react-core\";\nimport { IgrTemplateContainer } from \"igniteui-react-core\";\nvar fg = window && window.CSS && window.CSS.supports &&\n/*@__PURE__*/\nwindow.CSS.supports(\"display\", \"grid\");\nvar financialChartToolbarStyle = {\n  gridRow: 1,\n  msGridRow: 1\n};\nvar financialChartPriceStyle = {\n  gridRow: 3,\n  msGridRow: 3\n};\nvar financialChartIndicatorsStyle = {\n  gridRow: 4,\n  msGridRow: 4\n};\nvar financialChartVolumeStyle = {\n  gridRow: 5,\n  msGridRow: 5\n};\nvar financialChartZoomSliderStyle = {\n  gridRow: 6,\n  msGridRow: 6\n};\nvar financialChartMainGridStyle = {\n  height: '100%',\n  width: '100%',\n  textAlign: 'left',\n  display: fg ? 'grid' : '-ms-grid',\n  msGridColumns: '100%'\n};\nvar financialChartLegendStyle = {\n  gridRow: 2,\n  msGridRow: 2\n};\n\nvar IgrFinancialChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrFinancialChart, _super);\n\n  function IgrFinancialChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._wrapper = null;\n    _this._initialized = false;\n    _this._toolbarElement = null;\n    _this._dataSource = null;\n    _this._defaultTooltips = null;\n    _this._dynamicContent = {};\n    _this._uniqueTooltipId = 0;\n    _this._xAxisBreaks = null;\n    _this._indicatorTypes = null;\n    _this._overlayTypes = null;\n    _this._indicatorDisplayTypes = null;\n    _this._rangeSelectorOptions = null;\n    _this._customIndicatorNames = null;\n    _this._applyCustomIndicators = null;\n    _this._applyCustomIndicators_wrapped = null;\n    _this._toolTemplateRef = _this._toolTemplateRef.bind(_this);\n    _this._tooltipRef = _this._tooltipRef.bind(_this);\n    _this._mainGridRef = _this._mainGridRef.bind(_this);\n    _this._mainRef = _this._mainRef.bind(_this);\n    _this._toolbarRef = _this._toolbarRef.bind(_this);\n    _this._activeTooltipElements = new Map();\n    _this._activeTooltips = new Map();\n    _this._currentTooltips = [];\n    _this.onDocumentClick = _this.onDocumentClick.bind(_this);\n\n    if (document) {\n      _this._container = document.createElement(\"div\");\n      _this._container.style.display = \"block\";\n      _this._container.style.width = \"100%\";\n      _this._container.style.height = \"100%\";\n      document.addEventListener(\"click\", _this.onDocumentClick);\n    }\n\n    var root;\n    root = _this._container;\n\n    if (_this._container != null) {\n      root = _this._container;\n    }\n\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this._wrapper = ren;\n    var chart = _this.i;\n    _this._chart = chart;\n\n    if (chart.xAxis) {\n      _this.rewrapAxis(chart.xAxis);\n    }\n\n    if (chart.yAxis) {\n      _this.rewrapAxis(chart.yAxis);\n    }\n\n    if (chart.volumeAxis) {\n      _this.rewrapAxis(chart.volumeAxis);\n    }\n\n    if (chart.volumeXAxis) {\n      _this.rewrapAxis(chart.volumeXAxis);\n    }\n\n    if (chart.indicatorAxis) {\n      _this.rewrapAxis(chart.indicatorAxis);\n    }\n\n    if (chart.indicatorXAxis) {\n      _this.rewrapAxis(chart.indicatorXAxis);\n    }\n\n    if (chart.zoomSliderAxis) {\n      _this.rewrapAxis(chart.zoomSliderAxis);\n    }\n\n    if (chart.zoomSliderXAxis) {\n      _this.rewrapAxis(chart.zoomSliderXAxis);\n    }\n\n    chart.provideContainer(ren);\n\n    _this.bindData();\n\n    chart.notifyResized();\n    ren.addSizeWatcher(function () {\n      _this._checkToolbarSize();\n\n      _this._chart.notifyResized();\n    });\n    _this._initialized = true;\n    return _this;\n  }\n\n  IgrFinancialChart.prototype.render = function () {\n    var outerChildren = [];\n    var children = [React.createElement('div', {\n      key: 'financialChartToolbarArea',\n      className: 'financialChartToolbarArea',\n      style: financialChartToolbarStyle,\n      ref: this._toolbarRef\n    }, React.createElement(IgrTemplateContainer, {\n      ref: this._toolTemplateRef\n    })), React.createElement('div', {\n      key: 'financialChartLegend',\n      className: 'financialChartLegend',\n      style: financialChartLegendStyle\n    }), React.createElement('div', {\n      key: 'financialChartPrice',\n      className: 'financialChartPrice',\n      style: financialChartPriceStyle\n    }), React.createElement('div', {\n      key: 'financialChartIndicators',\n      className: 'financialChartIndicators',\n      style: financialChartIndicatorsStyle\n    }), React.createElement('div', {\n      key: 'financialChartVolume',\n      className: 'financialChartVolume',\n      style: financialChartVolumeStyle\n    }), React.createElement('div', {\n      key: 'financialChartZoomSlider',\n      className: 'financialChartZoomSlider',\n      style: financialChartZoomSliderStyle\n    })];\n\n    if (this._sliderPortal) {\n      children.push(this._sliderPortal);\n    }\n\n    if (this._currentTooltips && this._currentTooltips.length > 0) {\n      for (var i = 0; i < this._currentTooltips.length; i++) {\n        var t = this._currentTooltips[i];\n\n        if (this._activeTooltipElements.has(t)) {\n          var active = this._activeTooltipElements.get(t);\n\n          outerChildren.push(active);\n        } else {\n          if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n            continue;\n          }\n\n          var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n          var tEle = React.createElement(Tooltip, {\n            ref: this._tooltipRef,\n            key: this._currentTooltips[i].key,\n            owner: this._currentTooltips[i]\n          });\n          var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n\n          this._activeTooltipElements.set(t, portal);\n\n          outerChildren.push(portal);\n        }\n      }\n    }\n\n    var mainGrid = React.createElement('div', {\n      key: 'financialChartMainGrid',\n      className: 'financialChartMainGrid',\n      style: financialChartMainGridStyle,\n      children: children,\n      ref: this._mainGridRef\n    });\n    outerChildren.splice(0, 0, mainGrid);\n    var mainDiv = React.createElement('div', {\n      className: \"ig-financial-chart igr-financial-chart\",\n      key: \"financialChartMainDiv\",\n      children: outerChildren,\n      ref: this._mainRef\n    });\n    return mainDiv;\n  };\n\n  IgrFinancialChart.prototype._tooltipRef = function (t) {\n    console.log(t);\n\n    if (t === null) {\n      return;\n    }\n\n    if (t.currentOwner && t.currentOwner.tooltipTemplate) {\n      t.template = t.currentOwner.tooltipTemplate;\n    }\n\n    this._activeTooltips.set(t.currentOwner, t);\n  };\n\n  IgrFinancialChart.prototype._toolbarRef = function (t) {\n    this._toolbarElement = t;\n  };\n\n  IgrFinancialChart.prototype._toolTemplateRef = function (t) {\n    this._toolbarTemplateComponent = t;\n  };\n\n  IgrFinancialChart.prototype._mainGridRef = function (t) {\n    this._mainGridElement = t;\n  };\n\n  IgrFinancialChart.prototype._mainRef = function (t) {\n    this._mainElement = t;\n    this._container = t;\n\n    if (!t) {\n      return;\n    }\n\n    this._wrapper.updateRoot(this._wrapper.getWrapper(this._container));\n  };\n\n  Object.defineProperty(IgrFinancialChart.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._mainElement) {\n        this._mainElement.style.height = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._mainElement) {\n        this._mainElement.style.height = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"rangeSelectorTemplate\", {\n    get: function () {\n      return this._rangeSelectorTemplate;\n    },\n    set: function (value) {\n      this._rangeSelectorTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"chartTypePickerTemplate\", {\n    get: function () {\n      return this._chartTypePickerTemplate;\n    },\n    set: function (value) {\n      this._chartTypePickerTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorMenuTemplate\", {\n    get: function () {\n      return this._indicatorMenuTemplate;\n    },\n    set: function (value) {\n      this._indicatorMenuTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"toolbarTemplate\", {\n    get: function () {\n      return this._toolbarTemplate;\n    },\n    set: function (value) {\n      this._toolbarTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"chartTemplate\", {\n    get: function () {\n      return this._chartTemplate;\n    },\n    set: function (value) {\n      this._chartTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrFinancialChart.prototype._checkToolbarSize = function () {\n    if (this._toolbarElement) {\n      var start = this._toolbarElement;\n\n      if (start.children.length == 1) {\n        start = start.children[0];\n      }\n\n      if (start.children.length == 1) {\n        start = start.children[0];\n      }\n\n      var toolbarRoot = start.querySelector(\".financialChartToolbar\");\n      var rootRect = toolbarRoot.getBoundingClientRect();\n      var hideRemaining = false;\n\n      for (var i = 0; i < toolbarRoot.children.length; i++) {\n        var child = toolbarRoot.children[i];\n\n        if (child.nodeType == Node.ELEMENT_NODE) {\n          if (!hideRemaining) {\n            child.style.display = \"\";\n          }\n\n          var childRect = child.getBoundingClientRect();\n\n          if (hideRemaining || childRect.left + childRect.width > rootRect.left + rootRect.width) {\n            child.style.display = \"none\";\n            hideRemaining = true;\n          } else {\n            child.style.display = \"\";\n          }\n        }\n      }\n    }\n  };\n\n  IgrFinancialChart.prototype.componentWillUnmount = function () {\n    this._chart.destroy();\n\n    this._wrapper.destroy();\n\n    if (document) {\n      document.removeEventListener(\"click\", this.onDocumentClick);\n    }\n  };\n\n  IgrFinancialChart.prototype.onDocumentClick = function (ev) {\n    this._chart.onDocumentClick(ev);\n  };\n\n  IgrFinancialChart.prototype.rewrapAxis = function (axis) {\n    var axisName = axis.$type.name;\n    var componentName = \"Igr\" + axisName;\n\n    if (TypeRegistrar.isRegistered(componentName)) {\n      var x = TypeRegistrar.create(componentName);\n      x._implementation = axis;\n      axis.externalObject = x;\n    } else {\n      throw new Error(\"Axis type not loaded: \" + componentName);\n    }\n  };\n\n  IgrFinancialChart.prototype.createImplementation = function () {\n    return new FinancialChart();\n  };\n\n  Object.defineProperty(IgrFinancialChart.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrFinancialChart.prototype.createSeriesComponent = function (type) {\n    if (TypeRegistrar.isRegistered(type)) {\n      var s = TypeRegistrar.create(type);\n      s.owner = this;\n      return s;\n    } else {\n      //we shouldn't get here, hopefully.\n      throw Error(\"series type not loaded: \" + type);\n    }\n  };\n\n  IgrFinancialChart.prototype.createIndicator = function (typeName) {\n    return this.createSeriesComponent(\"Igr\" + typeName);\n  };\n\n  IgrFinancialChart.prototype.createOverlay = function (typeName) {\n    return this.createSeriesComponent(\"Igr\" + typeName);\n  };\n\n  IgrFinancialChart.prototype.createSeries = function (type) {\n    switch (type) {\n      case DataSeriesType.Area:\n        return this.createSeriesComponent('IgrAreaSeries');\n\n      case DataSeriesType.Column:\n        return this.createSeriesComponent('IgrColumnSeries');\n\n      case DataSeriesType.Line:\n        return this.createSeriesComponent('IgrLineSeries');\n\n      case DataSeriesType.FinancialPrice:\n        return this.createSeriesComponent('IgrFinancialPriceSeries');\n\n      case DataSeriesType.ItemToolTipLayer:\n        return this.createSeriesComponent('IgrItemToolTipLayer');\n\n      case DataSeriesType.CategoryToolTipLayer:\n        return this.createSeriesComponent('IgrCategoryToolTipLayer');\n\n      case DataSeriesType.CrosshairLayer:\n        return this.createSeriesComponent('IgrCrosshairLayer');\n\n      case DataSeriesType.FinalValueLayer:\n        return this.createSeriesComponent('IgrFinalValueLayer');\n\n      case DataSeriesType.CalloutLayer:\n        return this.createSeriesComponent('IgrCalloutLayer');\n\n      default:\n        return this.createSeriesComponent('IgrColumnSeries');\n    }\n  };\n\n  IgrFinancialChart.prototype.createXAxis = function (type) {\n    switch (type) {\n      case FinancialChartXAxisMode.Ordinal:\n        if (TypeRegistrar.isRegistered(\"IgrOrdinalTimeXAxis\")) {\n          return TypeRegistrar.create(\"IgrOrdinalTimeXAxis\");\n        } else if (TypeRegistrar.isRegistered(\"IgrTimeXAxis\")) {\n          return TypeRegistrar.create(\"IgrTimeXAxis\");\n        } else {\n          throw new Error(\"not valid axes components loaded\");\n        }\n\n      case FinancialChartXAxisMode.Time:\n        if (TypeRegistrar.isRegistered(\"IgrTimeXAxis\")) {\n          return TypeRegistrar.create(\"IgrTimeXAxis\");\n        } else if (TypeRegistrar.isRegistered(\"IgrOrdinalTimeXAxis\")) {\n          return TypeRegistrar.create(\"IgrOrdinalTimeXAxis\");\n        } else {\n          throw new Error(\"not valid axes components loaded\");\n        }\n\n    }\n  };\n\n  IgrFinancialChart.prototype.createYAxis = function (type) {\n    switch (type) {\n      case FinancialChartYAxisMode.Numeric:\n        if (TypeRegistrar.isRegistered(\"IgrNumericYAxis\")) {\n          return TypeRegistrar.create(\"IgrNumericYAxis\");\n        } else if (TypeRegistrar.isRegistered(\"IgrPercentChangeYAxis\")) {\n          return TypeRegistrar.create(\"IgrPercentChangeYAxis\");\n        } else {\n          throw new Error(\"not valid axes components loaded\");\n        }\n\n      case FinancialChartYAxisMode.PercentChange:\n        if (TypeRegistrar.isRegistered(\"IgrPercentChangeYAxis\")) {\n          return TypeRegistrar.create(\"IgrPercentChangeYAxis\");\n        } else if (TypeRegistrar.isRegistered(\"IgrNumericYAxis\")) {\n          return TypeRegistrar.create(\"IgrNumericYAxis\");\n        } else {\n          throw new Error(\"not valid axes components loaded\");\n        }\n\n    }\n  };\n\n  Object.defineProperty(IgrFinancialChart.prototype, \"dataSource\", {\n    get: function () {\n      return this._dataSource;\n    },\n    set: function (value) {\n      this._dataSource = value;\n      this.bindData();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrFinancialChart.prototype.bindData = function () {\n    if (this._chart != null && this._chart !== undefined) {\n      this._chart.itemsSource = this._dataSource;\n    }\n  };\n\n  IgrFinancialChart.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    if (this._mainElement) {\n      if (this._width) {\n        this._mainElement.style.width = this._width;\n      }\n\n      if (this._height) {\n        this._mainElement.style.height = this._height;\n      }\n    }\n\n    this.initializeContent();\n\n    this._chart.notifyResized();\n  };\n\n  IgrFinancialChart.prototype.initializeContent = function () {\n    var _this = this;\n\n    if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n      var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n      this._defaultTooltips = d;\n\n      this._onDefaultTooltipsReady(d); //this._container.appendChild(cr.location.nativeElement);\n\n    }\n\n    var context = this._chart.getContext();\n\n    if (!this._defaultTemplates) {\n      this._defaultTemplates = new IgrFinancialChartDefaultTemplates();\n    }\n\n    var toolbarArea = this._toolbarTemplateComponent;\n    var toolbarContext = context.vm.toolbar;\n    toolbarContext.vm.financialChartIndicatorMenu.template = this.indicatorMenuTemplate ? this.indicatorMenuTemplate : this._defaultTemplates.financialChartIndicatorMenuTemplate;\n\n    toolbarContext.vm.financialChartIndicatorMenu.vm.notifyChanged = function () {\n      toolbarArea.dataContext = toolbarContext;\n    };\n\n    toolbarContext.vm.financialChartTypePicker.template = this.chartTypePickerTemplate ? this.chartTypePickerTemplate : this._defaultTemplates.financialChartTypePickerTemplate;\n\n    toolbarContext.vm.financialChartTypePicker.vm.notifyChanged = function () {\n      toolbarArea.dataContext = toolbarContext;\n    };\n\n    toolbarContext.vm.financialChartRangeSelector.template = this.rangeSelectorTemplate ? this.rangeSelectorTemplate : this._defaultTemplates.financialChartRangeSelectorTemplate;\n\n    toolbarContext.vm.financialChartRangeSelector.vm.notifyChanged = function () {\n      toolbarArea.dataContext = toolbarContext;\n    };\n\n    toolbarContext.template = this.toolbarTemplate ? this.toolbarTemplate : this._defaultTemplates.financialChartToolbarTemplate;\n    var toolContainer = this._toolbarElement; //let toolbarArea = this._templates.toArray()[0];\n    //let mainArea = this._templates.toArray()[1];\n\n    toolbarArea.contentReady = function () {\n      toolbarArea.contentReady = null;\n\n      _this._chart.provideGrid(gridWrapper);\n\n      _this._checkToolbarSize();\n    };\n\n    toolbarArea.dataContext = toolbarContext;\n    toolbarArea.template = toolbarContext.template;\n    var ele = this._toolbarElement; //ele.style.width = \"100%\";\n    //ele.style.height = \"100%\";\n    //if (ele.parentElement != null) {\n    //    ele.parentElement.removeChild(ele);\n    //}\n    //toolContainer.appendChild(ele);\n    //this._wrapper.setStyleProperty(ele, \"display\", \"\")\n\n    ele.style.display = \"\";\n    var legendContainer = context.legendContainer.rootWrapper.getNativeElement();\n    var mainContainer = context.container.rootWrapper.getNativeElement();\n    var indicatorContainer = context.indicatorsContainer.rootWrapper.getNativeElement();\n    var volumeContainer = context.volumeContainer.rootWrapper.getNativeElement();\n    var zoomSliderContainer = context.zoomContainer.rootWrapper.getNativeElement();\n    var main = this._mainGridElement;\n    var templateMain = main.querySelector(\".financialChartPrice\");\n    var templateToolbar = main.querySelector(\".financialChartToolbar\");\n    var templateLegend = main.querySelector(\".financialChartLegend\");\n    var templateIndicator = main.querySelector(\".financialChartIndicators\");\n    var templateVolume = main.querySelector(\".financialChartVolume\");\n    var templateZoomSlider = main.querySelector(\".financialChartZoomSlider\");\n    var grid = main; // main.querySelector(\".financialChartMainGrid\");\n\n    var gridWrapper = new ReactWrapper(grid, this._wrapper);\n    templateMain.appendChild(mainContainer); //templateToolbar.appendChild(toolContainer);\n\n    templateLegend.appendChild(legendContainer);\n    templateIndicator.appendChild(indicatorContainer);\n    templateVolume.appendChild(volumeContainer);\n    templateZoomSlider.appendChild(zoomSliderContainer);\n\n    this._styling(this._container, this); //this._mainElement.nativeElement.parentElement.removeChild(this._mainElement.nativeElement);\n    //this.container.appendChild(this._mainElement.nativeElement);\n\n  };\n\n  IgrFinancialChart.prototype._createZoomSlider = function (hostEle, onReady) {\n    if (!TypeRegistrar.isRegistered(\"IgrZoomSlider\")) {\n      //shouldn't happen.\n      throw new Error(\"zoom slider component isn't loaded\");\n    }\n\n    var Slider = TypeRegistrar.get(\"IgrZoomSlider\");\n    var ele = React.createElement(Slider, {\n      width: '100%',\n      height: '100%',\n      ref: function (r) {\n        onReady(r);\n      }\n    });\n    var portal = ReactDOM.createPortal(ele, hostEle);\n    hostEle.className = \"test\";\n    hostEle.style.width = \"100%\";\n    hostEle.style.height = \"100%\";\n    this._sliderPortal = portal;\n  };\n\n  IgrFinancialChart.prototype.createTooltip = function () {\n    // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n    // \treturn null;\n    // }\n    // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n    var wrapper = this._wrapper.createElement(\"div\");\n\n    var ele = wrapper.getNativeElement();\n    ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n    this._uniqueTooltipId++;\n    this._currentTooltips = this._currentTooltips.slice(0);\n\n    this._currentTooltips.push(ele); //let element = React.createElement(Tooltip,  );\n    //let portal = ReactDOM.createPortal(element, ele);\n\n\n    var self = this;\n\n    ele.updateToolTip = function (c, isSubContent) {\n      if (c.externalObject) {\n        c = c.externalObject;\n      } else {\n        var ext = new IgrDataContext();\n        ext._implementation = c;\n        c = ext;\n      }\n\n      if (!isSubContent) {\n        if (ele.parentElement != self._container) {\n          if (ele.parentElement != null) {\n            ele.parentElement.removeChild(ele);\n          }\n\n          self._container.appendChild(ele);\n        }\n      } else {\n        c.isSubContent = true;\n      }\n\n      if (self._activeTooltips.has(ele)) {\n        var t = self._activeTooltips.get(ele);\n\n        t.dataContext = c;\n      }\n\n      ele.style.display = \"block\";\n      return true;\n    };\n\n    ele.hideToolTip = function () {\n      ele.style.display = \"none\";\n    };\n\n    ele.style.display = \"none\";\n\n    this._updateTooltipState();\n\n    return ele;\n  };\n\n  IgrFinancialChart.prototype._ensureTooltipCreated = function (series) {\n    var _this = this;\n\n    series._ensureTooltipCreated(function () {\n      return _this.createTooltip();\n    }, function (ele) {\n      var wrapper = new ReactWrapper(ele, _this._wrapper);\n      wrapper.updateToolTip = ele.updateToolTip;\n      wrapper.hideToolTip = ele.hideToolTip;\n\n      if (_this._activeTooltips.has(ele)) {\n        var tCont = _this._activeTooltips.get(ele);\n\n        tCont.template = ele.tooltipTemplate;\n      }\n\n      return wrapper;\n    });\n  }; // private _createXAxis(): any {\n  //     let x = new IgxCategoryXAxisComponent();\n  //     return x.i;\n  // }\n  // private _createYAxis(): any {\n  //     let y = new IgxNumericYAxisComponent();\n  //     return y.i;\n  // }\n\n\n  IgrFinancialChart.prototype._ensureDefaultTooltip = function (series) {\n    if (this._defaultTooltips == null) {\n      return;\n    }\n\n    this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n  };\n\n  IgrFinancialChart.prototype._onDefaultTooltipsReady = function (cr) {\n    if (this.i.dataChart) {\n      var currSeries = this.i.dataChart.series;\n\n      for (var i = 0; i < currSeries.count; i++) {\n        if (currSeries.item(i).externalObject.showDefaultTooltip) {\n          this._ensureDefaultTooltip(currSeries.item(i).externalObject);\n        }\n      }\n    }\n  };\n\n  IgrFinancialChart.prototype._updateTooltipState = function () {\n    if (this._initialized) {\n      this.setState({\n        tooltips: this._currentTooltips\n      });\n    }\n  };\n\n  Object.defineProperty(IgrFinancialChart.prototype, \"xAxisBreaks\", {\n    /**\n     * TimeAxisBreaks to apply to this chart when in time axis mode, representing spans of time to omit, such as weekends.\n    */\n    get: function () {\n      if (this._xAxisBreaks === null) {\n        if (!TypeRegistrar.isRegistered(\"IgrTimeAxisBreakCollection\")) {\n          return null;\n        }\n\n        var coll = TypeRegistrar.create(\"IgrTimeAxisBreakCollection\");\n        var innerColl = this.i.xAxisBreaks;\n\n        if (!innerColl) {\n          innerColl = TypeRegistrar.create(\"TimeAxisBreakCollection\");\n        }\n\n        this._xAxisBreaks = coll._fromInner(innerColl);\n        this.i._xAxisBreaks = innerColl;\n      }\n\n      return this._xAxisBreaks;\n    },\n    set: function (v) {\n      if (this._xAxisBreaks !== null) {\n        this._xAxisBreaks._setSyncTarget(null);\n\n        this._xAxisBreaks = null;\n      }\n\n      if (!TypeRegistrar.isRegistered(\"IgxTimeAxisBreakCollection\")) {\n        return;\n      }\n\n      var coll = TypeRegistrar.create(\"IgxTimeAxisBreakCollection\");\n      var t = TypeRegistrar.get(\"TimeAxisBreak\");\n      this._xAxisBreaks = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(t.$type);\n      var innerColl = this.i.xAxisBreaks;\n\n      if (!innerColl) {\n        innerColl = TypeRegistrar.create(\"TimeAxisBreakCollection\");\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._xAxisBreaks._setSyncTarget(syncColl);\n\n      this.i._xAxisBreaks = innerColl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"leftMargin\", {\n    get: function () {\n      return this.i.cs;\n    },\n    set: function (v) {\n      this.i.cs = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"isHorizontalZoomEnabled\", {\n    get: function () {\n      return this.i.bq;\n    },\n    set: function (v) {\n      this.i.bq = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"toolbarHeight\", {\n    get: function () {\n      return this.i.sj;\n    },\n    set: function (v) {\n      this.i.sj = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisIsLogarithmic\", {\n    /**\n     * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.\n     * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.\n    */\n    get: function () {\n      return this.i.rp;\n    },\n    set: function (v) {\n      this.i.rp = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisLogarithmBase\", {\n    /**\n     * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.\n     * This property is effective only when YAxisIsLogarithmic is true.\n    */\n    get: function () {\n      return this.i.tb;\n    },\n    set: function (v) {\n      this.i.tb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisInterval\", {\n    /**\n     * Gets or sets the distance between each label and grid line along the Y-axis.\n    *\n    * The `yAxisInterval` determines how often to show a label, tickmark, and/or gridline along the y-axis.  Set this property to a number less than the numeric range of the y-axis.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tyAxisInterval={20}\n    *  />\n    * ```\n    */\n    get: function () {\n      return this.i.sn;\n    },\n    set: function (v) {\n      this.i.sn = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMinimumValue\", {\n    /**\n     * Gets or sets the data value corresponding to the minimum value of the Y-axis.\n    *\n    * The `yAxisMinimumValue` determines starting value of labels, tickmarks, and gridlines on the y-axis.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     yAxisMinimumValue={-200}\n    *     yAxisMaximumValue={1000}\n    *     dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.sp;\n    },\n    set: function (v) {\n      this.i.sp = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMaximumValue\", {\n    /**\n     * Gets or sets the data value corresponding to the maximum value of the Y-axis.\n    *\n    * The `yAxisMaximumValue` determines ending value of labels, tickmarks, and gridlines on the y-axis.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *  yAxisMinimumValue={-200}\n    *     yAxisMaximumValue={100}\n    *     dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.so;\n    },\n    set: function (v) {\n      this.i.so = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMinorInterval\", {\n    /**\n     * Gets or sets the frequency of displayed minor lines along the Y-axis.\n    *\n    * The `yAxisMinorInterval` determines how often to show minor gridline along the y-axis.  Set this property to a number less than the `yAxisInterval` and the numeric range of the y-axis.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *      yAxisMinorInterval={50}\n    *     dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.sq;\n    },\n    set: function (v) {\n      this.i.sq = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisActualMinimum\", {\n    /**\n     * Gets the current minimum value for the Y-axis.\n    */\n    get: function () {\n      return this.i.sm;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisActualMaximum\", {\n    /**\n     * Gets the current maximum value for the Y-axis.\n    */\n    get: function () {\n      return this.i.sl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"volumeType\", {\n    /**\n     * The type of series to display in the volume pane.\n    *\n    * Use the `volumeType` property to set a type of all series that will be rendered in the volume pane, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tvolumeType=\"Column\" />\n    * ```\n    */\n    get: function () {\n      return this.i.pt;\n    },\n    set: function (v) {\n      this.i.pt = ensureEnum(FinancialChartVolumeType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"xAxisMode\", {\n    /**\n     * The scaling mode of the X-axis.\n    *\n    * Use the `xAxisMode` property to plot data items without any breaks in data range (Ordinal mode) or with breaks in data range (Time mode) such as weekends/holidays. Note that the Ordinal axis mode is less expensive to use in the financial chart than the Time axis mode.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *      xAxisMode=\"time\"\n    *     dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.pv;\n    },\n    set: function (v) {\n      this.i.pv = ensureEnum(FinancialChartXAxisMode_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMode\", {\n    /**\n     * The scaling mode of the Y-axis.\n    *\n    * Use the `yAxisMode` property to plot data items using their actual values (Numeric) or using percent changes from the first data point (PercentChange), e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *      yAxisMode={this.state.yAxisMode}\n    *     dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.px;\n    },\n    set: function (v) {\n      this.i.px = ensureEnum(FinancialChartYAxisMode_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"isToolbarVisible\", {\n    /**\n     * A boolean property controlling the visibility of the toolbar.\n    */\n    get: function () {\n      return this.i.rk;\n    },\n    set: function (v) {\n      this.i.rk = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"chartType\", {\n    /**\n     * The type of price series to display in the main chart.\n    *\n    * Use the `chartType` property to set a type of series that will be used to render prices in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *   width=\"100%\"\n    *   height=\"400px\"\n    * \tchartType=\"Candle\"\n    *   dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.po;\n    },\n    set: function (v) {\n      this.i.po = ensureEnum(FinancialChartType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisLabelHorizontalAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of Y-axis labels.\n    */\n    get: function () {\n      return this.i.nk;\n    },\n    set: function (v) {\n      this.i.nk = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"isWindowSyncedToVisibleRange\", {\n    /**\n     * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.\n     * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.\n    */\n    get: function () {\n      return this.i.rl;\n    },\n    set: function (v) {\n      this.i.rl = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorTypes\", {\n    /**\n     * A collection indicating what financial indicator types to display on the Financial Chart.\n    *\n    * Use the `indicatorTypes` property to set types of indicators that will be rendered below the price pane in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorTypes=\"ForceIndex\" />\n    * ```\n    */\n    get: function () {\n      if (this._indicatorTypes === null) {\n        var coll = new IgrFinancialIndicatorTypeCollection();\n        var innerColl = this.i.p2;\n\n        if (!innerColl) {\n          innerColl = new FinancialIndicatorTypeCollection_internal(0);\n        }\n\n        this._indicatorTypes = coll._fromInner(innerColl);\n        this.i.p2 = innerColl;\n      }\n\n      return this._indicatorTypes;\n    },\n    set: function (v) {\n      if (this._indicatorTypes !== null) {\n        this._indicatorTypes._setSyncTarget(null);\n\n        this._indicatorTypes = null;\n      }\n\n      var coll = new IgrFinancialIndicatorTypeCollection();\n      this._indicatorTypes = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(FinancialIndicatorType_$type);\n      var innerColl = this.i.p2;\n\n      if (!innerColl) {\n        innerColl = new FinancialIndicatorTypeCollection_internal(0);\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._indicatorTypes._setSyncTarget(syncColl);\n\n      this.i.p2 = innerColl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"overlayTypes\", {\n    /**\n     * A collection indicating what financial overlay types to display on the Financial Chart.\n    *\n    * Use the `overlayTypes` property to set types of overlays that will be rendered behind price series in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \toverlayType =\"PriceChannel\" />\n    * ```\n    */\n    get: function () {\n      if (this._overlayTypes === null) {\n        var coll = new IgrFinancialOverlayTypeCollection();\n        var innerColl = this.i.p4;\n\n        if (!innerColl) {\n          innerColl = new FinancialOverlayTypeCollection_internal(0);\n        }\n\n        this._overlayTypes = coll._fromInner(innerColl);\n        this.i.p4 = innerColl;\n      }\n\n      return this._overlayTypes;\n    },\n    set: function (v) {\n      if (this._overlayTypes !== null) {\n        this._overlayTypes._setSyncTarget(null);\n\n        this._overlayTypes = null;\n      }\n\n      var coll = new IgrFinancialOverlayTypeCollection();\n      this._overlayTypes = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(FinancialOverlayType_$type);\n      var innerColl = this.i.p4;\n\n      if (!innerColl) {\n        innerColl = new FinancialOverlayTypeCollection_internal(0);\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._overlayTypes._setSyncTarget(syncColl);\n\n      this.i.p4 = innerColl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisAbbreviateLargeNumbers\", {\n    /**\n     * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.\n    */\n    get: function () {\n      return this.i.ro;\n    },\n    set: function (v) {\n      this.i.ro = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"resolution\", {\n    /**\n     * Gets or sets the rendering resolution for all series in this chart.\n     * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.\n    */\n    get: function () {\n      return this.i.cu;\n    },\n    set: function (v) {\n      this.i.cu = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"yAxisLabelLocation\", {\n    /**\n     * Gets or sets the location of Y-axis labels, relative to the plot area.\n    */\n    get: function () {\n      return this.i.ih;\n    },\n    set: function (v) {\n      this.i.ih = ensureEnum(AxisLabelsLocation_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"zoomSliderType\", {\n    /**\n     * Gets or sets type of series to display in the zoom slider pane.\n    *\n    * Use the `zoomSliderType` property to set a type of all series that will be rendered in the zoom pane, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     zoomSliderType=\"Candle\"\n    *     dataSource={this.data} />\n    * ```\n    */\n    get: function () {\n      return this.i.p0;\n    },\n    set: function (v) {\n      this.i.p0 = ensureEnum(FinancialChartZoomSliderType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"negativeBrushes\", {\n    /**\n     * Gets or sets the palette used for coloring negative items of Waterfall chart type.\n    *\n    * Use the `negativeBrushes` property to set a collection of brushes that will be used to render fill area of negative elements in the price pane, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tnegativeBrushes=\"Red\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ox);\n    },\n    set: function (v) {\n      this.i.ox = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"negativeOutlines\", {\n    /**\n     * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.\n    *\n    * Use the `negativeOutlines` property to set a collection of brushes that will be used to render outline of negative elements in the price pane, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tnegativeOutlines= \"Green\"/>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.oy);\n    },\n    set: function (v) {\n      this.i.oy = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"overlayBrushes\", {\n    /**\n     * Brushes to use for filling financial overlays.\n    *\n    * Use the `overlayBrushes` property to set a collection of brushes that will be used to render fill area of overlays in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \toverlayBrushes=\"Green\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.oz);\n    },\n    set: function (v) {\n      this.i.oz = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"overlayOutlines\", {\n    /**\n     * Brushes to use for outlining financial overlays.\n    *\n    * Use the `overlayOutlines` property to set a collection of brushes that will be used to render outlines of overlays in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \toverlayOutlines=\"Red\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.o0);\n    },\n    set: function (v) {\n      this.i.o0 = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"volumeOutlines\", {\n    /**\n     * Brushes to use for outlining volume series in the volume pane.\n    *\n    * Use the `volumeOutlines` property to set a collection of brushes that will be used to render outline of multiple series in the volume pane of the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tvolumeOutlines=\"Green\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.o2);\n    },\n    set: function (v) {\n      this.i.o2 = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"volumeBrushes\", {\n    /**\n     * Brushes to use for filling volume series in the volume pane.\n    *\n    * Use the `volumeBrushes` property to set a collection of brushes that will be used to render fill area of multiple series in the volume pane of the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tvolumeBrushes=\"Green\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.o1);\n    },\n    set: function (v) {\n      this.i.o1 = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorNegativeBrushes\", {\n    /**\n     * Brushes to use for negative elements in financial indicators.\n    *\n    * Use the `indicatorNegativeBrushes` property to set a collection of brushes that will be used to render negative elements of indicators in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorNegativeBrushes=\"Red\"/>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ow);\n    },\n    set: function (v) {\n      this.i.ow = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorBrushes\", {\n    /**\n     * Brushes to use for financial indicators.\n    *\n    * Use the `indicatorBrushes` property to set a collection of brushes that will be used to render positive elements of indicators in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorBrushes=\"Green\" />\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ov);\n    },\n    set: function (v) {\n      this.i.ov = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"volumeThickness\", {\n    /**\n     * The outline thickness of volume series in the volume pane.\n    *\n    * Use the `volumeThickness` property to set a number that will be used to render outline thickness of all series in the volume pane, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tvolumeThickness= {2.5}/>\n    * ```\n    */\n    get: function () {\n      return this.i.sk;\n    },\n    set: function (v) {\n      this.i.sk = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"overlayThickness\", {\n    /**\n     * The outline thickness of financial overlays.\n    *\n    * Use the `overlayThickness` property to set a number that will be used to render outline thickness of all overlays in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \toverlayThickness ={2.5}  />\n    * ```\n    */\n    get: function () {\n      return this.i.si;\n    },\n    set: function (v) {\n      this.i.si = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorThickness\", {\n    /**\n     * The outline or stroke thickness of financial indicators.\n    *\n    * Use the `indicatorThickness` property to set a number that will be used to render outline thickness of all indicators in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorThickness={2.5}  />\n    * ```\n    */\n    get: function () {\n      return this.i.sh;\n    },\n    set: function (v) {\n      this.i.sh = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorDisplayTypes\", {\n    /**\n     * The display types of financial indicators.\n    *\n    * Use the `indicatorDisplayTypes` property to set display types that will determine whether render all indicators as area, lines, or columns in the Financial Chart control, e.g.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorDisplayTypes=\"line\" />\n    * ```\n    */\n    get: function () {\n      if (this._indicatorDisplayTypes === null) {\n        var coll = new IgrIndicatorDisplayTypeCollection();\n        var innerColl = this.i.qe;\n\n        if (!innerColl) {\n          innerColl = new IndicatorDisplayTypeCollection_internal();\n        }\n\n        this._indicatorDisplayTypes = coll._fromInner(innerColl);\n        this.i.qe = innerColl;\n      }\n\n      return this._indicatorDisplayTypes;\n    },\n    set: function (v) {\n      if (this._indicatorDisplayTypes !== null) {\n        this._indicatorDisplayTypes._setSyncTarget(null);\n\n        this._indicatorDisplayTypes = null;\n      }\n\n      var coll = new IgrIndicatorDisplayTypeCollection();\n      this._indicatorDisplayTypes = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(IndicatorDisplayType_$type);\n      var innerColl = this.i.qe;\n\n      if (!innerColl) {\n        innerColl = new IndicatorDisplayTypeCollection_internal();\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._indicatorDisplayTypes._setSyncTarget(syncColl);\n\n      this.i.qe = innerColl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorPeriod\", {\n    /**\n     * The period of financial indicators, where applicable.\n    *\n    * The `indicatorPeriod` property applies to only the `BollingerBands` overlay as well as to these indicators types: `AverageDirectionalIndex`, `AverageTrueRange`, `BollingerBandWidth`, `ChaikinVolatility`, `CommodityChannelIndex`, `DetrendedPriceOscillator`, `FastStochasticOscillator`, `ForceIndex`, `FullStochasticOscillator`, `MoneyFlowIndex`, `IgrPriceChannelOverlay`, `RateOfChangeAndMomentum`, `RelativeStrengthIndex`, `SlowStochasticOscillator`, `StandardDeviation`, `StochRSI`, `TRIX`, `WilliamsPercentR`\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorPeriod={8} />\n    * ```\n    */\n    get: function () {\n      return this.i.s6;\n    },\n    set: function (v) {\n      this.i.s6 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorMultiplier\", {\n    /**\n     * The multiplier of financial indicators, where applicable.\n    *\n    * The `indicatorMultiplier` property applies to only to BollingerBandWidth indicator type.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorMultiplier= {8} />\n    * ```\n    */\n    get: function () {\n      return this.i.sg;\n    },\n    set: function (v) {\n      this.i.sg = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorSmoothingPeriod\", {\n    /**\n     * The smoothing period of financial indicators, where applicable.\n    *\n    * The `indicatorSmoothingPeriod` property applies to only to `FullStochasticOscillator` indicator type.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorSmoothingPeriod={8}     />\n    * ```\n    */\n    get: function () {\n      return this.i.s9;\n    },\n    set: function (v) {\n      this.i.s9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorShortPeriod\", {\n    /**\n     * The short period of financial indicators, where applicable.\n    *\n    * The `indicatorShortPeriod` property applies only to these indicator types:\n    *\n    * -   AbsoluteVolumeOscillator,\n    * -   ChaikinOscillator,\n    * -   MovingAverageConvergenceDivergence,\n    * -   PercentagePriceOscillator,\n    * -   PercentageVolumeOscillator,\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorShortPeriod={8} />\n    * ```\n    */\n    get: function () {\n      return this.i.s7;\n    },\n    set: function (v) {\n      this.i.s7 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorLongPeriod\", {\n    /**\n     * The long period of financial indicators, where applicable.\n    *\n    * The `indicatorLongPeriod` property applies only to these indicator types:\n    *\n    * -   AbsoluteVolumeOscillator,\n    * -   ChaikinOscillator,\n    * -   MovingAverageConvergenceDivergence,\n    * -   PercentagePriceOscillator,\n    * -   PercentageVolumeOscillator,\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorLongPeriod={8} />\n    * ```\n    */\n    get: function () {\n      return this.i.s5;\n    },\n    set: function (v) {\n      this.i.s5 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"indicatorSignalPeriod\", {\n    /**\n     * The signal period of financial indicators, where applicable.\n    *\n    * The `indicatorSignalPeriod` property applies to only to MovingAverageConvergenceDivergence indicator type.\n    *\n    * ```ts\n    * <IgrFinancialChart\n    *     width=\"100%\"\n    *     height=\"400px\"\n    *     dataSource={this.data}\n    * \tindicatorSignalPeriod ={8} />\n    * ```\n    */\n    get: function () {\n      return this.i.s8;\n    },\n    set: function (v) {\n      this.i.s8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"rangeSelectorOptions\", {\n    /**\n     * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.\n    */\n    get: function () {\n      if (this._rangeSelectorOptions === null) {\n        var coll = new IgrFinancialChartRangeSelectorOptionCollection();\n        var innerColl = this.i.pk;\n\n        if (!innerColl) {\n          innerColl = new FinancialChartRangeSelectorOptionCollection_internal(0);\n        }\n\n        this._rangeSelectorOptions = coll._fromInner(innerColl);\n        this.i.pk = innerColl;\n      }\n\n      return this._rangeSelectorOptions;\n    },\n    set: function (v) {\n      if (this._rangeSelectorOptions !== null) {\n        this._rangeSelectorOptions._setSyncTarget(null);\n\n        this._rangeSelectorOptions = null;\n      }\n\n      var coll = new IgrFinancialChartRangeSelectorOptionCollection();\n      this._rangeSelectorOptions = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(FinancialChartRangeSelectorOption_$type);\n      var innerColl = this.i.pk;\n\n      if (!innerColl) {\n        innerColl = new FinancialChartRangeSelectorOptionCollection_internal(0);\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._rangeSelectorOptions._setSyncTarget(syncColl);\n\n      this.i.pk = innerColl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"customIndicatorNames\", {\n    /**\n     * The names of custom indicators to add to the chart.\n     * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.\n    */\n    get: function () {\n      if (this._customIndicatorNames === null) {\n        var coll = new IgrCustomIndicatorNameCollection();\n        var innerColl = this.i.customIndicatorNames;\n\n        if (!innerColl) {\n          innerColl = new CustomIndicatorNameCollection_internal(0);\n        }\n\n        this._customIndicatorNames = coll._fromInner(innerColl);\n        this.i.customIndicatorNames = innerColl;\n      }\n\n      return this._customIndicatorNames;\n    },\n    set: function (v) {\n      if (this._customIndicatorNames !== null) {\n        this._customIndicatorNames._setSyncTarget(null);\n\n        this._customIndicatorNames = null;\n      }\n\n      var coll = new IgrCustomIndicatorNameCollection();\n      this._customIndicatorNames = coll._fromOuter(v);\n      var syncColl = new SyncableObservableCollection$1(String_$type);\n      var innerColl = this.i.customIndicatorNames;\n\n      if (!innerColl) {\n        innerColl = new CustomIndicatorNameCollection_internal(0);\n      }\n\n      syncColl._inner = innerColl;\n      syncColl.clear();\n\n      this._customIndicatorNames._setSyncTarget(syncColl);\n\n      this.i.customIndicatorNames = innerColl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"isVerticalZoomEnabled\", {\n    get: function () {\n      return this.i.bw;\n    },\n    set: function (v) {\n      this.i.bw = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"zoomSliderXAxisMajorStroke\", {\n    /**\n     * Gets or sets stroke brush of major gridlines on x-axis of the zoom slider pane\n    */\n    get: function () {\n      return brushToString(this.i.xb);\n    },\n    set: function (v) {\n      this.i.xb = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"zoomSliderXAxisMajorStrokeThickness\", {\n    /**\n     * Gets or sets thickness of major gridlines on x-axis of the zoom slider pane\n    */\n    get: function () {\n      return this.i.sr;\n    },\n    set: function (v) {\n      this.i.sr = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"isLegendVisible\", {\n    /**\n     * Gets or sets weather or not a legend is visible between toolbar and chart's plot area\n    */\n    get: function () {\n      return this.i.rg;\n    },\n    set: function (v) {\n      this.i.rg = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"xAxisMinimumValue\", {\n    /**\n     * Gets or sets minimum value on x-axis\n    */\n    get: function () {\n      return this.i.r4;\n    },\n    set: function (v) {\n      this.i.r4 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialChart.prototype, \"xAxisMaximumValue\", {\n    /**\n     * Gets or sets maximum value on x-axis\n    */\n    get: function () {\n      return this.i.r3;\n    },\n    set: function (v) {\n      this.i.r3 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n  * Called by the UI framework to provide a UI container for rendering this control.\n  * @param container  * The UI container element.\n  */\n\n  IgrFinancialChart.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n\n  IgrFinancialChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.gr(source_, index, newItem);\n  };\n\n  IgrFinancialChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.gs(source_, index, oldItem);\n  };\n\n  IgrFinancialChart.prototype.notifyClearItems = function (source_) {\n    this.i.gq(source_);\n  };\n\n  IgrFinancialChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.gu(source_, index, oldItem, newItem);\n  };\n  /**\n   * Returns visuals as a serialized string.\n  \r\n  */\n\n\n  IgrFinancialChart.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.tv();\n    return iv;\n  };\n\n  Object.defineProperty(IgrFinancialChart.prototype, \"applyCustomIndicators\", {\n    /**\n     * Event raised by the chart when custom indicator data is needed from the application.\n     * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.\n    */\n    get: function () {\n      return this._applyCustomIndicators;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._applyCustomIndicators_wrapped !== null) {\n        this.i.applyCustomIndicators = delegateRemove(this.i.applyCustomIndicators, this._applyCustomIndicators_wrapped);\n        this._applyCustomIndicators_wrapped = null;\n        this._applyCustomIndicators = null;\n      }\n\n      this._applyCustomIndicators = ev;\n\n      this._applyCustomIndicators_wrapped = function (o, e) {\n        var outerArgs = new IgrFinancialChartCustomIndicatorArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeApplyCustomIndicators) {\n          _this.beforeApplyCustomIndicators(_this, outerArgs);\n        }\n\n        if (_this._applyCustomIndicators) {\n          _this._applyCustomIndicators(_this, outerArgs);\n        }\n      };\n\n      this.i.applyCustomIndicators = delegateCombine(this.i.applyCustomIndicators, this._applyCustomIndicators_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrFinancialChart;\n}(IgrXYChart);\n\nexport { IgrFinancialChart };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-financial-chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { FinancialChart } from './FinancialChart';\nimport { FinancialChartType_$type } from './FinancialChartType';\nimport { fromBrushCollection, toBrushCollection, brushToString, stringToBrush, ensureEnum, ensureBool } from \"igniteui-react-core\";\nimport { IgrXYChart } from './igr-xy-chart';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { DataSeriesType } from \"igniteui-react-core\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { FinancialChartVolumeType_$type } from './FinancialChartVolumeType';\nimport { FinancialChartXAxisMode, FinancialChartXAxisMode_$type } from './FinancialChartXAxisMode';\nimport { FinancialChartYAxisMode, FinancialChartYAxisMode_$type } from './FinancialChartYAxisMode';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { AxisLabelsLocation_$type } from './AxisLabelsLocation';\nimport { FinancialChartZoomSliderType_$type } from './FinancialChartZoomSliderType';\nimport { IgrFinancialChartDefaultTemplates } from './igr-financial-chart-default-templates';\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrFinancialIndicatorTypeCollection } from './igr-financial-indicator-type-collection';\nimport { FinancialIndicatorTypeCollection as FinancialIndicatorTypeCollection_internal } from './FinancialIndicatorTypeCollection';\nimport { SyncableObservableCollection$1 } from \"igniteui-react-core\";\nimport { FinancialIndicatorType_$type } from './FinancialIndicatorType';\nimport { IgrFinancialOverlayTypeCollection } from './igr-financial-overlay-type-collection';\nimport { FinancialOverlayTypeCollection as FinancialOverlayTypeCollection_internal } from './FinancialOverlayTypeCollection';\nimport { FinancialOverlayType_$type } from './FinancialOverlayType';\nimport { IgrIndicatorDisplayTypeCollection } from './igr-indicator-display-type-collection';\nimport { IndicatorDisplayTypeCollection as IndicatorDisplayTypeCollection_internal } from './IndicatorDisplayTypeCollection';\nimport { IndicatorDisplayType_$type } from './IndicatorDisplayType';\nimport { IgrFinancialChartRangeSelectorOptionCollection } from './igr-financial-chart-range-selector-option-collection';\nimport { FinancialChartRangeSelectorOptionCollection as FinancialChartRangeSelectorOptionCollection_internal } from './FinancialChartRangeSelectorOptionCollection';\nimport { FinancialChartRangeSelectorOption_$type } from './FinancialChartRangeSelectorOption';\nimport { IgrFinancialChartCustomIndicatorArgs } from './igr-financial-chart-custom-indicator-args';\nimport { CustomIndicatorNameCollection as CustomIndicatorNameCollection_internal } from './CustomIndicatorNameCollection';\nimport { IgrCustomIndicatorNameCollection } from './igr-custom-indicator-name-collection';\nimport { String_$type } from \"igniteui-react-core\";\nimport { IgrTemplateContainer } from \"igniteui-react-core\";\nvar fg = window && window.CSS && window.CSS.supports &&\n    /*@__PURE__*/ window.CSS.supports(\"display\", \"grid\");\nvar financialChartToolbarStyle = {\n    gridRow: 1,\n    msGridRow: 1\n};\nvar financialChartPriceStyle = {\n    gridRow: 3,\n    msGridRow: 3\n};\nvar financialChartIndicatorsStyle = {\n    gridRow: 4,\n    msGridRow: 4\n};\nvar financialChartVolumeStyle = {\n    gridRow: 5,\n    msGridRow: 5\n};\nvar financialChartZoomSliderStyle = {\n    gridRow: 6,\n    msGridRow: 6\n};\nvar financialChartMainGridStyle = {\n    height: '100%',\n    width: '100%',\n    textAlign: 'left',\n    display: fg ? 'grid' : '-ms-grid',\n    msGridColumns: '100%'\n};\nvar financialChartLegendStyle = {\n    gridRow: 2,\n    msGridRow: 2\n};\nvar IgrFinancialChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrFinancialChart, _super);\n    function IgrFinancialChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this._wrapper = null;\n        _this._initialized = false;\n        _this._toolbarElement = null;\n        _this._dataSource = null;\n        _this._defaultTooltips = null;\n        _this._dynamicContent = {};\n        _this._uniqueTooltipId = 0;\n        _this._xAxisBreaks = null;\n        _this._indicatorTypes = null;\n        _this._overlayTypes = null;\n        _this._indicatorDisplayTypes = null;\n        _this._rangeSelectorOptions = null;\n        _this._customIndicatorNames = null;\n        _this._applyCustomIndicators = null;\n        _this._applyCustomIndicators_wrapped = null;\n        _this._toolTemplateRef = _this._toolTemplateRef.bind(_this);\n        _this._tooltipRef = _this._tooltipRef.bind(_this);\n        _this._mainGridRef = _this._mainGridRef.bind(_this);\n        _this._mainRef = _this._mainRef.bind(_this);\n        _this._toolbarRef = _this._toolbarRef.bind(_this);\n        _this._activeTooltipElements = new Map();\n        _this._activeTooltips = new Map();\n        _this._currentTooltips = [];\n        _this.onDocumentClick = _this.onDocumentClick.bind(_this);\n        if (document) {\n            _this._container = document.createElement(\"div\");\n            _this._container.style.display = \"block\";\n            _this._container.style.width = \"100%\";\n            _this._container.style.height = \"100%\";\n            document.addEventListener(\"click\", _this.onDocumentClick);\n        }\n        var root;\n        root = _this._container;\n        if (_this._container != null) {\n            root = _this._container;\n        }\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this._wrapper = ren;\n        var chart = _this.i;\n        _this._chart = chart;\n        if (chart.xAxis) {\n            _this.rewrapAxis(chart.xAxis);\n        }\n        if (chart.yAxis) {\n            _this.rewrapAxis(chart.yAxis);\n        }\n        if (chart.volumeAxis) {\n            _this.rewrapAxis(chart.volumeAxis);\n        }\n        if (chart.volumeXAxis) {\n            _this.rewrapAxis(chart.volumeXAxis);\n        }\n        if (chart.indicatorAxis) {\n            _this.rewrapAxis(chart.indicatorAxis);\n        }\n        if (chart.indicatorXAxis) {\n            _this.rewrapAxis(chart.indicatorXAxis);\n        }\n        if (chart.zoomSliderAxis) {\n            _this.rewrapAxis(chart.zoomSliderAxis);\n        }\n        if (chart.zoomSliderXAxis) {\n            _this.rewrapAxis(chart.zoomSliderXAxis);\n        }\n        chart.provideContainer(ren);\n        _this.bindData();\n        chart.notifyResized();\n        ren.addSizeWatcher(function () {\n            _this._checkToolbarSize();\n            _this._chart.notifyResized();\n        });\n        _this._initialized = true;\n        return _this;\n    }\n    IgrFinancialChart.prototype.render = function () {\n        var outerChildren = [];\n        var children = [\n            React.createElement('div', {\n                key: 'financialChartToolbarArea',\n                className: 'financialChartToolbarArea',\n                style: financialChartToolbarStyle,\n                ref: this._toolbarRef\n            }, React.createElement(IgrTemplateContainer, {\n                ref: this._toolTemplateRef,\n            })),\n            React.createElement('div', { key: 'financialChartLegend', className: 'financialChartLegend', style: financialChartLegendStyle }),\n            React.createElement('div', { key: 'financialChartPrice', className: 'financialChartPrice', style: financialChartPriceStyle }),\n            React.createElement('div', { key: 'financialChartIndicators', className: 'financialChartIndicators', style: financialChartIndicatorsStyle }),\n            React.createElement('div', { key: 'financialChartVolume', className: 'financialChartVolume', style: financialChartVolumeStyle }),\n            React.createElement('div', { key: 'financialChartZoomSlider', className: 'financialChartZoomSlider', style: financialChartZoomSliderStyle })\n        ];\n        if (this._sliderPortal) {\n            children.push(this._sliderPortal);\n        }\n        if (this._currentTooltips && this._currentTooltips.length > 0) {\n            for (var i = 0; i < this._currentTooltips.length; i++) {\n                var t = this._currentTooltips[i];\n                if (this._activeTooltipElements.has(t)) {\n                    var active = this._activeTooltipElements.get(t);\n                    outerChildren.push(active);\n                }\n                else {\n                    if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n                        continue;\n                    }\n                    var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n                    var tEle = React.createElement(Tooltip, {\n                        ref: this._tooltipRef,\n                        key: this._currentTooltips[i].key,\n                        owner: this._currentTooltips[i]\n                    });\n                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n                    this._activeTooltipElements.set(t, portal);\n                    outerChildren.push(portal);\n                }\n            }\n        }\n        var mainGrid = React.createElement('div', {\n            key: 'financialChartMainGrid',\n            className: 'financialChartMainGrid',\n            style: financialChartMainGridStyle,\n            children: children,\n            ref: this._mainGridRef,\n        });\n        outerChildren.splice(0, 0, mainGrid);\n        var mainDiv = React.createElement('div', {\n            className: \"ig-financial-chart igr-financial-chart\",\n            key: \"financialChartMainDiv\",\n            children: outerChildren,\n            ref: this._mainRef\n        });\n        return mainDiv;\n    };\n    IgrFinancialChart.prototype._tooltipRef = function (t) {\n        console.log(t);\n        if (t === null) {\n            return;\n        }\n        if (t.currentOwner &&\n            t.currentOwner.tooltipTemplate) {\n            t.template = t.currentOwner.tooltipTemplate;\n        }\n        this._activeTooltips.set(t.currentOwner, t);\n    };\n    IgrFinancialChart.prototype._toolbarRef = function (t) {\n        this._toolbarElement = t;\n    };\n    IgrFinancialChart.prototype._toolTemplateRef = function (t) {\n        this._toolbarTemplateComponent = t;\n    };\n    IgrFinancialChart.prototype._mainGridRef = function (t) {\n        this._mainGridElement = t;\n    };\n    IgrFinancialChart.prototype._mainRef = function (t) {\n        this._mainElement = t;\n        this._container = t;\n        if (!t) {\n            return;\n        }\n        this._wrapper.updateRoot(this._wrapper.getWrapper(this._container));\n    };\n    Object.defineProperty(IgrFinancialChart.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._mainElement) {\n                this._mainElement.style.height = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._mainElement) {\n                this._mainElement.style.height = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"rangeSelectorTemplate\", {\n        get: function () {\n            return this._rangeSelectorTemplate;\n        },\n        set: function (value) {\n            this._rangeSelectorTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"chartTypePickerTemplate\", {\n        get: function () {\n            return this._chartTypePickerTemplate;\n        },\n        set: function (value) {\n            this._chartTypePickerTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorMenuTemplate\", {\n        get: function () {\n            return this._indicatorMenuTemplate;\n        },\n        set: function (value) {\n            this._indicatorMenuTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"toolbarTemplate\", {\n        get: function () {\n            return this._toolbarTemplate;\n        },\n        set: function (value) {\n            this._toolbarTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"chartTemplate\", {\n        get: function () {\n            return this._chartTemplate;\n        },\n        set: function (value) {\n            this._chartTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrFinancialChart.prototype._checkToolbarSize = function () {\n        if (this._toolbarElement) {\n            var start = this._toolbarElement;\n            if (start.children.length == 1) {\n                start = start.children[0];\n            }\n            if (start.children.length == 1) {\n                start = start.children[0];\n            }\n            var toolbarRoot = start.querySelector(\".financialChartToolbar\");\n            var rootRect = toolbarRoot.getBoundingClientRect();\n            var hideRemaining = false;\n            for (var i = 0; i < toolbarRoot.children.length; i++) {\n                var child = toolbarRoot.children[i];\n                if (child.nodeType == Node.ELEMENT_NODE) {\n                    if (!hideRemaining) {\n                        child.style.display = \"\";\n                    }\n                    var childRect = child.getBoundingClientRect();\n                    if (hideRemaining ||\n                        childRect.left + childRect.width >\n                            rootRect.left + rootRect.width) {\n                        child.style.display = \"none\";\n                        hideRemaining = true;\n                    }\n                    else {\n                        child.style.display = \"\";\n                    }\n                }\n            }\n        }\n    };\n    IgrFinancialChart.prototype.componentWillUnmount = function () {\n        this._chart.destroy();\n        this._wrapper.destroy();\n        if (document) {\n            document.removeEventListener(\"click\", this.onDocumentClick);\n        }\n    };\n    IgrFinancialChart.prototype.onDocumentClick = function (ev) {\n        this._chart.onDocumentClick(ev);\n    };\n    IgrFinancialChart.prototype.rewrapAxis = function (axis) {\n        var axisName = axis.$type.name;\n        var componentName = \"Igr\" + axisName;\n        if (TypeRegistrar.isRegistered(componentName)) {\n            var x = TypeRegistrar.create(componentName);\n            x._implementation = axis;\n            axis.externalObject = x;\n        }\n        else {\n            throw new Error(\"Axis type not loaded: \" + componentName);\n        }\n    };\n    IgrFinancialChart.prototype.createImplementation = function () {\n        return new FinancialChart();\n    };\n    Object.defineProperty(IgrFinancialChart.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrFinancialChart.prototype.createSeriesComponent = function (type) {\n        if (TypeRegistrar.isRegistered(type)) {\n            var s = TypeRegistrar.create(type);\n            s.owner = this;\n            return s;\n        }\n        else {\n            //we shouldn't get here, hopefully.\n            throw Error(\"series type not loaded: \" + type);\n        }\n    };\n    IgrFinancialChart.prototype.createIndicator = function (typeName) {\n        return this.createSeriesComponent(\"Igr\" + typeName);\n    };\n    IgrFinancialChart.prototype.createOverlay = function (typeName) {\n        return this.createSeriesComponent(\"Igr\" + typeName);\n    };\n    IgrFinancialChart.prototype.createSeries = function (type) {\n        switch (type) {\n            case DataSeriesType.Area:\n                return this.createSeriesComponent('IgrAreaSeries');\n            case DataSeriesType.Column:\n                return this.createSeriesComponent('IgrColumnSeries');\n            case DataSeriesType.Line:\n                return this.createSeriesComponent('IgrLineSeries');\n            case DataSeriesType.FinancialPrice:\n                return this.createSeriesComponent('IgrFinancialPriceSeries');\n            case DataSeriesType.ItemToolTipLayer:\n                return this.createSeriesComponent('IgrItemToolTipLayer');\n            case DataSeriesType.CategoryToolTipLayer:\n                return this.createSeriesComponent('IgrCategoryToolTipLayer');\n            case DataSeriesType.CrosshairLayer:\n                return this.createSeriesComponent('IgrCrosshairLayer');\n            case DataSeriesType.FinalValueLayer:\n                return this.createSeriesComponent('IgrFinalValueLayer');\n            case DataSeriesType.CalloutLayer:\n                return this.createSeriesComponent('IgrCalloutLayer');\n            default:\n                return this.createSeriesComponent('IgrColumnSeries');\n        }\n    };\n    IgrFinancialChart.prototype.createXAxis = function (type) {\n        switch (type) {\n            case FinancialChartXAxisMode.Ordinal:\n                if (TypeRegistrar.isRegistered(\"IgrOrdinalTimeXAxis\")) {\n                    return TypeRegistrar.create(\"IgrOrdinalTimeXAxis\");\n                }\n                else if (TypeRegistrar.isRegistered(\"IgrTimeXAxis\")) {\n                    return TypeRegistrar.create(\"IgrTimeXAxis\");\n                }\n                else {\n                    throw new Error(\"not valid axes components loaded\");\n                }\n            case FinancialChartXAxisMode.Time:\n                if (TypeRegistrar.isRegistered(\"IgrTimeXAxis\")) {\n                    return TypeRegistrar.create(\"IgrTimeXAxis\");\n                }\n                else if (TypeRegistrar.isRegistered(\"IgrOrdinalTimeXAxis\")) {\n                    return TypeRegistrar.create(\"IgrOrdinalTimeXAxis\");\n                }\n                else {\n                    throw new Error(\"not valid axes components loaded\");\n                }\n        }\n    };\n    IgrFinancialChart.prototype.createYAxis = function (type) {\n        switch (type) {\n            case FinancialChartYAxisMode.Numeric:\n                if (TypeRegistrar.isRegistered(\"IgrNumericYAxis\")) {\n                    return TypeRegistrar.create(\"IgrNumericYAxis\");\n                }\n                else if (TypeRegistrar.isRegistered(\"IgrPercentChangeYAxis\")) {\n                    return TypeRegistrar.create(\"IgrPercentChangeYAxis\");\n                }\n                else {\n                    throw new Error(\"not valid axes components loaded\");\n                }\n            case FinancialChartYAxisMode.PercentChange:\n                if (TypeRegistrar.isRegistered(\"IgrPercentChangeYAxis\")) {\n                    return TypeRegistrar.create(\"IgrPercentChangeYAxis\");\n                }\n                else if (TypeRegistrar.isRegistered(\"IgrNumericYAxis\")) {\n                    return TypeRegistrar.create(\"IgrNumericYAxis\");\n                }\n                else {\n                    throw new Error(\"not valid axes components loaded\");\n                }\n        }\n    };\n    Object.defineProperty(IgrFinancialChart.prototype, \"dataSource\", {\n        get: function () {\n            return this._dataSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.bindData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrFinancialChart.prototype.bindData = function () {\n        if (this._chart != null && this._chart !== undefined) {\n            this._chart.itemsSource = this._dataSource;\n        }\n    };\n    IgrFinancialChart.prototype.componentDidMount = function () {\n        _super.prototype.componentDidMount.call(this);\n        if (this._mainElement) {\n            if (this._width) {\n                this._mainElement.style.width = this._width;\n            }\n            if (this._height) {\n                this._mainElement.style.height = this._height;\n            }\n        }\n        this.initializeContent();\n        this._chart.notifyResized();\n    };\n    IgrFinancialChart.prototype.initializeContent = function () {\n        var _this = this;\n        if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n            var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n            this._defaultTooltips = d;\n            this._onDefaultTooltipsReady(d);\n            //this._container.appendChild(cr.location.nativeElement);\n        }\n        var context = this._chart.getContext();\n        if (!this._defaultTemplates) {\n            this._defaultTemplates = new IgrFinancialChartDefaultTemplates();\n        }\n        var toolbarArea = this._toolbarTemplateComponent;\n        var toolbarContext = context.vm.toolbar;\n        toolbarContext.vm.financialChartIndicatorMenu.template = this.indicatorMenuTemplate ? this.indicatorMenuTemplate : this._defaultTemplates.financialChartIndicatorMenuTemplate;\n        toolbarContext.vm.financialChartIndicatorMenu.vm.notifyChanged = function () { toolbarArea.dataContext = toolbarContext; };\n        toolbarContext.vm.financialChartTypePicker.template = this.chartTypePickerTemplate ? this.chartTypePickerTemplate : this._defaultTemplates.financialChartTypePickerTemplate;\n        toolbarContext.vm.financialChartTypePicker.vm.notifyChanged = function () { toolbarArea.dataContext = toolbarContext; };\n        toolbarContext.vm.financialChartRangeSelector.template = this.rangeSelectorTemplate ? this.rangeSelectorTemplate : this._defaultTemplates.financialChartRangeSelectorTemplate;\n        toolbarContext.vm.financialChartRangeSelector.vm.notifyChanged = function () {\n            toolbarArea.dataContext = toolbarContext;\n        };\n        toolbarContext.template = this.toolbarTemplate ? this.toolbarTemplate : this._defaultTemplates.financialChartToolbarTemplate;\n        var toolContainer = this._toolbarElement;\n        //let toolbarArea = this._templates.toArray()[0];\n        //let mainArea = this._templates.toArray()[1];\n        toolbarArea.contentReady = function () {\n            toolbarArea.contentReady = null;\n            _this._chart.provideGrid(gridWrapper);\n            _this._checkToolbarSize();\n        };\n        toolbarArea.dataContext = toolbarContext;\n        toolbarArea.template = toolbarContext.template;\n        var ele = this._toolbarElement;\n        //ele.style.width = \"100%\";\n        //ele.style.height = \"100%\";\n        //if (ele.parentElement != null) {\n        //    ele.parentElement.removeChild(ele);\n        //}\n        //toolContainer.appendChild(ele);\n        //this._wrapper.setStyleProperty(ele, \"display\", \"\")\n        ele.style.display = \"\";\n        var legendContainer = context.legendContainer.rootWrapper.getNativeElement();\n        var mainContainer = context.container.rootWrapper.getNativeElement();\n        var indicatorContainer = context.indicatorsContainer.rootWrapper.getNativeElement();\n        var volumeContainer = context.volumeContainer.rootWrapper.getNativeElement();\n        var zoomSliderContainer = context.zoomContainer.rootWrapper.getNativeElement();\n        var main = this._mainGridElement;\n        var templateMain = main.querySelector(\".financialChartPrice\");\n        var templateToolbar = main.querySelector(\".financialChartToolbar\");\n        var templateLegend = main.querySelector(\".financialChartLegend\");\n        var templateIndicator = main.querySelector(\".financialChartIndicators\");\n        var templateVolume = main.querySelector(\".financialChartVolume\");\n        var templateZoomSlider = main.querySelector(\".financialChartZoomSlider\");\n        var grid = main; // main.querySelector(\".financialChartMainGrid\");\n        var gridWrapper = new ReactWrapper(grid, this._wrapper);\n        templateMain.appendChild(mainContainer);\n        //templateToolbar.appendChild(toolContainer);\n        templateLegend.appendChild(legendContainer);\n        templateIndicator.appendChild(indicatorContainer);\n        templateVolume.appendChild(volumeContainer);\n        templateZoomSlider.appendChild(zoomSliderContainer);\n        this._styling(this._container, this);\n        //this._mainElement.nativeElement.parentElement.removeChild(this._mainElement.nativeElement);\n        //this.container.appendChild(this._mainElement.nativeElement);\n    };\n    IgrFinancialChart.prototype._createZoomSlider = function (hostEle, onReady) {\n        if (!TypeRegistrar.isRegistered(\"IgrZoomSlider\")) {\n            //shouldn't happen.\n            throw new Error(\"zoom slider component isn't loaded\");\n        }\n        var Slider = TypeRegistrar.get(\"IgrZoomSlider\");\n        var ele = React.createElement(Slider, {\n            width: '100%', height: '100%', ref: function (r) {\n                onReady(r);\n            }\n        });\n        var portal = ReactDOM.createPortal(ele, hostEle);\n        hostEle.className = \"test\";\n        hostEle.style.width = \"100%\";\n        hostEle.style.height = \"100%\";\n        this._sliderPortal = portal;\n    };\n    IgrFinancialChart.prototype.createTooltip = function () {\n        // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n        // \treturn null;\n        // }\n        // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n        var wrapper = this._wrapper.createElement(\"div\");\n        var ele = wrapper.getNativeElement();\n        ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n        this._uniqueTooltipId++;\n        this._currentTooltips = this._currentTooltips.slice(0);\n        this._currentTooltips.push(ele);\n        //let element = React.createElement(Tooltip,  );\n        //let portal = ReactDOM.createPortal(element, ele);\n        var self = this;\n        ele.updateToolTip = function (c, isSubContent) {\n            if (c.externalObject) {\n                c = c.externalObject;\n            }\n            else {\n                var ext = new IgrDataContext();\n                ext._implementation = c;\n                c = ext;\n            }\n            if (!isSubContent) {\n                if (ele.parentElement != self._container) {\n                    if (ele.parentElement != null) {\n                        ele.parentElement.removeChild(ele);\n                    }\n                    self._container.appendChild(ele);\n                }\n            }\n            else {\n                c.isSubContent = true;\n            }\n            if (self._activeTooltips.has(ele)) {\n                var t = self._activeTooltips.get(ele);\n                t.dataContext = c;\n            }\n            ele.style.display = \"block\";\n            return true;\n        };\n        ele.hideToolTip = function () {\n            ele.style.display = \"none\";\n        };\n        ele.style.display = \"none\";\n        this._updateTooltipState();\n        return ele;\n    };\n    IgrFinancialChart.prototype._ensureTooltipCreated = function (series) {\n        var _this = this;\n        series._ensureTooltipCreated(function () { return _this.createTooltip(); }, function (ele) {\n            var wrapper = new ReactWrapper(ele, _this._wrapper);\n            wrapper.updateToolTip = ele.updateToolTip;\n            wrapper.hideToolTip = ele.hideToolTip;\n            if (_this._activeTooltips.has(ele)) {\n                var tCont = _this._activeTooltips.get(ele);\n                tCont.template = ele.tooltipTemplate;\n            }\n            return wrapper;\n        });\n    };\n    // private _createXAxis(): any {\n    //     let x = new IgxCategoryXAxisComponent();\n    //     return x.i;\n    // }\n    // private _createYAxis(): any {\n    //     let y = new IgxNumericYAxisComponent();\n    //     return y.i;\n    // }\n    IgrFinancialChart.prototype._ensureDefaultTooltip = function (series) {\n        if (this._defaultTooltips == null) {\n            return;\n        }\n        this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n    };\n    IgrFinancialChart.prototype._onDefaultTooltipsReady = function (cr) {\n        if (this.i.dataChart) {\n            var currSeries = this.i.dataChart.series;\n            for (var i = 0; i < currSeries.count; i++) {\n                if (currSeries.item(i).externalObject.showDefaultTooltip) {\n                    this._ensureDefaultTooltip(currSeries.item(i).externalObject);\n                }\n            }\n        }\n    };\n    IgrFinancialChart.prototype._updateTooltipState = function () {\n        if (this._initialized) {\n            this.setState({ tooltips: this._currentTooltips });\n        }\n    };\n    Object.defineProperty(IgrFinancialChart.prototype, \"xAxisBreaks\", {\n        /**\n         * TimeAxisBreaks to apply to this chart when in time axis mode, representing spans of time to omit, such as weekends.\n        */\n        get: function () {\n            if (this._xAxisBreaks === null) {\n                if (!TypeRegistrar.isRegistered(\"IgrTimeAxisBreakCollection\")) {\n                    return null;\n                }\n                var coll = TypeRegistrar.create(\"IgrTimeAxisBreakCollection\");\n                var innerColl = this.i.xAxisBreaks;\n                if (!innerColl) {\n                    innerColl = TypeRegistrar.create(\"TimeAxisBreakCollection\");\n                }\n                this._xAxisBreaks = coll._fromInner(innerColl);\n                this.i._xAxisBreaks = innerColl;\n            }\n            return this._xAxisBreaks;\n        },\n        set: function (v) {\n            if (this._xAxisBreaks !== null) {\n                this._xAxisBreaks._setSyncTarget(null);\n                this._xAxisBreaks = null;\n            }\n            if (!TypeRegistrar.isRegistered(\"IgxTimeAxisBreakCollection\")) {\n                return;\n            }\n            var coll = TypeRegistrar.create(\"IgxTimeAxisBreakCollection\");\n            var t = TypeRegistrar.get(\"TimeAxisBreak\");\n            this._xAxisBreaks = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(t.$type);\n            var innerColl = this.i.xAxisBreaks;\n            if (!innerColl) {\n                innerColl = TypeRegistrar.create(\"TimeAxisBreakCollection\");\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._xAxisBreaks._setSyncTarget(syncColl);\n            this.i._xAxisBreaks = innerColl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"leftMargin\", {\n        get: function () {\n            return this.i.cs;\n        },\n        set: function (v) {\n            this.i.cs = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"isHorizontalZoomEnabled\", {\n        get: function () {\n            return this.i.bq;\n        },\n        set: function (v) {\n            this.i.bq = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"toolbarHeight\", {\n        get: function () {\n            return this.i.sj;\n        },\n        set: function (v) {\n            this.i.sj = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisIsLogarithmic\", {\n        /**\n         * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.\n         * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.\n        */\n        get: function () {\n            return this.i.rp;\n        },\n        set: function (v) {\n            this.i.rp = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisLogarithmBase\", {\n        /**\n         * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.\n         * This property is effective only when YAxisIsLogarithmic is true.\n        */\n        get: function () {\n            return this.i.tb;\n        },\n        set: function (v) {\n            this.i.tb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisInterval\", {\n        /**\n         * Gets or sets the distance between each label and grid line along the Y-axis.\n        *\n        * The `yAxisInterval` determines how often to show a label, tickmark, and/or gridline along the y-axis.  Set this property to a number less than the numeric range of the y-axis.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tyAxisInterval={20}\n        *  />\n        * ```\n        */\n        get: function () {\n            return this.i.sn;\n        },\n        set: function (v) {\n            this.i.sn = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMinimumValue\", {\n        /**\n         * Gets or sets the data value corresponding to the minimum value of the Y-axis.\n        *\n        * The `yAxisMinimumValue` determines starting value of labels, tickmarks, and gridlines on the y-axis.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     yAxisMinimumValue={-200}\n        *     yAxisMaximumValue={1000}\n        *     dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.sp;\n        },\n        set: function (v) {\n            this.i.sp = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMaximumValue\", {\n        /**\n         * Gets or sets the data value corresponding to the maximum value of the Y-axis.\n        *\n        * The `yAxisMaximumValue` determines ending value of labels, tickmarks, and gridlines on the y-axis.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *  yAxisMinimumValue={-200}\n        *     yAxisMaximumValue={100}\n        *     dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.so;\n        },\n        set: function (v) {\n            this.i.so = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMinorInterval\", {\n        /**\n         * Gets or sets the frequency of displayed minor lines along the Y-axis.\n        *\n        * The `yAxisMinorInterval` determines how often to show minor gridline along the y-axis.  Set this property to a number less than the `yAxisInterval` and the numeric range of the y-axis.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *      yAxisMinorInterval={50}\n        *     dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.sq;\n        },\n        set: function (v) {\n            this.i.sq = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisActualMinimum\", {\n        /**\n         * Gets the current minimum value for the Y-axis.\n        */\n        get: function () {\n            return this.i.sm;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisActualMaximum\", {\n        /**\n         * Gets the current maximum value for the Y-axis.\n        */\n        get: function () {\n            return this.i.sl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"volumeType\", {\n        /**\n         * The type of series to display in the volume pane.\n        *\n        * Use the `volumeType` property to set a type of all series that will be rendered in the volume pane, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tvolumeType=\"Column\" />\n        * ```\n        */\n        get: function () {\n            return this.i.pt;\n        },\n        set: function (v) {\n            this.i.pt = ensureEnum(FinancialChartVolumeType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"xAxisMode\", {\n        /**\n         * The scaling mode of the X-axis.\n        *\n        * Use the `xAxisMode` property to plot data items without any breaks in data range (Ordinal mode) or with breaks in data range (Time mode) such as weekends/holidays. Note that the Ordinal axis mode is less expensive to use in the financial chart than the Time axis mode.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *      xAxisMode=\"time\"\n        *     dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.pv;\n        },\n        set: function (v) {\n            this.i.pv = ensureEnum(FinancialChartXAxisMode_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisMode\", {\n        /**\n         * The scaling mode of the Y-axis.\n        *\n        * Use the `yAxisMode` property to plot data items using their actual values (Numeric) or using percent changes from the first data point (PercentChange), e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *      yAxisMode={this.state.yAxisMode}\n        *     dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.px;\n        },\n        set: function (v) {\n            this.i.px = ensureEnum(FinancialChartYAxisMode_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"isToolbarVisible\", {\n        /**\n         * A boolean property controlling the visibility of the toolbar.\n        */\n        get: function () {\n            return this.i.rk;\n        },\n        set: function (v) {\n            this.i.rk = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"chartType\", {\n        /**\n         * The type of price series to display in the main chart.\n        *\n        * Use the `chartType` property to set a type of series that will be used to render prices in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *   width=\"100%\"\n        *   height=\"400px\"\n        * \tchartType=\"Candle\"\n        *   dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.po;\n        },\n        set: function (v) {\n            this.i.po = ensureEnum(FinancialChartType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisLabelHorizontalAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of Y-axis labels.\n        */\n        get: function () {\n            return this.i.nk;\n        },\n        set: function (v) {\n            this.i.nk = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"isWindowSyncedToVisibleRange\", {\n        /**\n         * A boolean indicating whether the chart should automatically zoom in vertically on the currently visible range of data.\n         * When this property is set to true, panning and zooming along the X-axis will result in a corresponding zoom on the Y-axis, so that the visible range of data fills the zoom window as fully as possible.\n        */\n        get: function () {\n            return this.i.rl;\n        },\n        set: function (v) {\n            this.i.rl = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorTypes\", {\n        /**\n         * A collection indicating what financial indicator types to display on the Financial Chart.\n        *\n        * Use the `indicatorTypes` property to set types of indicators that will be rendered below the price pane in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorTypes=\"ForceIndex\" />\n        * ```\n        */\n        get: function () {\n            if (this._indicatorTypes === null) {\n                var coll = new IgrFinancialIndicatorTypeCollection();\n                var innerColl = this.i.p2;\n                if (!innerColl) {\n                    innerColl = new FinancialIndicatorTypeCollection_internal(0);\n                }\n                this._indicatorTypes = coll._fromInner(innerColl);\n                this.i.p2 = innerColl;\n            }\n            return this._indicatorTypes;\n        },\n        set: function (v) {\n            if (this._indicatorTypes !== null) {\n                this._indicatorTypes._setSyncTarget(null);\n                this._indicatorTypes = null;\n            }\n            var coll = new IgrFinancialIndicatorTypeCollection();\n            this._indicatorTypes = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(FinancialIndicatorType_$type);\n            var innerColl = this.i.p2;\n            if (!innerColl) {\n                innerColl = new FinancialIndicatorTypeCollection_internal(0);\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._indicatorTypes._setSyncTarget(syncColl);\n            this.i.p2 = innerColl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"overlayTypes\", {\n        /**\n         * A collection indicating what financial overlay types to display on the Financial Chart.\n        *\n        * Use the `overlayTypes` property to set types of overlays that will be rendered behind price series in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \toverlayType =\"PriceChannel\" />\n        * ```\n        */\n        get: function () {\n            if (this._overlayTypes === null) {\n                var coll = new IgrFinancialOverlayTypeCollection();\n                var innerColl = this.i.p4;\n                if (!innerColl) {\n                    innerColl = new FinancialOverlayTypeCollection_internal(0);\n                }\n                this._overlayTypes = coll._fromInner(innerColl);\n                this.i.p4 = innerColl;\n            }\n            return this._overlayTypes;\n        },\n        set: function (v) {\n            if (this._overlayTypes !== null) {\n                this._overlayTypes._setSyncTarget(null);\n                this._overlayTypes = null;\n            }\n            var coll = new IgrFinancialOverlayTypeCollection();\n            this._overlayTypes = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(FinancialOverlayType_$type);\n            var innerColl = this.i.p4;\n            if (!innerColl) {\n                innerColl = new FinancialOverlayTypeCollection_internal(0);\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._overlayTypes._setSyncTarget(syncColl);\n            this.i.p4 = innerColl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisAbbreviateLargeNumbers\", {\n        /**\n         * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.\n        */\n        get: function () {\n            return this.i.ro;\n        },\n        set: function (v) {\n            this.i.ro = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"resolution\", {\n        /**\n         * Gets or sets the rendering resolution for all series in this chart.\n         * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.\n        */\n        get: function () {\n            return this.i.cu;\n        },\n        set: function (v) {\n            this.i.cu = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"yAxisLabelLocation\", {\n        /**\n         * Gets or sets the location of Y-axis labels, relative to the plot area.\n        */\n        get: function () {\n            return this.i.ih;\n        },\n        set: function (v) {\n            this.i.ih = ensureEnum(AxisLabelsLocation_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"zoomSliderType\", {\n        /**\n         * Gets or sets type of series to display in the zoom slider pane.\n        *\n        * Use the `zoomSliderType` property to set a type of all series that will be rendered in the zoom pane, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     zoomSliderType=\"Candle\"\n        *     dataSource={this.data} />\n        * ```\n        */\n        get: function () {\n            return this.i.p0;\n        },\n        set: function (v) {\n            this.i.p0 = ensureEnum(FinancialChartZoomSliderType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"negativeBrushes\", {\n        /**\n         * Gets or sets the palette used for coloring negative items of Waterfall chart type.\n        *\n        * Use the `negativeBrushes` property to set a collection of brushes that will be used to render fill area of negative elements in the price pane, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tnegativeBrushes=\"Red\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ox);\n        },\n        set: function (v) {\n            this.i.ox = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"negativeOutlines\", {\n        /**\n         * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.\n        *\n        * Use the `negativeOutlines` property to set a collection of brushes that will be used to render outline of negative elements in the price pane, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tnegativeOutlines= \"Green\"/>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.oy);\n        },\n        set: function (v) {\n            this.i.oy = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"overlayBrushes\", {\n        /**\n         * Brushes to use for filling financial overlays.\n        *\n        * Use the `overlayBrushes` property to set a collection of brushes that will be used to render fill area of overlays in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \toverlayBrushes=\"Green\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.oz);\n        },\n        set: function (v) {\n            this.i.oz = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"overlayOutlines\", {\n        /**\n         * Brushes to use for outlining financial overlays.\n        *\n        * Use the `overlayOutlines` property to set a collection of brushes that will be used to render outlines of overlays in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \toverlayOutlines=\"Red\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.o0);\n        },\n        set: function (v) {\n            this.i.o0 = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"volumeOutlines\", {\n        /**\n         * Brushes to use for outlining volume series in the volume pane.\n        *\n        * Use the `volumeOutlines` property to set a collection of brushes that will be used to render outline of multiple series in the volume pane of the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tvolumeOutlines=\"Green\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.o2);\n        },\n        set: function (v) {\n            this.i.o2 = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"volumeBrushes\", {\n        /**\n         * Brushes to use for filling volume series in the volume pane.\n        *\n        * Use the `volumeBrushes` property to set a collection of brushes that will be used to render fill area of multiple series in the volume pane of the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tvolumeBrushes=\"Green\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.o1);\n        },\n        set: function (v) {\n            this.i.o1 = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorNegativeBrushes\", {\n        /**\n         * Brushes to use for negative elements in financial indicators.\n        *\n        * Use the `indicatorNegativeBrushes` property to set a collection of brushes that will be used to render negative elements of indicators in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorNegativeBrushes=\"Red\"/>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ow);\n        },\n        set: function (v) {\n            this.i.ow = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorBrushes\", {\n        /**\n         * Brushes to use for financial indicators.\n        *\n        * Use the `indicatorBrushes` property to set a collection of brushes that will be used to render positive elements of indicators in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorBrushes=\"Green\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ov);\n        },\n        set: function (v) {\n            this.i.ov = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"volumeThickness\", {\n        /**\n         * The outline thickness of volume series in the volume pane.\n        *\n        * Use the `volumeThickness` property to set a number that will be used to render outline thickness of all series in the volume pane, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tvolumeThickness= {2.5}/>\n        * ```\n        */\n        get: function () {\n            return this.i.sk;\n        },\n        set: function (v) {\n            this.i.sk = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"overlayThickness\", {\n        /**\n         * The outline thickness of financial overlays.\n        *\n        * Use the `overlayThickness` property to set a number that will be used to render outline thickness of all overlays in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \toverlayThickness ={2.5}  />\n        * ```\n        */\n        get: function () {\n            return this.i.si;\n        },\n        set: function (v) {\n            this.i.si = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorThickness\", {\n        /**\n         * The outline or stroke thickness of financial indicators.\n        *\n        * Use the `indicatorThickness` property to set a number that will be used to render outline thickness of all indicators in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorThickness={2.5}  />\n        * ```\n        */\n        get: function () {\n            return this.i.sh;\n        },\n        set: function (v) {\n            this.i.sh = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorDisplayTypes\", {\n        /**\n         * The display types of financial indicators.\n        *\n        * Use the `indicatorDisplayTypes` property to set display types that will determine whether render all indicators as area, lines, or columns in the Financial Chart control, e.g.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorDisplayTypes=\"line\" />\n        * ```\n        */\n        get: function () {\n            if (this._indicatorDisplayTypes === null) {\n                var coll = new IgrIndicatorDisplayTypeCollection();\n                var innerColl = this.i.qe;\n                if (!innerColl) {\n                    innerColl = new IndicatorDisplayTypeCollection_internal();\n                }\n                this._indicatorDisplayTypes = coll._fromInner(innerColl);\n                this.i.qe = innerColl;\n            }\n            return this._indicatorDisplayTypes;\n        },\n        set: function (v) {\n            if (this._indicatorDisplayTypes !== null) {\n                this._indicatorDisplayTypes._setSyncTarget(null);\n                this._indicatorDisplayTypes = null;\n            }\n            var coll = new IgrIndicatorDisplayTypeCollection();\n            this._indicatorDisplayTypes = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(IndicatorDisplayType_$type);\n            var innerColl = this.i.qe;\n            if (!innerColl) {\n                innerColl = new IndicatorDisplayTypeCollection_internal();\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._indicatorDisplayTypes._setSyncTarget(syncColl);\n            this.i.qe = innerColl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorPeriod\", {\n        /**\n         * The period of financial indicators, where applicable.\n        *\n        * The `indicatorPeriod` property applies to only the `BollingerBands` overlay as well as to these indicators types: `AverageDirectionalIndex`, `AverageTrueRange`, `BollingerBandWidth`, `ChaikinVolatility`, `CommodityChannelIndex`, `DetrendedPriceOscillator`, `FastStochasticOscillator`, `ForceIndex`, `FullStochasticOscillator`, `MoneyFlowIndex`, `IgrPriceChannelOverlay`, `RateOfChangeAndMomentum`, `RelativeStrengthIndex`, `SlowStochasticOscillator`, `StandardDeviation`, `StochRSI`, `TRIX`, `WilliamsPercentR`\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorPeriod={8} />\n        * ```\n        */\n        get: function () {\n            return this.i.s6;\n        },\n        set: function (v) {\n            this.i.s6 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorMultiplier\", {\n        /**\n         * The multiplier of financial indicators, where applicable.\n        *\n        * The `indicatorMultiplier` property applies to only to BollingerBandWidth indicator type.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorMultiplier= {8} />\n        * ```\n        */\n        get: function () {\n            return this.i.sg;\n        },\n        set: function (v) {\n            this.i.sg = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorSmoothingPeriod\", {\n        /**\n         * The smoothing period of financial indicators, where applicable.\n        *\n        * The `indicatorSmoothingPeriod` property applies to only to `FullStochasticOscillator` indicator type.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorSmoothingPeriod={8}     />\n        * ```\n        */\n        get: function () {\n            return this.i.s9;\n        },\n        set: function (v) {\n            this.i.s9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorShortPeriod\", {\n        /**\n         * The short period of financial indicators, where applicable.\n        *\n        * The `indicatorShortPeriod` property applies only to these indicator types:\n        *\n        * -   AbsoluteVolumeOscillator,\n        * -   ChaikinOscillator,\n        * -   MovingAverageConvergenceDivergence,\n        * -   PercentagePriceOscillator,\n        * -   PercentageVolumeOscillator,\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorShortPeriod={8} />\n        * ```\n        */\n        get: function () {\n            return this.i.s7;\n        },\n        set: function (v) {\n            this.i.s7 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorLongPeriod\", {\n        /**\n         * The long period of financial indicators, where applicable.\n        *\n        * The `indicatorLongPeriod` property applies only to these indicator types:\n        *\n        * -   AbsoluteVolumeOscillator,\n        * -   ChaikinOscillator,\n        * -   MovingAverageConvergenceDivergence,\n        * -   PercentagePriceOscillator,\n        * -   PercentageVolumeOscillator,\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorLongPeriod={8} />\n        * ```\n        */\n        get: function () {\n            return this.i.s5;\n        },\n        set: function (v) {\n            this.i.s5 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"indicatorSignalPeriod\", {\n        /**\n         * The signal period of financial indicators, where applicable.\n        *\n        * The `indicatorSignalPeriod` property applies to only to MovingAverageConvergenceDivergence indicator type.\n        *\n        * ```ts\n        * <IgrFinancialChart\n        *     width=\"100%\"\n        *     height=\"400px\"\n        *     dataSource={this.data}\n        * \tindicatorSignalPeriod ={8} />\n        * ```\n        */\n        get: function () {\n            return this.i.s8;\n        },\n        set: function (v) {\n            this.i.s8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"rangeSelectorOptions\", {\n        /**\n         * A FinancialChartRangeSelectorOptionCollection containing the available range selector options on the toolbar.\n        */\n        get: function () {\n            if (this._rangeSelectorOptions === null) {\n                var coll = new IgrFinancialChartRangeSelectorOptionCollection();\n                var innerColl = this.i.pk;\n                if (!innerColl) {\n                    innerColl = new FinancialChartRangeSelectorOptionCollection_internal(0);\n                }\n                this._rangeSelectorOptions = coll._fromInner(innerColl);\n                this.i.pk = innerColl;\n            }\n            return this._rangeSelectorOptions;\n        },\n        set: function (v) {\n            if (this._rangeSelectorOptions !== null) {\n                this._rangeSelectorOptions._setSyncTarget(null);\n                this._rangeSelectorOptions = null;\n            }\n            var coll = new IgrFinancialChartRangeSelectorOptionCollection();\n            this._rangeSelectorOptions = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(FinancialChartRangeSelectorOption_$type);\n            var innerColl = this.i.pk;\n            if (!innerColl) {\n                innerColl = new FinancialChartRangeSelectorOptionCollection_internal(0);\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._rangeSelectorOptions._setSyncTarget(syncColl);\n            this.i.pk = innerColl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"customIndicatorNames\", {\n        /**\n         * The names of custom indicators to add to the chart.\n         * When CustomIndicatorNames is set, the ApplyCustomIndicators event will be raised for each custom indicator name.\n        */\n        get: function () {\n            if (this._customIndicatorNames === null) {\n                var coll = new IgrCustomIndicatorNameCollection();\n                var innerColl = this.i.customIndicatorNames;\n                if (!innerColl) {\n                    innerColl = new CustomIndicatorNameCollection_internal(0);\n                }\n                this._customIndicatorNames = coll._fromInner(innerColl);\n                this.i.customIndicatorNames = innerColl;\n            }\n            return this._customIndicatorNames;\n        },\n        set: function (v) {\n            if (this._customIndicatorNames !== null) {\n                this._customIndicatorNames._setSyncTarget(null);\n                this._customIndicatorNames = null;\n            }\n            var coll = new IgrCustomIndicatorNameCollection();\n            this._customIndicatorNames = coll._fromOuter(v);\n            var syncColl = new SyncableObservableCollection$1(String_$type);\n            var innerColl = this.i.customIndicatorNames;\n            if (!innerColl) {\n                innerColl = new CustomIndicatorNameCollection_internal(0);\n            }\n            syncColl._inner = innerColl;\n            syncColl.clear();\n            this._customIndicatorNames._setSyncTarget(syncColl);\n            this.i.customIndicatorNames = innerColl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"isVerticalZoomEnabled\", {\n        get: function () {\n            return this.i.bw;\n        },\n        set: function (v) {\n            this.i.bw = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"zoomSliderXAxisMajorStroke\", {\n        /**\n         * Gets or sets stroke brush of major gridlines on x-axis of the zoom slider pane\n        */\n        get: function () {\n            return brushToString(this.i.xb);\n        },\n        set: function (v) {\n            this.i.xb = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"zoomSliderXAxisMajorStrokeThickness\", {\n        /**\n         * Gets or sets thickness of major gridlines on x-axis of the zoom slider pane\n        */\n        get: function () {\n            return this.i.sr;\n        },\n        set: function (v) {\n            this.i.sr = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"isLegendVisible\", {\n        /**\n         * Gets or sets weather or not a legend is visible between toolbar and chart's plot area\n        */\n        get: function () {\n            return this.i.rg;\n        },\n        set: function (v) {\n            this.i.rg = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"xAxisMinimumValue\", {\n        /**\n         * Gets or sets minimum value on x-axis\n        */\n        get: function () {\n            return this.i.r4;\n        },\n        set: function (v) {\n            this.i.r4 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialChart.prototype, \"xAxisMaximumValue\", {\n        /**\n         * Gets or sets maximum value on x-axis\n        */\n        get: function () {\n            return this.i.r3;\n        },\n        set: function (v) {\n            this.i.r3 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n * Called by the UI framework to provide a UI container for rendering this control.\n\r\n* @param container  * The UI container element.\n*/\n    IgrFinancialChart.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    IgrFinancialChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.gr(source_, index, newItem);\n    };\n    IgrFinancialChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.gs(source_, index, oldItem);\n    };\n    IgrFinancialChart.prototype.notifyClearItems = function (source_) {\n        this.i.gq(source_);\n    };\n    IgrFinancialChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.gu(source_, index, oldItem, newItem);\n    };\n    /**\n     * Returns visuals as a serialized string.\n    \r\n    */\n    IgrFinancialChart.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.tv();\n        return (iv);\n    };\n    Object.defineProperty(IgrFinancialChart.prototype, \"applyCustomIndicators\", {\n        /**\n         * Event raised by the chart when custom indicator data is needed from the application.\n         * During series rendering, event will be raised once for each value in the CustomIndicatorNames collection.\n        */\n        get: function () {\n            return this._applyCustomIndicators;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._applyCustomIndicators_wrapped !== null) {\n                this.i.applyCustomIndicators = delegateRemove(this.i.applyCustomIndicators, this._applyCustomIndicators_wrapped);\n                this._applyCustomIndicators_wrapped = null;\n                this._applyCustomIndicators = null;\n            }\n            this._applyCustomIndicators = ev;\n            this._applyCustomIndicators_wrapped = function (o, e) {\n                var outerArgs = new IgrFinancialChartCustomIndicatorArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeApplyCustomIndicators) {\n                    _this.beforeApplyCustomIndicators(_this, outerArgs);\n                }\n                if (_this._applyCustomIndicators) {\n                    _this._applyCustomIndicators(_this, outerArgs);\n                }\n            };\n            this.i.applyCustomIndicators = delegateCombine(this.i.applyCustomIndicators, this._applyCustomIndicators_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrFinancialChart;\n}(IgrXYChart));\nexport { IgrFinancialChart };\n//# sourceMappingURL=igr-financial-chart.js.map\n"]},"metadata":{},"sourceType":"module"}