{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { XamDoughnutChart } from './XamDoughnutChart';\nimport { ensureBool, fromPoint, CollectionAdapter, initializePropertiesFromCss, NamePatcher, isValidProp, getModifiedProps, toSpinal } from \"igniteui-react-core\";\nimport { Style } from \"igniteui-react-core\";\nimport { IgrSliceClickEventArgs } from \"./igr-slice-click-event-args\";\nimport { IgrHoleDimensionsChangedEventArgs } from \"./igr-hole-dimensions-changed-event-args\";\nimport { RingSeriesBase } from \"./RingSeriesBase\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { IgrRingSeriesCollection } from \"./igr-ring-series-collection\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { ContentChildrenManager } from \"igniteui-react-core\";\n/**\n * Represents concentric circles divided on arcs  depending on data.\n*/\n\nvar IgrDoughnutChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrDoughnutChart, _super);\n\n  function IgrDoughnutChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._contentChildren = null;\n    _this._contentChildrenActual = null;\n    _this._contentChildrenMap = null;\n    _this._contentChildrenUnresolved = 0;\n    /**\n     * The series actually present in the chart. Do not directly modify this array.\n     * This array's contents can be modified by causing Angular to reproject the child content.\n     * Or adding and removing series from the manual series collection on the series property.\n     */\n\n    _this.actualSeries = [];\n    _this._seriesAdapter = null;\n    _this._series = null;\n    _this._defaultTooltips = null;\n    _this._uniqueTooltipId = 0;\n    _this._initialized = false;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._sliceClick = null;\n    _this._sliceClick_wrapped = null;\n    _this._holeDimensionsChanged = null;\n    _this._holeDimensionsChanged_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._tooltipRef = _this._tooltipRef.bind(_this);\n    _this._activeTooltipElements = new Map();\n    _this._activeTooltips = new Map();\n    _this._currentTooltips = [];\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n    var container = null;\n\n    if (document) {\n      container = document.createElement(\"div\");\n      container.style.display = \"block\";\n      container.style.width = \"100%\";\n      container.style.height = \"100%\";\n    }\n\n    var root;\n    root = container;\n    _this._renderer = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this.container = _this._renderer.getWrapper(container);\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    _this._wrapper = _this._renderer;\n    var chart = _this.i;\n    _this._chart = chart;\n    chart.provideContainer(_this._renderer);\n\n    _this._renderer.addSizeWatcher(function () {\n      _this._chart.notifyResized();\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(IgrDoughnutChart.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDoughnutChart.prototype._updateContentChildren = function () {\n    this.contentSeries = [];\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (RingSeriesBase.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentSeries.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._seriesAdapter !== null) {\n      this._seriesAdapter.notifyContentChanged();\n    }\n  };\n\n  IgrDoughnutChart.prototype._tooltipRef = function (t) {\n    //console.log(t);\n    if (t === null) {\n      return;\n    }\n\n    if (t.currentOwner && t.currentOwner.tooltipTemplate) {\n      t.template = t.currentOwner.tooltipTemplate;\n    }\n\n    this._activeTooltips.set(t.currentOwner, t);\n  };\n\n  IgrDoughnutChart.prototype.render = function () {\n    // if (!this._childrenDiffer(this.props.children)) {\n    // \tlet div = React.createElement(\"div\", {\n    // \t\tref: (ref) => {\n    // \t\t\tthis._elRef = ref;\n    // \t\t},\n    // \t\tchildren: this.props.children\n    // \t});\n    // \treturn div;\n    // } else {\n    var children = this._contentChildrenManager.getChildren(this.props.children);\n\n    if (this._currentTooltips && this._currentTooltips.length > 0) {\n      for (var i = 0; i < this._currentTooltips.length; i++) {\n        var t = this._currentTooltips[i];\n\n        if (this._activeTooltipElements.has(t)) {\n          children.push(this._activeTooltipElements.get(t));\n        } else {\n          if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n            continue;\n          }\n\n          var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n          var tEle = React.createElement(Tooltip, {\n            ref: this._tooltipRef,\n            key: this._currentTooltips[i].key,\n            owner: this._currentTooltips[i]\n          });\n          var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n\n          this._activeTooltipElements.set(t, portal);\n\n          children.push(portal);\n        }\n      }\n    }\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-doughnut-chart igr-doughnut-chart\",\n      ref: this._getMainRef,\n      children: children\n    });\n    return div; //}\n  };\n\n  IgrDoughnutChart.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          {\n            this[p] = this.props[p];\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this.container.getNativeElement());\n\n    this._chart.notifyResized();\n\n    this.initializeContent();\n  };\n\n  IgrDoughnutChart.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrDoughnutChart.prototype._getMainRef = function (div) {\n    this._elRef = div;\n  };\n\n  IgrDoughnutChart.prototype.destroy = function () {\n    this._chart.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrDoughnutChart.prototype.initializeContent = function () {\n    var _this = this;\n\n    this._updateContentChildren();\n\n    this._seriesAdapter = new CollectionAdapter(this.contentSeries, this.i.series, this.actualSeries, function (c) {\n      return c.i;\n    }, function (i) {\n      i.owner = _this; // (<any>i)._provideRenderer(this._dataSource);\n\n      if (_this.container && _this.container.getNativeElement().parentElement) {\n        i._styling(_this.container.getNativeElement(), _this, _this);\n      }\n\n      _this._ensureDefaultTooltip(i);\n\n      _this._ensureTooltipCreated(i); //(<any>i)._provideRenderer(this._wrapper); \n\n    }, function (i) {//(<any>i)._provideRenderer(null);\n    });\n\n    this._styling(this.container.getNativeElement(), this);\n\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        currSeries[i]._styling(this.container.getNativeElement(), this, this);\n      }\n    }\n\n    this.i.notifyResized();\n  };\n\n  IgrDoughnutChart.prototype.componentWillUnmount = function () {\n    //this._grid.destroy();\n    this.destroy();\n  };\n\n  IgrDoughnutChart.prototype.onImplementationCreated = function () {};\n\n  IgrDoughnutChart.prototype.createImplementation = function () {\n    return new XamDoughnutChart();\n  };\n\n  Object.defineProperty(IgrDoughnutChart.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDoughnutChart.prototype.createSeriesComponent = function (type) {\n    if (TypeRegistrar.isRegistered(type)) {\n      var s = TypeRegistrar.create(type);\n      s.owner = this;\n\n      s._provideRenderer(this._wrapper);\n\n      return s;\n    } else {\n      //we shouldn't get here, hopefully.\n      throw Error(\"series type not loaded: \" + type);\n    }\n  };\n\n  Object.defineProperty(IgrDoughnutChart.prototype, \"series\", {\n    /**\n     * A collection or manually added series for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._series === null) {\n        var coll = new IgrRingSeriesCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._seriesAdapter.addManualItem(e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._seriesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._series = coll;\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDoughnutChart.prototype._ensureTooltipCreated = function (series) {\n    if (series.i.toolTip == null) {\n      var tooltip = this.createTooltip();\n      var ele = tooltip;\n\n      if (tooltip == null) {\n        return;\n      }\n\n      series._tooltipContent = tooltip; //(<any>tooltip.instance).template = this._tooltipTemplate;\n\n      series.i.toolTip = this.createWrapper(tooltip);\n\n      if (this._activeTooltips.has(ele)) {\n        var tCont = this._activeTooltips.get(ele);\n\n        tCont.template = ele.tooltipTemplate;\n      }\n    }\n  };\n\n  IgrDoughnutChart.prototype.createWrapper = function (ele) {\n    var wrapper = new ReactWrapper(ele, this._wrapper);\n    wrapper.updateToolTip = ele.updateToolTip;\n    wrapper.hideToolTip = ele.hideToolTip;\n\n    if (this._activeTooltips.has(ele)) {\n      var tCont = this._activeTooltips.get(ele);\n\n      tCont.template = ele.tooltipTemplate;\n    }\n\n    return wrapper;\n  };\n\n  IgrDoughnutChart.prototype._ensureDefaultTooltip = function (series) {\n    if (this._defaultTooltips == null) {\n      return;\n    }\n\n    this._defaultTooltips.instance[\"ensureDefaultTooltip\"](series);\n  };\n\n  IgrDoughnutChart.prototype._onDefaultTooltipsReady = function (cr) {\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        if (currSeries[i].showDefaultTooltip) {\n          this._ensureDefaultTooltip(currSeries[i]);\n        }\n      }\n    }\n  };\n\n  IgrDoughnutChart.prototype.createTooltip = function () {\n    var wrapper = this._wrapper.createElement(\"div\");\n\n    var ele = wrapper.getNativeElement();\n    ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n    this._uniqueTooltipId++;\n    this._currentTooltips = this._currentTooltips.slice(0);\n\n    this._currentTooltips.push(ele); //let element = React.createElement(Tooltip,  );\n    //let portal = ReactDOM.createPortal(element, ele);\n\n\n    var self = this;\n\n    ele.updateToolTip = function (c, isSubContent) {\n      if (c.externalObject) {\n        c = c.externalObject;\n      } else {\n        var ext = new IgrDataContext();\n        ext._implementation = c;\n        c = ext;\n      }\n\n      if (!isSubContent) {\n        if (ele.parentElement != self.container.getNativeElement()) {\n          if (ele.parentElement != null) {\n            ele.parentElement.removeChild(ele);\n          }\n\n          self.container.getNativeElement().appendChild(ele);\n        }\n      } else {\n        c.isSubContent = true;\n      }\n\n      if (self._activeTooltips.has(ele)) {\n        var t = self._activeTooltips.get(ele);\n\n        if (t.template === null && ele.tooltipTemplate !== null) {\n          t.template = ele.tooltipTemplate;\n        }\n\n        t.dataContext = c;\n      }\n\n      ele.style.display = \"block\";\n      return true;\n    };\n\n    ele.hideToolTip = function () {\n      ele.style.display = \"none\";\n    };\n\n    ele.style.display = \"none\";\n\n    this._updateTooltipState();\n\n    return ele;\n  };\n\n  IgrDoughnutChart.prototype._updateTooltipState = function () {\n    if (this._initialized) {\n      this.setState({\n        tooltips: this._currentTooltips\n      });\n    }\n  };\n\n  Object.defineProperty(IgrDoughnutChart.prototype, \"allowSliceSelection\", {\n    /**\n    * Gets or sets whether the slices can be selected.\n    */\n    get: function () {\n      return this.i.aw;\n    },\n    set: function (v) {\n      this.i.aw = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"isSurfaceInteractionDisabled\", {\n    /**\n     * Gets or sets whether all surface interactions with the plot area should be disabled.\n    */\n    get: function () {\n      return this.i.ax;\n    },\n    set: function (v) {\n      this.i.ax = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"allowSliceExplosion\", {\n    /**\n     * Gets or sets whether the slices can be exploded.\n    */\n    get: function () {\n      return this.i.av;\n    },\n    set: function (v) {\n      this.i.av = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"innerExtent\", {\n    /**\n     * Gets or sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.\n    */\n    get: function () {\n      return this.i.a3;\n    },\n    set: function (v) {\n      this.i.a3 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceFill\", {\n    /**\n     * Gets or sets the fill brush.\n    */\n    get: function () {\n      return this.i.cg ? this.i.cg.fill : null;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.cg.fill = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceStroke\", {\n    /**\n     * Gets or sets the stroke brush.\n    */\n    get: function () {\n      return this.i.cg ? this.i.cg.stroke : null;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.cg.stroke = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness.\n    */\n    get: function () {\n      return this.i.cg ? this.i.cg.strokeThickness : NaN;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.cg.strokeThickness = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceOpacity\", {\n    /**\n     * Gets or sets the opacity.\n    */\n    get: function () {\n      return this.i.cg ? this.i.cg.opacity : NaN;\n    },\n    set: function (v) {\n      this.ensureSelectedStyle();\n      this.i.cg.opacity = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDoughnutChart.prototype.ensureSelectedStyle = function () {\n    if (this.i.cg) {\n      return;\n    }\n\n    this.i.cg = new Style();\n  };\n\n  Object.defineProperty(IgrDoughnutChart.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.a4;\n    },\n    set: function (v) {\n      this.i.a4 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"actualPixelScalingRatio\", {\n    /**\n     * Resolved pixel scaling ratio. Unless explicitly overridden by the IgxDoughnutChart.PixelScalingRatioComponent property,\n     * this one returns the default ratio enforced by device. High resolution devices will initialize this property\n     * to a higher value.\n    */\n    get: function () {\n      return this.i.a1;\n    },\n    set: function (v) {\n      this.i.a1 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDoughnutChart.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrDoughnutChart.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"DoughnutChart\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Called by the UI framework to provide a UI container for rendering this control.\n  * @param container  * The UI container element.\n  */\n\n\n  IgrDoughnutChart.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n  /**\n   * Called when the control has been resized.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.notifyResized = function () {\n    this.i.notifyResized();\n  };\n  /**\n   * Gets the ID of the UI container.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.getContainerID = function () {\n    var iv = this.i.bd();\n    return iv;\n  };\n  /**\n   * Gets the center coordinates of the doughnut chart's center presenter.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.getCenterCoordinates = function () {\n    var iv = this.i.cf();\n    return fromPoint(iv);\n  };\n  /**\n   * Gets the hole radius of the doughnut chart's center presenter.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.getHoleRadius = function () {\n    var iv = this.i.a2();\n    return iv;\n  };\n  /**\n   * Use to force the doughnut chart to finish any deferred work before printing or evaluating its visual.\n   * This should only be called if the visual of the doughnut chart needs to be synchronously saved or evaluated.\n   * Calling this method too often will hinder the performance of the doughnut chart.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.flush = function () {\n    this.i.bk();\n  };\n  /**\n   * Returns the chart visuals expressed as a serialized string.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.bc();\n    return iv;\n  };\n\n  IgrDoughnutChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.bm(source_, index, newItem);\n  };\n\n  IgrDoughnutChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.bp(source_, index, oldItem, newItem);\n  };\n  /**\n   * Used to manually notify the chart that the data source has reset or cleared its items.\n  \r\n  */\n\n\n  IgrDoughnutChart.prototype.notifyClearItems = function (source_) {\n    this.i.bl(source_);\n  };\n\n  IgrDoughnutChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.bn(source_, index, oldItem);\n  };\n\n  Object.defineProperty(IgrDoughnutChart.prototype, \"sliceClick\", {\n    /**\n     * Raised when the slice is clicked.\n    */\n    get: function () {\n      return this._sliceClick;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._sliceClick_wrapped !== null) {\n        this.i.sliceClick = delegateRemove(this.i.sliceClick, this._sliceClick_wrapped);\n        this._sliceClick_wrapped = null;\n        this._sliceClick = null;\n      }\n\n      this._sliceClick = ev;\n\n      this._sliceClick_wrapped = function (o, e) {\n        var outerArgs = new IgrSliceClickEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeSliceClick) {\n          _this.beforeSliceClick(_this, outerArgs);\n        }\n\n        if (_this._sliceClick) {\n          _this._sliceClick(_this, outerArgs);\n        }\n      };\n\n      this.i.sliceClick = delegateCombine(this.i.sliceClick, this._sliceClick_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDoughnutChart.prototype, \"holeDimensionsChanged\", {\n    /**\n     * Raised when the dimensions (center point or radius) of the doughnut hole change.\n    */\n    get: function () {\n      return this._holeDimensionsChanged;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._holeDimensionsChanged_wrapped !== null) {\n        this.i.holeDimensionsChanged = delegateRemove(this.i.holeDimensionsChanged, this._holeDimensionsChanged_wrapped);\n        this._holeDimensionsChanged_wrapped = null;\n        this._holeDimensionsChanged = null;\n      }\n\n      this._holeDimensionsChanged = ev;\n\n      this._holeDimensionsChanged_wrapped = function (o, e) {\n        var outerArgs = new IgrHoleDimensionsChangedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeHoleDimensionsChanged) {\n          _this.beforeHoleDimensionsChanged(_this, outerArgs);\n        }\n\n        if (_this._holeDimensionsChanged) {\n          _this._holeDimensionsChanged(_this, outerArgs);\n        }\n      };\n\n      this.i.holeDimensionsChanged = delegateCombine(this.i.holeDimensionsChanged, this._holeDimensionsChanged_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrDoughnutChart;\n}(React.Component);\n\nexport { IgrDoughnutChart };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-doughnut-chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { XamDoughnutChart } from './XamDoughnutChart';\nimport { ensureBool, fromPoint, CollectionAdapter, initializePropertiesFromCss, NamePatcher, isValidProp, getModifiedProps, toSpinal } from \"igniteui-react-core\";\nimport { Style } from \"igniteui-react-core\";\nimport { IgrSliceClickEventArgs } from \"./igr-slice-click-event-args\";\nimport { IgrHoleDimensionsChangedEventArgs } from \"./igr-hole-dimensions-changed-event-args\";\nimport { RingSeriesBase } from \"./RingSeriesBase\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { IgrRingSeriesCollection } from \"./igr-ring-series-collection\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { ContentChildrenManager } from \"igniteui-react-core\";\n/**\n * Represents concentric circles divided on arcs  depending on data.\n*/\nvar IgrDoughnutChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrDoughnutChart, _super);\n    function IgrDoughnutChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this._contentChildren = null;\n        _this._contentChildrenActual = null;\n        _this._contentChildrenMap = null;\n        _this._contentChildrenUnresolved = 0;\n        /**\n         * The series actually present in the chart. Do not directly modify this array.\n         * This array's contents can be modified by causing Angular to reproject the child content.\n         * Or adding and removing series from the manual series collection on the series property.\n         */\n        _this.actualSeries = [];\n        _this._seriesAdapter = null;\n        _this._series = null;\n        _this._defaultTooltips = null;\n        _this._uniqueTooltipId = 0;\n        _this._initialized = false;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._sliceClick = null;\n        _this._sliceClick_wrapped = null;\n        _this._holeDimensionsChanged = null;\n        _this._holeDimensionsChanged_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._tooltipRef = _this._tooltipRef.bind(_this);\n        _this._activeTooltipElements = new Map();\n        _this._activeTooltips = new Map();\n        _this._currentTooltips = [];\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        var container = null;\n        if (document) {\n            container = document.createElement(\"div\");\n            container.style.display = \"block\";\n            container.style.width = \"100%\";\n            container.style.height = \"100%\";\n        }\n        var root;\n        root = container;\n        _this._renderer = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this.container = _this._renderer.getWrapper(container);\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        _this._wrapper = _this._renderer;\n        var chart = _this.i;\n        _this._chart = chart;\n        chart.provideContainer(_this._renderer);\n        _this._renderer.addSizeWatcher(function () {\n            _this._chart.notifyResized();\n        });\n        return _this;\n    }\n    Object.defineProperty(IgrDoughnutChart.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDoughnutChart.prototype._updateContentChildren = function () {\n        this.contentSeries = [];\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((RingSeriesBase.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentSeries.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._seriesAdapter !== null) {\n            this._seriesAdapter.notifyContentChanged();\n        }\n    };\n    IgrDoughnutChart.prototype._tooltipRef = function (t) {\n        //console.log(t);\n        if (t === null) {\n            return;\n        }\n        if (t.currentOwner &&\n            t.currentOwner.tooltipTemplate) {\n            t.template = t.currentOwner.tooltipTemplate;\n        }\n        this._activeTooltips.set(t.currentOwner, t);\n    };\n    IgrDoughnutChart.prototype.render = function () {\n        // if (!this._childrenDiffer(this.props.children)) {\n        // \tlet div = React.createElement(\"div\", {\n        // \t\tref: (ref) => {\n        // \t\t\tthis._elRef = ref;\n        // \t\t},\n        // \t\tchildren: this.props.children\n        // \t});\n        // \treturn div;\n        // } else {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        if (this._currentTooltips && this._currentTooltips.length > 0) {\n            for (var i = 0; i < this._currentTooltips.length; i++) {\n                var t = this._currentTooltips[i];\n                if (this._activeTooltipElements.has(t)) {\n                    children.push(this._activeTooltipElements.get(t));\n                }\n                else {\n                    if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n                        continue;\n                    }\n                    var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n                    var tEle = React.createElement(Tooltip, {\n                        ref: this._tooltipRef,\n                        key: this._currentTooltips[i].key,\n                        owner: this._currentTooltips[i]\n                    });\n                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n                    this._activeTooltipElements.set(t, portal);\n                    children.push(portal);\n                }\n            }\n        }\n        var div = React.createElement(\"div\", {\n            className: \"ig-doughnut-chart igr-doughnut-chart\",\n            ref: this._getMainRef,\n            children: children\n        });\n        return div;\n        //}\n    };\n    IgrDoughnutChart.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    {\n                        this[p] = this.props[p];\n                    }\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this.container.getNativeElement());\n        this._chart.notifyResized();\n        this.initializeContent();\n    };\n    IgrDoughnutChart.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrDoughnutChart.prototype._getMainRef = function (div) {\n        this._elRef = div;\n    };\n    IgrDoughnutChart.prototype.destroy = function () {\n        this._chart.destroy();\n        this._wrapper.destroy();\n    };\n    IgrDoughnutChart.prototype.initializeContent = function () {\n        var _this = this;\n        this._updateContentChildren();\n        this._seriesAdapter = new CollectionAdapter(this.contentSeries, this.i.series, this.actualSeries, function (c) { return c.i; }, function (i) {\n            i.owner = _this;\n            // (<any>i)._provideRenderer(this._dataSource);\n            if (_this.container && _this.container.getNativeElement().parentElement) {\n                i._styling(_this.container.getNativeElement(), _this, _this);\n            }\n            _this._ensureDefaultTooltip(i);\n            _this._ensureTooltipCreated(i);\n            //(<any>i)._provideRenderer(this._wrapper); \n        }, function (i) {\n            //(<any>i)._provideRenderer(null);\n        });\n        this._styling(this.container.getNativeElement(), this);\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                currSeries[i]._styling(this.container.getNativeElement(), this, this);\n            }\n        }\n        this.i.notifyResized();\n    };\n    IgrDoughnutChart.prototype.componentWillUnmount = function () {\n        //this._grid.destroy();\n        this.destroy();\n    };\n    IgrDoughnutChart.prototype.onImplementationCreated = function () {\n    };\n    IgrDoughnutChart.prototype.createImplementation = function () {\n        return new XamDoughnutChart();\n    };\n    Object.defineProperty(IgrDoughnutChart.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDoughnutChart.prototype.createSeriesComponent = function (type) {\n        if (TypeRegistrar.isRegistered(type)) {\n            var s = TypeRegistrar.create(type);\n            s.owner = this;\n            s._provideRenderer(this._wrapper);\n            return s;\n        }\n        else {\n            //we shouldn't get here, hopefully.\n            throw Error(\"series type not loaded: \" + type);\n        }\n    };\n    Object.defineProperty(IgrDoughnutChart.prototype, \"series\", {\n        /**\n         * A collection or manually added series for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._series === null) {\n                var coll = new IgrRingSeriesCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._seriesAdapter.addManualItem(e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._seriesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._series = coll;\n            }\n            return this._series;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDoughnutChart.prototype._ensureTooltipCreated = function (series) {\n        if (series.i.toolTip == null) {\n            var tooltip = this.createTooltip();\n            var ele = tooltip;\n            if (tooltip == null) {\n                return;\n            }\n            series._tooltipContent = tooltip;\n            //(<any>tooltip.instance).template = this._tooltipTemplate;\n            series.i.toolTip = this.createWrapper(tooltip);\n            if (this._activeTooltips.has(ele)) {\n                var tCont = this._activeTooltips.get(ele);\n                tCont.template = ele.tooltipTemplate;\n            }\n        }\n    };\n    IgrDoughnutChart.prototype.createWrapper = function (ele) {\n        var wrapper = new ReactWrapper(ele, this._wrapper);\n        wrapper.updateToolTip = ele.updateToolTip;\n        wrapper.hideToolTip = ele.hideToolTip;\n        if (this._activeTooltips.has(ele)) {\n            var tCont = this._activeTooltips.get(ele);\n            tCont.template = ele.tooltipTemplate;\n        }\n        return wrapper;\n    };\n    IgrDoughnutChart.prototype._ensureDefaultTooltip = function (series) {\n        if (this._defaultTooltips == null) {\n            return;\n        }\n        this._defaultTooltips.instance[\"ensureDefaultTooltip\"](series);\n    };\n    IgrDoughnutChart.prototype._onDefaultTooltipsReady = function (cr) {\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                if (currSeries[i].showDefaultTooltip) {\n                    this._ensureDefaultTooltip(currSeries[i]);\n                }\n            }\n        }\n    };\n    IgrDoughnutChart.prototype.createTooltip = function () {\n        var wrapper = this._wrapper.createElement(\"div\");\n        var ele = wrapper.getNativeElement();\n        ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n        this._uniqueTooltipId++;\n        this._currentTooltips = this._currentTooltips.slice(0);\n        this._currentTooltips.push(ele);\n        //let element = React.createElement(Tooltip,  );\n        //let portal = ReactDOM.createPortal(element, ele);\n        var self = this;\n        ele.updateToolTip = function (c, isSubContent) {\n            if (c.externalObject) {\n                c = c.externalObject;\n            }\n            else {\n                var ext = new IgrDataContext();\n                ext._implementation = c;\n                c = ext;\n            }\n            if (!isSubContent) {\n                if (ele.parentElement != self.container.getNativeElement()) {\n                    if (ele.parentElement != null) {\n                        ele.parentElement.removeChild(ele);\n                    }\n                    self.container.getNativeElement().appendChild(ele);\n                }\n            }\n            else {\n                c.isSubContent = true;\n            }\n            if (self._activeTooltips.has(ele)) {\n                var t = self._activeTooltips.get(ele);\n                if (t.template === null &&\n                    ele.tooltipTemplate !== null) {\n                    t.template = ele.tooltipTemplate;\n                }\n                t.dataContext = c;\n            }\n            ele.style.display = \"block\";\n            return true;\n        };\n        ele.hideToolTip = function () {\n            ele.style.display = \"none\";\n        };\n        ele.style.display = \"none\";\n        this._updateTooltipState();\n        return ele;\n    };\n    IgrDoughnutChart.prototype._updateTooltipState = function () {\n        if (this._initialized) {\n            this.setState({ tooltips: this._currentTooltips });\n        }\n    };\n    Object.defineProperty(IgrDoughnutChart.prototype, \"allowSliceSelection\", {\n        /**\n     * Gets or sets whether the slices can be selected.\n    */\n        get: function () {\n            return this.i.aw;\n        },\n        set: function (v) {\n            this.i.aw = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"isSurfaceInteractionDisabled\", {\n        /**\n         * Gets or sets whether all surface interactions with the plot area should be disabled.\n        */\n        get: function () {\n            return this.i.ax;\n        },\n        set: function (v) {\n            this.i.ax = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"allowSliceExplosion\", {\n        /**\n         * Gets or sets whether the slices can be exploded.\n        */\n        get: function () {\n            return this.i.av;\n        },\n        set: function (v) {\n            this.i.av = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"innerExtent\", {\n        /**\n         * Gets or sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.\n        */\n        get: function () {\n            return this.i.a3;\n        },\n        set: function (v) {\n            this.i.a3 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceFill\", {\n        /**\n         * Gets or sets the fill brush.\n        */\n        get: function () {\n            return this.i.cg ? this.i.cg.fill : null;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.cg.fill = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceStroke\", {\n        /**\n         * Gets or sets the stroke brush.\n        */\n        get: function () {\n            return this.i.cg ? this.i.cg.stroke : null;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.cg.stroke = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness.\n        */\n        get: function () {\n            return this.i.cg ? this.i.cg.strokeThickness : NaN;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.cg.strokeThickness = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"selectedSliceOpacity\", {\n        /**\n         * Gets or sets the opacity.\n        */\n        get: function () {\n            return this.i.cg ? this.i.cg.opacity : NaN;\n        },\n        set: function (v) {\n            this.ensureSelectedStyle();\n            this.i.cg.opacity = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDoughnutChart.prototype.ensureSelectedStyle = function () {\n        if (this.i.cg) {\n            return;\n        }\n        this.i.cg = new Style();\n    };\n    Object.defineProperty(IgrDoughnutChart.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.a4;\n        },\n        set: function (v) {\n            this.i.a4 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"actualPixelScalingRatio\", {\n        /**\n         * Resolved pixel scaling ratio. Unless explicitly overridden by the IgxDoughnutChart.PixelScalingRatioComponent property,\n         * this one returns the default ratio enforced by device. High resolution devices will initialize this property\n         * to a higher value.\n        */\n        get: function () {\n            return this.i.a1;\n        },\n        set: function (v) {\n            this.i.a1 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDoughnutChart.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrDoughnutChart.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"DoughnutChart\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Called by the UI framework to provide a UI container for rendering this control.\n\r\n* @param container  * The UI container element.\n*/\n    IgrDoughnutChart.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    /**\n     * Called when the control has been resized.\n    \r\n    */\n    IgrDoughnutChart.prototype.notifyResized = function () {\n        this.i.notifyResized();\n    };\n    /**\n     * Gets the ID of the UI container.\n    \r\n    */\n    IgrDoughnutChart.prototype.getContainerID = function () {\n        var iv = this.i.bd();\n        return (iv);\n    };\n    /**\n     * Gets the center coordinates of the doughnut chart's center presenter.\n    \r\n    */\n    IgrDoughnutChart.prototype.getCenterCoordinates = function () {\n        var iv = this.i.cf();\n        return fromPoint(iv);\n    };\n    /**\n     * Gets the hole radius of the doughnut chart's center presenter.\n    \r\n    */\n    IgrDoughnutChart.prototype.getHoleRadius = function () {\n        var iv = this.i.a2();\n        return (iv);\n    };\n    /**\n     * Use to force the doughnut chart to finish any deferred work before printing or evaluating its visual.\n     * This should only be called if the visual of the doughnut chart needs to be synchronously saved or evaluated.\n     * Calling this method too often will hinder the performance of the doughnut chart.\n    \r\n    */\n    IgrDoughnutChart.prototype.flush = function () {\n        this.i.bk();\n    };\n    /**\n     * Returns the chart visuals expressed as a serialized string.\n    \r\n    */\n    IgrDoughnutChart.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.bc();\n        return (iv);\n    };\n    IgrDoughnutChart.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.bm(source_, index, newItem);\n    };\n    IgrDoughnutChart.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.bp(source_, index, oldItem, newItem);\n    };\n    /**\n     * Used to manually notify the chart that the data source has reset or cleared its items.\n    \r\n    */\n    IgrDoughnutChart.prototype.notifyClearItems = function (source_) {\n        this.i.bl(source_);\n    };\n    IgrDoughnutChart.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.bn(source_, index, oldItem);\n    };\n    Object.defineProperty(IgrDoughnutChart.prototype, \"sliceClick\", {\n        /**\n         * Raised when the slice is clicked.\n        */\n        get: function () {\n            return this._sliceClick;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._sliceClick_wrapped !== null) {\n                this.i.sliceClick = delegateRemove(this.i.sliceClick, this._sliceClick_wrapped);\n                this._sliceClick_wrapped = null;\n                this._sliceClick = null;\n            }\n            this._sliceClick = ev;\n            this._sliceClick_wrapped = function (o, e) {\n                var outerArgs = new IgrSliceClickEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeSliceClick) {\n                    _this.beforeSliceClick(_this, outerArgs);\n                }\n                if (_this._sliceClick) {\n                    _this._sliceClick(_this, outerArgs);\n                }\n            };\n            this.i.sliceClick = delegateCombine(this.i.sliceClick, this._sliceClick_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDoughnutChart.prototype, \"holeDimensionsChanged\", {\n        /**\n         * Raised when the dimensions (center point or radius) of the doughnut hole change.\n        */\n        get: function () {\n            return this._holeDimensionsChanged;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._holeDimensionsChanged_wrapped !== null) {\n                this.i.holeDimensionsChanged = delegateRemove(this.i.holeDimensionsChanged, this._holeDimensionsChanged_wrapped);\n                this._holeDimensionsChanged_wrapped = null;\n                this._holeDimensionsChanged = null;\n            }\n            this._holeDimensionsChanged = ev;\n            this._holeDimensionsChanged_wrapped = function (o, e) {\n                var outerArgs = new IgrHoleDimensionsChangedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeHoleDimensionsChanged) {\n                    _this.beforeHoleDimensionsChanged(_this, outerArgs);\n                }\n                if (_this._holeDimensionsChanged) {\n                    _this._holeDimensionsChanged(_this, outerArgs);\n                }\n            };\n            this.i.holeDimensionsChanged = delegateCombine(this.i.holeDimensionsChanged, this._holeDimensionsChanged_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrDoughnutChart;\n}(React.Component));\nexport { IgrDoughnutChart };\n//# sourceMappingURL=igr-doughnut-chart.js.map\n"]},"metadata":{},"sourceType":"module"}