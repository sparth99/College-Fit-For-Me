{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { AxisLabelVisualDataList } from \"./AxisLabelVisualDataList\";\nimport { ChartTitleVisualData } from \"./ChartTitleVisualData\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar AxisVisualData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(AxisVisualData, _super);\n\n  function AxisVisualData() {\n    var _this = _super.call(this) || this;\n\n    _this._name = null;\n    _this._type = null;\n    _this._viewport = null;\n    _this._tickMarksLength = 0;\n    _this._tickMarks = null;\n    _this._labels = null;\n    _this._axisLine = null;\n    _this._majorLines = null;\n    _this._minorLines = null;\n    _this._strips = null;\n    _this._labelsPlotArea = null;\n    _this._labelsViewport = null;\n    _this._title = null;\n    _this._annotationBackings = null;\n    _this.tickMarksLength = 0;\n    _this.labels = new AxisLabelVisualDataList();\n    _this.title = new ChartTitleVisualData();\n    return _this;\n  }\n\n  Object.defineProperty(AxisVisualData.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    set: function (a) {\n      this._name = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"type\", {\n    get: function () {\n      return this._type;\n    },\n    set: function (a) {\n      this._type = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"viewport\", {\n    get: function () {\n      return this._viewport;\n    },\n    set: function (a) {\n      this._viewport = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"tickMarksLength\", {\n    get: function () {\n      return this._tickMarksLength;\n    },\n    set: function (a) {\n      this._tickMarksLength = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"tickMarks\", {\n    get: function () {\n      return this._tickMarks;\n    },\n    set: function (a) {\n      this._tickMarks = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"labels\", {\n    get: function () {\n      return this._labels;\n    },\n    set: function (a) {\n      this._labels = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"axisLine\", {\n    get: function () {\n      return this._axisLine;\n    },\n    set: function (a) {\n      this._axisLine = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"majorLines\", {\n    get: function () {\n      return this._majorLines;\n    },\n    set: function (a) {\n      this._majorLines = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"minorLines\", {\n    get: function () {\n      return this._minorLines;\n    },\n    set: function (a) {\n      this._minorLines = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"strips\", {\n    get: function () {\n      return this._strips;\n    },\n    set: function (a) {\n      this._strips = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"labelsPlotArea\", {\n    get: function () {\n      return this._labelsPlotArea;\n    },\n    set: function (a) {\n      this._labelsPlotArea = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"labelsViewport\", {\n    get: function () {\n      return this._labelsViewport;\n    },\n    set: function (a) {\n      this._labelsViewport = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"title\", {\n    get: function () {\n      return this._title;\n    },\n    set: function (a) {\n      this._title = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisVisualData.prototype, \"annotationBackings\", {\n    get: function () {\n      return this._annotationBackings;\n    },\n    set: function (a) {\n      this._annotationBackings = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AxisVisualData.prototype.p = function () {\n    var e_1, _a, e_2, _b;\n\n    var a = true;\n\n    if (Base.equalsStatic(this.type, \"NumericYAxis\") || Base.equalsStatic(this.type, \"CategoryYAxis\") || Base.equalsStatic(this.type, \"PercentChangeYAxis\")) {\n      a = false;\n    }\n\n    try {\n      for (var _c = tslib_1.__values(fromEnum(this.labels)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var b = _d.value;\n        b.h(this.labelsViewport, a);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.tickMarks.scaleByViewport(this.labelsViewport);\n    this.axisLine.scaleByViewport(this.labelsViewport);\n\n    if (this.title != null) {\n      this.title.h(this.labelsViewport);\n    }\n\n    this.majorLines.scaleByViewport(this.viewport);\n    this.minorLines.scaleByViewport(this.viewport);\n    this.strips.scaleByViewport(this.viewport);\n\n    if (this.annotationBackings != null) {\n      try {\n        for (var _e = tslib_1.__values(fromEnum(this.annotationBackings)), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var c = _f.value;\n          c.scaleByViewport(this.labelsViewport);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  };\n\n  AxisVisualData.prototype.serialize = function () {\n    var a = new StringBuilder(0);\n    a.u(\"{\");\n    a.u(\"name: \\\"\" + this.name + \"\\\",\");\n    a.u(\"type: \\\"\" + this.type + \"\\\", \");\n    a.u(\"tickMarksLength: \\\"\" + this.tickMarksLength.toString() + \"\\\", \");\n    a.u(\"viewport: \" + this.viewport.serialize() + \", \");\n    a.u(\"labelsViewport: \" + this.labelsViewport.serialize() + \", \");\n\n    if (this.labelsPlotArea != null) {\n      a.u(\"labelsPlotArea: \" + this.labelsPlotArea.serialize() + \", \");\n    }\n\n    a.u(\"labels: [\");\n\n    for (var b = 0; b < this.labels.count; b++) {\n      if (b != 0) {\n        a.l(\", \");\n      }\n\n      a.l(this.labels._inner[b].serialize());\n    }\n\n    a.u(\"],\");\n\n    if (this.title != null) {\n      a.u(\"title: \" + (this.title != null ? this.title.serialize() : \"null\") + \", \");\n    }\n\n    a.u(\"axisLine: \" + (this.axisLine != null ? this.axisLine.serialize() : \"null\") + \", \");\n    a.u(\"tickMarks: \" + (this.tickMarks != null ? this.tickMarks.serialize() : \"null\") + \", \");\n\n    if (this.annotationBackings != null) {\n      a.u(\"annotationBackings: [\");\n\n      for (var c = 0; c < this.annotationBackings.count; c++) {\n        if (c != 0) {\n          a.l(\", \");\n        }\n\n        a.l(this.annotationBackings._inner[c].serialize());\n      }\n\n      a.u(\"],\");\n    }\n\n    if (this.axisLine != null) {\n      a.u(\"majorLines: \" + (this.majorLines != null ? this.majorLines.serialize() : \"null\") + \", \");\n      a.u(\"minorLines: \" + (this.minorLines != null ? this.minorLines.serialize() : \"null\") + \", \");\n      a.u(\"strips: \" + (this.strips != null ? this.strips.serialize() : \"null\"));\n    }\n\n    a.u(\"}\");\n    return a.toString();\n  };\n\n  AxisVisualData.$t = markType(AxisVisualData, 'AxisVisualData');\n  return AxisVisualData;\n}(Base);\n\nexport { AxisVisualData };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/AxisVisualData.ts"],"names":[],"mappings":"AAAA;;;;;;;AAOA,SAAS,IAAT,EAAmH,QAAnH,EAAmI,QAAnI,QAAmJ,qBAAnJ;AAGA,SAAS,uBAAT,QAAwC,2BAAxC;AACA,SAAS,oBAAT,QAAqC,wBAArC;AAIA,SAAS,aAAT,QAA8B,qBAA9B;AAEA;;;;AAGA,IAAA,cAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAEnC,WAAA,cAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAMQ,IAAA,KAAA,CAAA,KAAA,GAAgB,IAAhB;AAOA,IAAA,KAAA,CAAA,KAAA,GAAgB,IAAhB;AAOA,IAAA,KAAA,CAAA,SAAA,GAAsB,IAAtB;AAOA,IAAA,KAAA,CAAA,gBAAA,GAA2B,CAA3B;AAOA,IAAA,KAAA,CAAA,UAAA,GAAkC,IAAlC;AAOA,IAAA,KAAA,CAAA,OAAA,GAAmC,IAAnC;AAOA,IAAA,KAAA,CAAA,SAAA,GAAiC,IAAjC;AAOA,IAAA,KAAA,CAAA,WAAA,GAAmC,IAAnC;AAOA,IAAA,KAAA,CAAA,WAAA,GAAmC,IAAnC;AAOA,IAAA,KAAA,CAAA,OAAA,GAA+B,IAA/B;AAOA,IAAA,KAAA,CAAA,eAAA,GAA4B,IAA5B;AAOA,IAAA,KAAA,CAAA,eAAA,GAA4B,IAA5B;AAOA,IAAA,KAAA,CAAA,MAAA,GAA+B,IAA/B;AAOA,IAAA,KAAA,CAAA,mBAAA,GAAmD,IAAnD;AA/FP,IAAA,KAAI,CAAC,eAAL,GAAuB,CAAvB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAI,uBAAJ,EAAd;AACA,IAAA,KAAI,CAAC,KAAL,GAAa,IAAI,oBAAJ,EAAb;;AACA;;AAED,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;SAAR,YAAA;AACC,aAAO,KAAK,KAAZ;AACA,KAFO;SAGR,UAAS,CAAT,EAAkB;AACjB,WAAK,KAAL,GAAa,CAAb;AACA,KALO;oBAAA;;AAAA,GAAR;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;SAAR,YAAA;AACC,aAAO,KAAK,KAAZ;AACA,KAFO;SAGR,UAAS,CAAT,EAAkB;AACjB,WAAK,KAAL,GAAa,CAAb;AACA,KALO;oBAAA;;AAAA,GAAR;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;SAAZ,YAAA;AACC,aAAO,KAAK,SAAZ;AACA,KAFW;SAGZ,UAAa,CAAb,EAAwB;AACvB,WAAK,SAAL,GAAiB,CAAjB;AACA,KALW;oBAAA;;AAAA,GAAZ;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;SAAnB,YAAA;AACC,aAAO,KAAK,gBAAZ;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,gBAAL,GAAwB,CAAxB;AACA,KALkB;oBAAA;;AAAA,GAAnB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,YAAA;AACC,aAAO,KAAK,UAAZ;AACA,KAFY;SAGb,UAAc,CAAd,EAAoC;AACnC,WAAK,UAAL,GAAkB,CAAlB;AACA,KALY;oBAAA;;AAAA,GAAb;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;SAAV,YAAA;AACC,aAAO,KAAK,OAAZ;AACA,KAFS;SAGV,UAAW,CAAX,EAAqC;AACpC,WAAK,OAAL,GAAe,CAAf;AACA,KALS;oBAAA;;AAAA,GAAV;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;SAAZ,YAAA;AACC,aAAO,KAAK,SAAZ;AACA,KAFW;SAGZ,UAAa,CAAb,EAAmC;AAClC,WAAK,SAAL,GAAiB,CAAjB;AACA,KALW;oBAAA;;AAAA,GAAZ;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;SAAd,YAAA;AACC,aAAO,KAAK,WAAZ;AACA,KAFa;SAGd,UAAe,CAAf,EAAqC;AACpC,WAAK,WAAL,GAAmB,CAAnB;AACA,KALa;oBAAA;;AAAA,GAAd;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;SAAd,YAAA;AACC,aAAO,KAAK,WAAZ;AACA,KAFa;SAGd,UAAe,CAAf,EAAqC;AACpC,WAAK,WAAL,GAAmB,CAAnB;AACA,KALa;oBAAA;;AAAA,GAAd;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;SAAV,YAAA;AACC,aAAO,KAAK,OAAZ;AACA,KAFS;SAGV,UAAW,CAAX,EAAiC;AAChC,WAAK,OAAL,GAAe,CAAf;AACA,KALS;oBAAA;;AAAA,GAAV;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,gBAAJ,EAAkB;SAAlB,YAAA;AACC,aAAO,KAAK,eAAZ;AACA,KAFiB;SAGlB,UAAmB,CAAnB,EAA8B;AAC7B,WAAK,eAAL,GAAuB,CAAvB;AACA,KALiB;oBAAA;;AAAA,GAAlB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,gBAAJ,EAAkB;SAAlB,YAAA;AACC,aAAO,KAAK,eAAZ;AACA,KAFiB;SAGlB,UAAmB,CAAnB,EAA8B;AAC7B,WAAK,eAAL,GAAuB,CAAvB;AACA,KALiB;oBAAA;;AAAA,GAAlB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAAT,YAAA;AACC,aAAO,KAAK,MAAZ;AACA,KAFQ;SAGT,UAAU,CAAV,EAAiC;AAChC,WAAK,MAAL,GAAc,CAAd;AACA,KALQ;oBAAA;;AAAA,GAAT;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;SAAtB,YAAA;AACC,aAAO,KAAK,mBAAZ;AACA,KAFqB;SAGtB,UAAuB,CAAvB,EAAqD;AACpD,WAAK,mBAAL,GAA2B,CAA3B;AACA,KALqB;oBAAA;;AAAA,GAAtB;;AAMA,EAAA,cAAA,CAAA,SAAA,CAAA,CAAA,GAAA,YAAA;;;AACC,QAAI,CAAC,GAAG,IAAR;;AACA,QAAI,IAAI,CAAC,YAAL,CAAkB,KAAK,IAAvB,EAA6B,cAA7B,KAAgD,IAAI,CAAC,YAAL,CAAkB,KAAK,IAAvB,EAA6B,eAA7B,CAAhD,IAAiG,IAAI,CAAC,YAAL,CAAkB,KAAK,IAAvB,EAA6B,oBAA7B,CAArG,EAAyJ;AACxJ,MAAA,CAAC,GAAG,KAAJ;AACA;;;AACD,WAAc,IAAA,EAAA,GAAA,OAAA,CAAA,QAAA,CAAA,QAAQ,CAAsB,KAAK,MAA3B,CAAR,CAAA,EAA0C,EAAA,GAAA,EAAA,CAAA,IAAA,EAAxD,EAAwD,CAAA,EAAA,CAAA,IAAxD,EAAwD,EAAA,GAAA,EAAA,CAAA,IAAA,EAAxD,EAA0D;AAArD,YAAI,CAAC,GAAA,EAAA,CAAA,KAAL;AACJ,QAAA,CAAC,CAAC,CAAF,CAAI,KAAK,cAAT,EAAyB,CAAzB;AACA;;;;;;;;AACI,O,SACA;AACG,YAAC,GAAD,EACF,MAAQ,GAAI,CAAC,KAAb;AACL;AACD;;AACA,SAAK,SAAL,CAAe,eAAf,CAA+B,KAAK,cAApC;AACA,SAAK,QAAL,CAAY,eAAZ,CAA4B,KAAK,cAAjC;;AACA,QAAI,KAAK,KAAL,IAAK,IAAT,EAAS;;AACR;;SAAK,U,CAAI,e,CAAC,KAAA,Q;SACT,U,CAAE,e,CAAgB,KAAK,Q;SACvB,M,CAAA,e,CAAA,KAAA,Q;;;;;;;;;AACD,QAAA,GAAA,GAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AACD,O,SACD;AACS,YAAI;AACH,cAAA,EAAA,IAAA,CAAA,EAAA,CAAA,IAAA,KAAA,EAAA,GAAA,EAAA,CAAA,MAAA,CAAA,EACK,EAAG,CAAA,IAAH,CAAQ,EAAR;AACV,SAHI,SAIJ;AACA,cAAY,GAAZ,EACA,MAAkB,GAAG,CAAA,KAArB;AACK;AACP;AACD;AACD,GAjCD;;AAkCC,EAAA,cAAU,CAAA,SAAV,CAAoB,SAApB,GAAgC,YAAY;QAC3C,CAAA,GAAI,IAAC,aAAD,CAAQ,CAAR,C;QACH,G;QACA,aAAA,KAAA,IAAA,GAAA,K;QACD,aAAS,KAAO,IAAhB,GAAyB,M;KACzB,CAAA,C,CAAA,wBAAA,KAAA,eAAA,CAAA,QAAA,EAAA,GAAA,M;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,eAAM,KAAA,QAAA,CAAA,SAAA,EAAN,GAAM,IAAV;AACA,IAAA,CAAA,CAAA,CAAA,CAAI,qBAAoB,KAAA,cAAA,CAAA,SAAA,EAApB,GAAoB,IAAxB;;QACC,KAAI,cAAJ,IAAuB,I,EAAK;AAC5B,MAAA,CAAA,CAAA,CAAA,CAAA,qBAAA,KAAA,cAAA,CAAA,SAAA,EAAA,GAAA,IAAA;AACA;;AACD,IAAA,CAAC,CAAC,CAAF,CAAI,WAAJ;;AACA,SAAI,IAAK,CAAA,GAAA,CAAT,EAAS,CAAA,GAAA,KAAA,MAAA,CAAsB,KAA/B,EAAqC,CAAA,EAArC,EAAqC;AACpC,UAAI,CAAA,IAAA,CAAJ,EAAI;AACJ,QAAA,CAAK,CAAA,CAAL,CAAK,IAAL;AACC;;UACC,KAAC,MAAD,CAAQ,MAAR,CAAU,CAAV,EAAU,SAAV,E;AACA;;QACD,I;;QACA,KAAA,KAAA,IAAA,I,EAAA;AACD,MAAA,CAAC,CAAC,CAAF,CAAI,aAAM,KAAA,KAAA,IAAA,IAAA,GAAA,KAAA,KAAA,CAAA,SAAA,EAAA,GAAA,MAAN,IAAM,IAAV;AACA;;AACD,IAAA,CAAA,CAAA,CAAA,CAAI,gBAAiB,KAAI,QAAJ,IAAM,IAAV,GAAU,KAAA,QAAA,CAAA,SAAA,EAAV,GAAU,MAAvB,IAAuB,IAA3B;QACC,iBAAkB,KAAK,SAAL,IAAU,IAAxB,GAAsC,KAAO,SAAP,CAAa,SAAb,EAAtC,GAA8D,MAAlE,IAAgF,I;;QAChF,KAAI,kBAAJ,IAA2B,I,EAAC;AAC5B,MAAA,CAAC,CAAC,CAAF,CAAI,uBAAJ;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,kBAAA,CAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACO,YAAC,CAAA,IAAA,CAAD,EAAC;AACA,UAAA,CAAA,CAAA,CAAA,CAAA,IAAA;AACT;;AAxKM,QAAA,CAAA,CAAA,CAAA,CAAA,KAAW,kBAAX,CAAoB,MAApB,CAAoC,CAApC,EAAoC,SAApC,EAAA;AAyKR;;AAAC,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA;AA1KY;;;;;;;;;;GA4IX;;;;CA5IF,C,IAAA,CAAA","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { AxisLabelVisualDataList } from \"./AxisLabelVisualDataList\";\nimport { ChartTitleVisualData } from \"./ChartTitleVisualData\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar AxisVisualData = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AxisVisualData, _super);\n    function AxisVisualData() {\n        var _this = _super.call(this) || this;\n        _this._name = null;\n        _this._type = null;\n        _this._viewport = null;\n        _this._tickMarksLength = 0;\n        _this._tickMarks = null;\n        _this._labels = null;\n        _this._axisLine = null;\n        _this._majorLines = null;\n        _this._minorLines = null;\n        _this._strips = null;\n        _this._labelsPlotArea = null;\n        _this._labelsViewport = null;\n        _this._title = null;\n        _this._annotationBackings = null;\n        _this.tickMarksLength = 0;\n        _this.labels = new AxisLabelVisualDataList();\n        _this.title = new ChartTitleVisualData();\n        return _this;\n    }\n    Object.defineProperty(AxisVisualData.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        set: function (a) {\n            this._name = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"type\", {\n        get: function () {\n            return this._type;\n        },\n        set: function (a) {\n            this._type = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"viewport\", {\n        get: function () {\n            return this._viewport;\n        },\n        set: function (a) {\n            this._viewport = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"tickMarksLength\", {\n        get: function () {\n            return this._tickMarksLength;\n        },\n        set: function (a) {\n            this._tickMarksLength = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"tickMarks\", {\n        get: function () {\n            return this._tickMarks;\n        },\n        set: function (a) {\n            this._tickMarks = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"labels\", {\n        get: function () {\n            return this._labels;\n        },\n        set: function (a) {\n            this._labels = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"axisLine\", {\n        get: function () {\n            return this._axisLine;\n        },\n        set: function (a) {\n            this._axisLine = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"majorLines\", {\n        get: function () {\n            return this._majorLines;\n        },\n        set: function (a) {\n            this._majorLines = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"minorLines\", {\n        get: function () {\n            return this._minorLines;\n        },\n        set: function (a) {\n            this._minorLines = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"strips\", {\n        get: function () {\n            return this._strips;\n        },\n        set: function (a) {\n            this._strips = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"labelsPlotArea\", {\n        get: function () {\n            return this._labelsPlotArea;\n        },\n        set: function (a) {\n            this._labelsPlotArea = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"labelsViewport\", {\n        get: function () {\n            return this._labelsViewport;\n        },\n        set: function (a) {\n            this._labelsViewport = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"title\", {\n        get: function () {\n            return this._title;\n        },\n        set: function (a) {\n            this._title = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AxisVisualData.prototype, \"annotationBackings\", {\n        get: function () {\n            return this._annotationBackings;\n        },\n        set: function (a) {\n            this._annotationBackings = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AxisVisualData.prototype.p = function () {\n        var e_1, _a, e_2, _b;\n        var a = true;\n        if (Base.equalsStatic(this.type, \"NumericYAxis\") || Base.equalsStatic(this.type, \"CategoryYAxis\") || Base.equalsStatic(this.type, \"PercentChangeYAxis\")) {\n            a = false;\n        }\n        try {\n            for (var _c = tslib_1.__values(fromEnum(this.labels)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var b = _d.value;\n                b.h(this.labelsViewport, a);\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return))\n                    _a.call(_c);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        this.tickMarks.scaleByViewport(this.labelsViewport);\n        this.axisLine.scaleByViewport(this.labelsViewport);\n        if (this.title != null) {\n            this.title.h(this.labelsViewport);\n        }\n        this.majorLines.scaleByViewport(this.viewport);\n        this.minorLines.scaleByViewport(this.viewport);\n        this.strips.scaleByViewport(this.viewport);\n        if (this.annotationBackings != null) {\n            try {\n                for (var _e = tslib_1.__values(fromEnum(this.annotationBackings)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                    var c = _f.value;\n                    c.scaleByViewport(this.labelsViewport);\n                }\n            }\n            catch (e_2_1) {\n                e_2 = { error: e_2_1 };\n            }\n            finally {\n                try {\n                    if (_f && !_f.done && (_b = _e.return))\n                        _b.call(_e);\n                }\n                finally {\n                    if (e_2)\n                        throw e_2.error;\n                }\n            }\n        }\n    };\n    AxisVisualData.prototype.serialize = function () {\n        var a = new StringBuilder(0);\n        a.u(\"{\");\n        a.u(\"name: \\\"\" + this.name + \"\\\",\");\n        a.u(\"type: \\\"\" + this.type + \"\\\", \");\n        a.u(\"tickMarksLength: \\\"\" + this.tickMarksLength.toString() + \"\\\", \");\n        a.u(\"viewport: \" + this.viewport.serialize() + \", \");\n        a.u(\"labelsViewport: \" + this.labelsViewport.serialize() + \", \");\n        if (this.labelsPlotArea != null) {\n            a.u(\"labelsPlotArea: \" + this.labelsPlotArea.serialize() + \", \");\n        }\n        a.u(\"labels: [\");\n        for (var b = 0; b < this.labels.count; b++) {\n            if (b != 0) {\n                a.l(\", \");\n            }\n            a.l(this.labels._inner[b].serialize());\n        }\n        a.u(\"],\");\n        if (this.title != null) {\n            a.u(\"title: \" + ((this.title != null) ? this.title.serialize() : \"null\") + \", \");\n        }\n        a.u(\"axisLine: \" + ((this.axisLine != null) ? this.axisLine.serialize() : \"null\") + \", \");\n        a.u(\"tickMarks: \" + ((this.tickMarks != null) ? this.tickMarks.serialize() : \"null\") + \", \");\n        if (this.annotationBackings != null) {\n            a.u(\"annotationBackings: [\");\n            for (var c = 0; c < this.annotationBackings.count; c++) {\n                if (c != 0) {\n                    a.l(\", \");\n                }\n                a.l(this.annotationBackings._inner[c].serialize());\n            }\n            a.u(\"],\");\n        }\n        if (this.axisLine != null) {\n            a.u(\"majorLines: \" + ((this.majorLines != null) ? this.majorLines.serialize() : \"null\") + \", \");\n            a.u(\"minorLines: \" + ((this.minorLines != null) ? this.minorLines.serialize() : \"null\") + \", \");\n            a.u(\"strips: \" + ((this.strips != null) ? this.strips.serialize() : \"null\"));\n        }\n        a.u(\"}\");\n        return a.toString();\n    };\n    AxisVisualData.$t = markType(AxisVisualData, 'AxisVisualData');\n    return AxisVisualData;\n}(Base));\nexport { AxisVisualData };\n//# sourceMappingURL=AxisVisualData.js.map\n"]},"metadata":{},"sourceType":"module"}