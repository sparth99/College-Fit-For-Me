{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrFinancialOverlay } from \"./igr-financial-overlay\";\nimport { BollingerBandsOverlay } from \"./BollingerBandsOverlay\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent Bollinger Bands financial overlay series.\n * Default required members: High, Low, Close\n*\n* You can use the `IgrBollingerBandsOverlay` class represents a IgxDataChartComponent Bollinger Bands financial overlay series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*\n*     <IgrBollingerBandsOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n*  const s = new IgrBollingerBandsOverlay({ name: \"\", xAxisName: \"\" });\n* ```\n*/\n\nvar IgrBollingerBandsOverlay =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrBollingerBandsOverlay, _super);\n\n  function IgrBollingerBandsOverlay(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrBollingerBandsOverlay.prototype.createImplementation = function () {\n    return new BollingerBandsOverlay();\n  };\n\n  Object.defineProperty(IgrBollingerBandsOverlay.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrBollingerBandsOverlay.prototype, \"period\", {\n    /**\n     * Gets or sets the moving average period for the current BollingerBandOverlay object.\n     * The typical, and initial, value for Bollinger band periods is 14.\n    *\n    * You can use the `period` property for moving average of the current BollingerBandOverlay object.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandsOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tperiod={7} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.series.period = 7;\n    * ```\n    */\n    get: function () {\n      return this.i.pt;\n    },\n    set: function (v) {\n      this.i.pt = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrBollingerBandsOverlay.prototype, \"multiplier\", {\n    /**\n     * Gets or sets the moving average period for the current BollingerBandOverlay object.\n     * The typical, and initial, value for Bollinger band multipliers is 2.\n    *\n    * You can use the `IgrBollingerBandsOverlay`\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandsOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tmultiplier= {2} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ps;\n    },\n    set: function (v) {\n      this.i.ps = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrBollingerBandsOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrBollingerBandsOverlay.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.fe(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrBollingerBandsOverlay.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.fc(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  return IgrBollingerBandsOverlay;\n}(IgrFinancialOverlay);\n\nexport { IgrBollingerBandsOverlay };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-bollinger-bands-overlay.ts"],"names":[],"mappings":";AAKA,SAAS,mBAAT,QAA+D,yBAA/D;AAGA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,OAAT,QAAwB,qBAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,IAAA,wBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,OAAA,CAAA,SAAA,CAAA,wBAAA,EAAA,MAAA;;AAa7C,WAAA,wBAAA,CAAY,KAAZ,EAAiD;WAChD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,wBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,qBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,wBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAmD5B,EAAA,MAAA,CAAA,cAAA,CAAI,wBAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AA7CV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6CA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFS;SAGV,UAAW,CAAX,EAAoB;AACnB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALS;oBAAA;;AAAA,GAAV;AA+CA,EAAA,MAAA,CAAA,cAAA,CAAI,wBAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAzCd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAyCA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFa;SAGd,UAAe,CAAf,EAAwB;AACvB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALa;oBAAA;;AAAA,GAAd;;AAMO,EAAA,wBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,KAAtB,EAAsC,gBAAtC,EAAiE,YAAjE,EAAsF;AACrF,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,gBAA1B,EAA4C,YAA5C,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIA,EAAA,wBAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,KAA/B,EAA+C,YAA/C,EAAoE;AACnE,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,YAA1B,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIA,EAAA,wBAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,KAA3B,EAA2C,YAA3C,EAAgE;AAC/D,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,YAA1B,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,wBAAA;AAAC,CA9HD,CAA8C,mBAA9C,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrFinancialOverlay } from \"./igr-financial-overlay\";\nimport { BollingerBandsOverlay } from \"./BollingerBandsOverlay\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent Bollinger Bands financial overlay series.\n * Default required members: High, Low, Close\n*\n* You can use the `IgrBollingerBandsOverlay` class represents a IgxDataChartComponent Bollinger Bands financial overlay series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*\n*     <IgrBollingerBandsOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n*  const s = new IgrBollingerBandsOverlay({ name: \"\", xAxisName: \"\" });\n* ```\n*/\nvar IgrBollingerBandsOverlay = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrBollingerBandsOverlay, _super);\n    function IgrBollingerBandsOverlay(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrBollingerBandsOverlay.prototype.createImplementation = function () {\n        return new BollingerBandsOverlay();\n    };\n    Object.defineProperty(IgrBollingerBandsOverlay.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrBollingerBandsOverlay.prototype, \"period\", {\n        /**\n         * Gets or sets the moving average period for the current BollingerBandOverlay object.\n         * The typical, and initial, value for Bollinger band periods is 14.\n        *\n        * You can use the `period` property for moving average of the current BollingerBandOverlay object.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandsOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tperiod={7} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.series.period = 7;\n        * ```\n        */\n        get: function () {\n            return this.i.pt;\n        },\n        set: function (v) {\n            this.i.pt = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrBollingerBandsOverlay.prototype, \"multiplier\", {\n        /**\n         * Gets or sets the moving average period for the current BollingerBandOverlay object.\n         * The typical, and initial, value for Bollinger band multipliers is 2.\n        *\n        * You can use the `IgrBollingerBandsOverlay`\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandsOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tmultiplier= {2} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ps;\n        },\n        set: function (v) {\n            this.i.ps = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrBollingerBandsOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrBollingerBandsOverlay.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.fe(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrBollingerBandsOverlay.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.fc(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    return IgrBollingerBandsOverlay;\n}(IgrFinancialOverlay));\nexport { IgrBollingerBandsOverlay };\n//# sourceMappingURL=igr-bollinger-bands-overlay.js.map\n"]},"metadata":{},"sourceType":"module"}