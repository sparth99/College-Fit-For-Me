{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\nimport { isNaN_ } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar DoughnutChartVisualData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(DoughnutChartVisualData, _super);\n\n  function DoughnutChartVisualData() {\n    var _this = _super.call(this) || this;\n\n    _this._series = null;\n    _this._height = 0;\n    _this._width = 0;\n    _this._holeRadius = 0;\n    _this._dipScalingRatio = 0;\n    _this._viewport = null;\n    _this.dipScalingRatio = 1;\n    return _this;\n  }\n\n  Object.defineProperty(DoughnutChartVisualData.prototype, \"series\", {\n    get: function () {\n      return this._series;\n    },\n    set: function (a) {\n      this._series = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoughnutChartVisualData.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (a) {\n      this._height = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoughnutChartVisualData.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (a) {\n      this._width = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoughnutChartVisualData.prototype, \"holeRadius\", {\n    get: function () {\n      return this._holeRadius;\n    },\n    set: function (a) {\n      this._holeRadius = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DoughnutChartVisualData.prototype, \"dipScalingRatio\", {\n    get: function () {\n      return this._dipScalingRatio;\n    },\n    set: function (a) {\n      this._dipScalingRatio = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DoughnutChartVisualData.prototype.scaleByViewport = function () {\n    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n\n    if (this.series != null) {\n      try {\n        for (var _e = tslib_1.__values(fromEnum(this.series)), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var a = _f.value;\n\n          try {\n            for (var _g = (e_2 = void 0, tslib_1.__values(fromEnum(a.rings))), _h = _g.next(); !_h.done; _h = _g.next()) {\n              var b = _h.value;\n\n              try {\n                for (var _j = (e_3 = void 0, tslib_1.__values(fromEnum(b.arcs))), _k = _j.next(); !_k.done; _k = _j.next()) {\n                  var c = _k.value;\n\n                  try {\n                    for (var _l = (e_4 = void 0, tslib_1.__values(fromEnum(c.a))), _m = _l.next(); !_m.done; _m = _l.next()) {\n                      var d = _m.value;\n                      d.scaleByViewport(this.viewport);\n                    }\n                  } catch (e_4_1) {\n                    e_4 = {\n                      error: e_4_1\n                    };\n                  } finally {\n                    try {\n                      if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n                    } finally {\n                      if (e_4) throw e_4.error;\n                    }\n                  }\n                }\n              } catch (e_3_1) {\n                e_3 = {\n                  error: e_3_1\n                };\n              } finally {\n                try {\n                  if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n                } finally {\n                  if (e_3) throw e_3.error;\n                }\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n\n  DoughnutChartVisualData.prototype.serialize = function () {\n    var a = new StringBuilder(0);\n    var b = true;\n    a.u(\"{\");\n\n    if (!isNaN_(this.width)) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"width: \");\n      a.u(this.width.toString());\n    }\n\n    if (!isNaN_(this.height)) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"height: \");\n      a.u(this.height.toString());\n    }\n\n    if (!isNaN_(this.holeRadius)) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"holeRadius: \");\n      a.u(this.holeRadius.toString());\n    }\n\n    if (this.viewport != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.u(\"viewport: {\");\n      a.l(\"left: \" + this.viewport.left + \", top: \" + this.viewport.top + \", width: \" + this.viewport.width + \", height: \" + this.viewport.height);\n      a.u(\"}\");\n    }\n\n    if (this.series != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.u(\"series: [\");\n\n      for (var c = 0; c < this.series.count; c++) {\n        if (c != 0) {\n          a.l(\", \");\n        }\n\n        a.l(this.series._inner[c].serialize());\n      }\n\n      a.u(\"]\");\n    }\n\n    if (!b) {\n      a.l(\", \");\n    }\n\n    a.l(\"dipScalingRatio: \" + this.dipScalingRatio.toString());\n    a.u(\"}\");\n    return a.toString();\n  };\n\n  Object.defineProperty(DoughnutChartVisualData.prototype, \"viewport\", {\n    get: function () {\n      return this._viewport;\n    },\n    set: function (a) {\n      this._viewport = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  DoughnutChartVisualData.$t = markType(DoughnutChartVisualData, 'DoughnutChartVisualData');\n  return DoughnutChartVisualData;\n}(Base);\n\nexport { DoughnutChartVisualData };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/DoughnutChartVisualData.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\nimport { isNaN_ } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar DoughnutChartVisualData = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DoughnutChartVisualData, _super);\n    function DoughnutChartVisualData() {\n        var _this = _super.call(this) || this;\n        _this._series = null;\n        _this._height = 0;\n        _this._width = 0;\n        _this._holeRadius = 0;\n        _this._dipScalingRatio = 0;\n        _this._viewport = null;\n        _this.dipScalingRatio = 1;\n        return _this;\n    }\n    Object.defineProperty(DoughnutChartVisualData.prototype, \"series\", {\n        get: function () {\n            return this._series;\n        },\n        set: function (a) {\n            this._series = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoughnutChartVisualData.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (a) {\n            this._height = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoughnutChartVisualData.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (a) {\n            this._width = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoughnutChartVisualData.prototype, \"holeRadius\", {\n        get: function () {\n            return this._holeRadius;\n        },\n        set: function (a) {\n            this._holeRadius = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoughnutChartVisualData.prototype, \"dipScalingRatio\", {\n        get: function () {\n            return this._dipScalingRatio;\n        },\n        set: function (a) {\n            this._dipScalingRatio = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DoughnutChartVisualData.prototype.scaleByViewport = function () {\n        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n        if (this.series != null) {\n            try {\n                for (var _e = tslib_1.__values(fromEnum(this.series)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                    var a = _f.value;\n                    try {\n                        for (var _g = (e_2 = void 0, tslib_1.__values(fromEnum(a.rings))), _h = _g.next(); !_h.done; _h = _g.next()) {\n                            var b = _h.value;\n                            try {\n                                for (var _j = (e_3 = void 0, tslib_1.__values(fromEnum(b.arcs))), _k = _j.next(); !_k.done; _k = _j.next()) {\n                                    var c = _k.value;\n                                    try {\n                                        for (var _l = (e_4 = void 0, tslib_1.__values(fromEnum(c.a))), _m = _l.next(); !_m.done; _m = _l.next()) {\n                                            var d = _m.value;\n                                            d.scaleByViewport(this.viewport);\n                                        }\n                                    }\n                                    catch (e_4_1) {\n                                        e_4 = { error: e_4_1 };\n                                    }\n                                    finally {\n                                        try {\n                                            if (_m && !_m.done && (_d = _l.return))\n                                                _d.call(_l);\n                                        }\n                                        finally {\n                                            if (e_4)\n                                                throw e_4.error;\n                                        }\n                                    }\n                                }\n                            }\n                            catch (e_3_1) {\n                                e_3 = { error: e_3_1 };\n                            }\n                            finally {\n                                try {\n                                    if (_k && !_k.done && (_c = _j.return))\n                                        _c.call(_j);\n                                }\n                                finally {\n                                    if (e_3)\n                                        throw e_3.error;\n                                }\n                            }\n                        }\n                    }\n                    catch (e_2_1) {\n                        e_2 = { error: e_2_1 };\n                    }\n                    finally {\n                        try {\n                            if (_h && !_h.done && (_b = _g.return))\n                                _b.call(_g);\n                        }\n                        finally {\n                            if (e_2)\n                                throw e_2.error;\n                        }\n                    }\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (_f && !_f.done && (_a = _e.return))\n                        _a.call(_e);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        }\n    };\n    DoughnutChartVisualData.prototype.serialize = function () {\n        var a = new StringBuilder(0);\n        var b = true;\n        a.u(\"{\");\n        if (!isNaN_(this.width)) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"width: \");\n            a.u(this.width.toString());\n        }\n        if (!isNaN_(this.height)) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"height: \");\n            a.u(this.height.toString());\n        }\n        if (!isNaN_(this.holeRadius)) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"holeRadius: \");\n            a.u(this.holeRadius.toString());\n        }\n        if (this.viewport != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.u(\"viewport: {\");\n            a.l(\"left: \" + this.viewport.left + \", top: \" + this.viewport.top + \", width: \" + this.viewport.width + \", height: \" + this.viewport.height);\n            a.u(\"}\");\n        }\n        if (this.series != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.u(\"series: [\");\n            for (var c = 0; c < this.series.count; c++) {\n                if (c != 0) {\n                    a.l(\", \");\n                }\n                a.l(this.series._inner[c].serialize());\n            }\n            a.u(\"]\");\n        }\n        if (!b) {\n            a.l(\", \");\n        }\n        a.l(\"dipScalingRatio: \" + this.dipScalingRatio.toString());\n        a.u(\"}\");\n        return a.toString();\n    };\n    Object.defineProperty(DoughnutChartVisualData.prototype, \"viewport\", {\n        get: function () {\n            return this._viewport;\n        },\n        set: function (a) {\n            this._viewport = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DoughnutChartVisualData.$t = markType(DoughnutChartVisualData, 'DoughnutChartVisualData');\n    return DoughnutChartVisualData;\n}(Base));\nexport { DoughnutChartVisualData };\n//# sourceMappingURL=DoughnutChartVisualData.js.map\n"]},"metadata":{},"sourceType":"module"}