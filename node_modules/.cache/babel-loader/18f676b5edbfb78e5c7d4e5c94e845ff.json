{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrAxis } from \"./igr-axis\";\nimport { IgrSeries } from \"./igr-series\";\nimport { ValueOverlay } from \"./ValueOverlay\";\nimport { ensureBool, brushToString, stringToBrush, toPoint, fromPoint } from \"igniteui-react-core\";\n/**\n * Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.\n*/\n\nvar IgrValueOverlay =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrValueOverlay, _super);\n\n  function IgrValueOverlay(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._axisName = null;\n    return _this;\n  }\n\n  IgrValueOverlay.prototype.createImplementation = function () {\n    return new ValueOverlay();\n  };\n\n  Object.defineProperty(IgrValueOverlay.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axis\", {\n    /**\n     * Gets or sets the axis used by the value overlay.\n    */\n    get: function () {\n      if (this.i.l0 == null) {\n        return null;\n      }\n\n      if (!this.i.l0.externalObject) {\n        var e = IgrAxis._createFromInternal(this.i.l0);\n\n        if (e) {\n          e._implementation = this.i.l0;\n        }\n\n        this.i.l0.externalObject = e;\n      }\n\n      return this.i.l0.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.l0 = null : this.i.l0 = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisName\", {\n    /**\n    * Gets or sets the name to use to resolve axis from markup.\n    */\n    get: function () {\n      return this._axisName;\n    },\n    set: function (v) {\n      this._axisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"value\", {\n    /**\n     * Gets or sets the value of the overlay.\n    */\n    get: function () {\n      return this.i.mi;\n    },\n    set: function (v) {\n      this.i.mi = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"isAxisAnnotationEnabled\", {\n    /**\n     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.\n    */\n    get: function () {\n      return this.i.l4;\n    },\n    set: function (v) {\n      this.i.l4 = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationFormatLabel\", {\n    /**\n     * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.\n    */\n    get: function () {\n      return this.i.l2;\n    },\n    set: function (v) {\n      this.i.l2 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationTextColor\", {\n    /**\n     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.\n    */\n    get: function () {\n      return brushToString(this.i.ng);\n    },\n    set: function (v) {\n      this.i.ng = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationBackground\", {\n    /**\n     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.\n    */\n    get: function () {\n      return brushToString(this.i.ne);\n    },\n    set: function (v) {\n      this.i.ne = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationInterpolatedValuePrecision\", {\n    /**\n     * Gets or sets the precision to use displaying values for interpolated positions.\n    */\n    get: function () {\n      return this.i.mj;\n    },\n    set: function (v) {\n      this.i.mj = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationOutline\", {\n    /**\n     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.\n    */\n    get: function () {\n      return brushToString(this.i.nf);\n    },\n    set: function (v) {\n      this.i.nf = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingLeft\", {\n    /**\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n    */\n    get: function () {\n      return this.i.l9;\n    },\n    set: function (v) {\n      this.i.l9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingTop\", {\n    /**\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n    */\n    get: function () {\n      return this.i.mb;\n    },\n    set: function (v) {\n      this.i.mb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingRight\", {\n    /**\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n    */\n    get: function () {\n      return this.i.ma;\n    },\n    set: function (v) {\n      this.i.ma = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingBottom\", {\n    /**\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n    */\n    get: function () {\n      return this.i.l8;\n    },\n    set: function (v) {\n      this.i.l8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.\n    */\n    get: function () {\n      return this.i.mc;\n    },\n    set: function (v) {\n      this.i.mc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"isValueOverlay\", {\n    /**\n     * Gets whether the series is a value overlay.\n    */\n    get: function () {\n      return this.i.c6;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrValueOverlay.prototype, \"labelResolved\", {\n    get: function () {\n      return this.i.mx;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrValueOverlay.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.axisName && this.axisName.length > 0 && axes[i].name == this.axisName) {\n        this.axis = axes[i];\n      }\n    }\n  };\n\n  IgrValueOverlay.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.axis && this.axis._styling) {\n      this.axis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrValueOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrValueOverlay.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ll(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * Gets the item item index associated with the specified world position\n  \r\n  * @param world\n  */\n\n\n  IgrValueOverlay.prototype.getItemIndex = function (world) {\n    var iv = this.i.e8(toPoint(world));\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrValueOverlay.prototype.getItem = function (world) {\n    var iv = this.i.fp(toPoint(world));\n    return iv;\n  };\n  /**\n   * Requests that the provided item should be brought into view if possible.\n  \r\n  * @param item  * The item to attempt to bring into view.\n  */\n\n\n  IgrValueOverlay.prototype.scrollIntoView = function (item) {\n    var iv = this.i.c9(item);\n    return iv;\n  };\n  /**\n   * Gets the label for a data item.\n  \r\n  * @param value  * The unscaled value to get a label for.\n  */\n\n\n  IgrValueOverlay.prototype.getLabel = function (value) {\n    var iv = this.i.mv(value);\n    return iv;\n  };\n\n  return IgrValueOverlay;\n}(IgrSeries);\n\nexport { IgrValueOverlay };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-value-overlay.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrAxis } from \"./igr-axis\";\nimport { IgrSeries } from \"./igr-series\";\nimport { ValueOverlay } from \"./ValueOverlay\";\nimport { ensureBool, brushToString, stringToBrush, toPoint, fromPoint } from \"igniteui-react-core\";\n/**\n * Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.\n*/\nvar IgrValueOverlay = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrValueOverlay, _super);\n    function IgrValueOverlay(props) {\n        var _this = _super.call(this, props) || this;\n        _this._axisName = null;\n        return _this;\n    }\n    IgrValueOverlay.prototype.createImplementation = function () {\n        return new ValueOverlay();\n    };\n    Object.defineProperty(IgrValueOverlay.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axis\", {\n        /**\n         * Gets or sets the axis used by the value overlay.\n        */\n        get: function () {\n            if (this.i.l0 == null) {\n                return null;\n            }\n            if (!this.i.l0.externalObject) {\n                var e = IgrAxis._createFromInternal(this.i.l0);\n                if (e) {\n                    e._implementation = this.i.l0;\n                }\n                this.i.l0.externalObject = e;\n            }\n            return this.i.l0.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.l0 = null : this.i.l0 = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisName\", {\n        /**\n        * Gets or sets the name to use to resolve axis from markup.\n        */\n        get: function () {\n            return this._axisName;\n        },\n        set: function (v) {\n            this._axisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"value\", {\n        /**\n         * Gets or sets the value of the overlay.\n        */\n        get: function () {\n            return this.i.mi;\n        },\n        set: function (v) {\n            this.i.mi = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"isAxisAnnotationEnabled\", {\n        /**\n         * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.\n        */\n        get: function () {\n            return this.i.l4;\n        },\n        set: function (v) {\n            this.i.l4 = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationFormatLabel\", {\n        /**\n         * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.\n        */\n        get: function () {\n            return this.i.l2;\n        },\n        set: function (v) {\n            this.i.l2 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationTextColor\", {\n        /**\n         * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.\n        */\n        get: function () {\n            return brushToString(this.i.ng);\n        },\n        set: function (v) {\n            this.i.ng = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationBackground\", {\n        /**\n         * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.\n        */\n        get: function () {\n            return brushToString(this.i.ne);\n        },\n        set: function (v) {\n            this.i.ne = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationInterpolatedValuePrecision\", {\n        /**\n         * Gets or sets the precision to use displaying values for interpolated positions.\n        */\n        get: function () {\n            return this.i.mj;\n        },\n        set: function (v) {\n            this.i.mj = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationOutline\", {\n        /**\n         * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.\n        */\n        get: function () {\n            return brushToString(this.i.nf);\n        },\n        set: function (v) {\n            this.i.nf = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingLeft\", {\n        /**\n         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n        */\n        get: function () {\n            return this.i.l9;\n        },\n        set: function (v) {\n            this.i.l9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingTop\", {\n        /**\n         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n        */\n        get: function () {\n            return this.i.mb;\n        },\n        set: function (v) {\n            this.i.mb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingRight\", {\n        /**\n         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n        */\n        get: function () {\n            return this.i.ma;\n        },\n        set: function (v) {\n            this.i.ma = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationPaddingBottom\", {\n        /**\n         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\n        */\n        get: function () {\n            return this.i.l8;\n        },\n        set: function (v) {\n            this.i.l8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"axisAnnotationStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.\n        */\n        get: function () {\n            return this.i.mc;\n        },\n        set: function (v) {\n            this.i.mc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"isValueOverlay\", {\n        /**\n         * Gets whether the series is a value overlay.\n        */\n        get: function () {\n            return this.i.c6;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrValueOverlay.prototype, \"labelResolved\", {\n        get: function () {\n            return this.i.mx;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrValueOverlay.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.axisName && this.axisName.length > 0 &&\n                axes[i].name == this.axisName) {\n                this.axis = axes[i];\n            }\n        }\n    };\n    IgrValueOverlay.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.axis && this.axis._styling) {\n            this.axis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    IgrValueOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrValueOverlay.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ll(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * Gets the item item index associated with the specified world position\n    \r\n    * @param world\n    */\n    IgrValueOverlay.prototype.getItemIndex = function (world) {\n        var iv = this.i.e8(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrValueOverlay.prototype.getItem = function (world) {\n        var iv = this.i.fp(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Requests that the provided item should be brought into view if possible.\n    \r\n    * @param item  * The item to attempt to bring into view.\n    */\n    IgrValueOverlay.prototype.scrollIntoView = function (item) {\n        var iv = this.i.c9(item);\n        return (iv);\n    };\n    /**\n     * Gets the label for a data item.\n    \r\n    * @param value  * The unscaled value to get a label for.\n    */\n    IgrValueOverlay.prototype.getLabel = function (value) {\n        var iv = this.i.mv(value);\n        return (iv);\n    };\n    return IgrValueOverlay;\n}(IgrSeries));\nexport { IgrValueOverlay };\n//# sourceMappingURL=igr-value-overlay.js.map\n"]},"metadata":{},"sourceType":"module"}