{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrAnchoredCategorySeries } from \"./igr-anchored-category-series\";\nimport { toPoint, fromRect, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for anchored category series with a category x-axis and a numeric y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrHorizontalAnchoredCategorySeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrHorizontalAnchoredCategorySeries, _super);\n\n  function IgrHorizontalAnchoredCategorySeries(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for this series.\n    *\n    * Instantiate xAxis\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    */\n    get: function () {\n      if (this.i.xAxis == null) {\n        return null;\n      }\n\n      if (!this.i.xAxis.externalObject) {\n        var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n\n        if (e) {\n          e._implementation = this.i.xAxis;\n        }\n\n        this.i.xAxis.externalObject = e;\n      }\n\n      return this.i.xAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function () {\n      return this._xAxisName;\n    },\n    set: function (v) {\n      this._xAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for this series.\n    *\n    * Instantiate yAxis\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    */\n    get: function () {\n      if (this.i.yAxis == null) {\n        return null;\n      }\n\n      if (!this.i.yAxis.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n\n        if (e) {\n          e._implementation = this.i.yAxis;\n        }\n\n        this.i.yAxis.externalObject = e;\n      }\n\n      return this.i.yAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function () {\n      return this._yAxisName;\n    },\n    set: function (v) {\n      this._yAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrHorizontalAnchoredCategorySeries.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n   * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinates for which to get a value marker bounding box for\n  *\n  * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n  *\n  * <!-- Angular JS -->\n  *\n  *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n    var iv = this.i.lw(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Returns the offset value for this series if grouped on a category axis.\n  \r\n  *\n  * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n  *\n  * <!-- Angular JS -->\n  *\n  *       var g = series.getOffsetValue();\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getOffsetValue = function () {\n    var iv = this.i.getOffsetValue();\n    return iv;\n  };\n  /**\n   * Returns the width of the category grouping this series is in.\n  \r\n  *\n  * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getCategoryWidth = function () {\n    var iv = this.i.getCategoryWidth();\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.fe(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.fc(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ll(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.p6(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.p7(axis);\n    return iv;\n  };\n\n  return IgrHorizontalAnchoredCategorySeries;\n}(IgrAnchoredCategorySeries);\n\nexport { IgrHorizontalAnchoredCategorySeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-horizontal-anchored-category-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrAnchoredCategorySeries } from \"./igr-anchored-category-series\";\nimport { toPoint, fromRect, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for anchored category series with a category x-axis and a numeric y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrHorizontalAnchoredCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrHorizontalAnchoredCategorySeries, _super);\n    function IgrHorizontalAnchoredCategorySeries(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        return _this;\n    }\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for this series.\n        *\n        * Instantiate xAxis\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        */\n        get: function () {\n            if (this.i.xAxis == null) {\n                return null;\n            }\n            if (!this.i.xAxis.externalObject) {\n                var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n                if (e) {\n                    e._implementation = this.i.xAxis;\n                }\n                this.i.xAxis.externalObject = e;\n            }\n            return this.i.xAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for this series.\n        *\n        * Instantiate yAxis\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        */\n        get: function () {\n            if (this.i.yAxis == null) {\n                return null;\n            }\n            if (!this.i.yAxis.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n                if (e) {\n                    e._implementation = this.i.yAxis;\n                }\n                this.i.yAxis.externalObject = e;\n            }\n            return this.i.yAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrHorizontalAnchoredCategorySeries.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    /**\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\n    *\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n    *\n    * <!-- Angular JS -->\n    *\n    *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n        var iv = this.i.lw(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Returns the offset value for this series if grouped on a category axis.\n    \r\n    *\n    * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n    *\n    * <!-- Angular JS -->\n    *\n    *       var g = series.getOffsetValue();\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.getOffsetValue = function () {\n        var iv = this.i.getOffsetValue();\n        return (iv);\n    };\n    /**\n     * Returns the width of the category grouping this series is in.\n    \r\n    *\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.getCategoryWidth = function () {\n        var iv = this.i.getCategoryWidth();\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.fe(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.fc(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ll(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.p6(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.p7(axis);\n        return (iv);\n    };\n    return IgrHorizontalAnchoredCategorySeries;\n}(IgrAnchoredCategorySeries));\nexport { IgrHorizontalAnchoredCategorySeries };\n//# sourceMappingURL=igr-horizontal-anchored-category-series.js.map\n"]},"metadata":{},"sourceType":"module"}