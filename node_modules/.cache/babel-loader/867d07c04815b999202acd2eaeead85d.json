{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ColorScaleInterpolationMode_$type } from \"./ColorScaleInterpolationMode\";\nimport { IgrColorScale } from \"./igr-color-scale\";\nimport { CustomPaletteColorScale } from \"./CustomPaletteColorScale\";\nimport { toColorCollection, fromColorCollection, ensureEnum } from \"igniteui-react-core\";\n/**\n * ColorScale class for selecting a color from a given palette, or interpolating between adjacent colors in that palette.\n*/\n\nvar IgrCustomPaletteColorScale =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrCustomPaletteColorScale, _super);\n\n  function IgrCustomPaletteColorScale(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrCustomPaletteColorScale.prototype.createImplementation = function () {\n    return new CustomPaletteColorScale();\n  };\n\n  Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"minimumValue\", {\n    /**\n     * The lowest value to assign a color.  Any given value less than this value will be made Transparent.\n    */\n    get: function () {\n      return this.i.minimumValue;\n    },\n    set: function (v) {\n      this.i.minimumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"maximumValue\", {\n    /**\n     * The highest value to assign a color.  Any given value greater than this value will be made Transparent.\n    */\n    get: function () {\n      return this.i.maximumValue;\n    },\n    set: function (v) {\n      this.i.maximumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"palette\", {\n    /**\n     * A list of colors to select from or interpolate between.\n    */\n    get: function () {\n      return fromColorCollection(this.i.palette);\n    },\n    set: function (v) {\n      this.i.palette = toColorCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"interpolationMode\", {\n    /**\n     * The approach to use when getting a color from the palette.\n    */\n    get: function () {\n      return this.i.interpolationMode;\n    },\n    set: function (v) {\n      this.i.interpolationMode = ensureEnum(ColorScaleInterpolationMode_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrCustomPaletteColorScale.prototype.providePalette = function (colors) {\n    this.i.providePalette(colors);\n  };\n\n  return IgrCustomPaletteColorScale;\n}(IgrColorScale);\n\nexport { IgrCustomPaletteColorScale };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-custom-palette-color-scale.ts"],"names":[],"mappings":";AAKA,SAAsC,iCAAtC,QAA+E,+BAA/E;AACA,SAAS,aAAT,QAAmD,mBAAnD;AACA,SAAS,uBAAT,QAAwC,2BAAxC;AACA,SAAS,iBAAT,EAA4B,mBAA5B,EAAiD,UAAjD,QAAmE,qBAAnE;AAEA;;;;AAGA,IAAA,0BAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgD,EAAA,OAAA,CAAA,SAAA,CAAA,0BAAA,EAAA,MAAA;;AAa/C,WAAA,0BAAA,CAAY,KAAZ,EAAmD;WAClD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,0BAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,uBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,0BAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAS5B,EAAA,MAAA,CAAA,cAAA,CAAI,0BAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAHhB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,YAAf;AACA,KAFe;SAGhB,UAAiB,CAAjB,EAA0B;AACzB,WAAK,CAAL,CAAO,YAAP,GAAsB,CAAC,CAAvB;AACA,KALe;oBAAA;;AAAA,GAAhB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,0BAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAHhB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,YAAf;AACA,KAFe;SAGhB,UAAiB,CAAjB,EAA0B;AACzB,WAAK,CAAL,CAAO,YAAP,GAAsB,CAAC,CAAvB;AACA,KALe;oBAAA;;AAAA,GAAhB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,0BAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAO,mBAAmB,CAAC,KAAK,CAAL,CAAO,OAAR,CAA1B;AACA,KAFU;SAGX,UAAY,CAAZ,EAAuB;AACtB,WAAK,CAAL,CAAO,OAAP,GAAiB,iBAAiB,CAAC,CAAD,CAAlC;AACA,KALU;oBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,0BAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;AAHrB;;;SAGA,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,iBAAd;AACA,KAFoB;SAGrB,UAAsB,CAAtB,EAAoD;AACnD,WAAK,CAAL,CAAO,iBAAP,GAA2B,UAAU,CAA8B,iCAA9B,EAAiE,CAAjE,CAArC;AACA,KALoB;oBAAA;;AAAA,GAArB;;AAMO,EAAA,0BAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAsC;AACrC,SAAK,CAAL,CAAO,cAAP,CAAsB,MAAtB;AACA,GAFM;;AAGR,SAAA,0BAAA;AAAC,CAvDD,CAAgD,aAAhD,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ColorScaleInterpolationMode_$type } from \"./ColorScaleInterpolationMode\";\nimport { IgrColorScale } from \"./igr-color-scale\";\nimport { CustomPaletteColorScale } from \"./CustomPaletteColorScale\";\nimport { toColorCollection, fromColorCollection, ensureEnum } from \"igniteui-react-core\";\n/**\n * ColorScale class for selecting a color from a given palette, or interpolating between adjacent colors in that palette.\n*/\nvar IgrCustomPaletteColorScale = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrCustomPaletteColorScale, _super);\n    function IgrCustomPaletteColorScale(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrCustomPaletteColorScale.prototype.createImplementation = function () {\n        return new CustomPaletteColorScale();\n    };\n    Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"minimumValue\", {\n        /**\n         * The lowest value to assign a color.  Any given value less than this value will be made Transparent.\n        */\n        get: function () {\n            return this.i.minimumValue;\n        },\n        set: function (v) {\n            this.i.minimumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"maximumValue\", {\n        /**\n         * The highest value to assign a color.  Any given value greater than this value will be made Transparent.\n        */\n        get: function () {\n            return this.i.maximumValue;\n        },\n        set: function (v) {\n            this.i.maximumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"palette\", {\n        /**\n         * A list of colors to select from or interpolate between.\n        */\n        get: function () {\n            return fromColorCollection(this.i.palette);\n        },\n        set: function (v) {\n            this.i.palette = toColorCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCustomPaletteColorScale.prototype, \"interpolationMode\", {\n        /**\n         * The approach to use when getting a color from the palette.\n        */\n        get: function () {\n            return this.i.interpolationMode;\n        },\n        set: function (v) {\n            this.i.interpolationMode = ensureEnum(ColorScaleInterpolationMode_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrCustomPaletteColorScale.prototype.providePalette = function (colors) {\n        this.i.providePalette(colors);\n    };\n    return IgrCustomPaletteColorScale;\n}(IgrColorScale));\nexport { IgrCustomPaletteColorScale };\n//# sourceMappingURL=igr-custom-palette-color-scale.js.map\n"]},"metadata":{},"sourceType":"module"}