{"ast":null,"code":"var _jsxFileName = \"/Users/Parth/web-project/src/Components/CityStateBarGraph.js\";\nimport React, { Component } from 'react';\nimport { Element } from \"react-faux-dom\";\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nclass CityStateBarGraph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city_state_counts: []\n    };\n  }\n\n  componentDidMount() {\n    let data = [];\n    let state_names = [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"];\n    axios.get('https://api.collegefitfor.me/cities/vis/').then(res => {\n      const states = res.data;\n\n      for (let state in state_names) {\n        state = state_names[state];\n        let dict = {};\n        dict[state] = states[state];\n\n        if (dict[state] != null) {\n          data.push(dict);\n        }\n      }\n\n      data.sort(function (a, b) {\n        var keyA = Object.keys(a)[0];\n        var keyB = Object.keys(b)[0];\n\n        if (keyA > keyB) {\n          return 1;\n        }\n\n        if (keyB > keyA) {\n          return -1;\n        }\n\n        return 0;\n      });\n      this.setState({\n        city_state_counts: data\n      });\n    });\n  }\n\n  render() {\n    if (this.state.city_state_counts.length == 0) {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 20\n          }\n        }, \" Loading... \")\n      );\n    } else {\n      let width = 1200;\n      let height = 600;\n      const el = new Element(\"div\");\n      const svg = d3.select(el).append(\"svg\").attr(\"id\", \"chart\").attr(\"width\", width).attr(\"height\", height);\n      const margin = {\n        top: 60,\n        bottom: 100,\n        left: 80,\n        right: 40\n      };\n      const chart = svg.append(\"g\").classed(\"display\", true).attr(\"transform\", `translate(${margin.left},${margin.top})`);\n      width = width - margin.left - margin.right;\n      height = height - margin.top - margin.bottom;\n      var data = this.state.city_state_counts;\n      var x = \"States\";\n      var y = \"Number of Major Cities\"; // creating scales\n\n      const xScale = d3.scaleBand().domain(data.map(d => Object.keys(d)[0])).range([0, width]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => Object.values(d)[0])]).range([height, 0]);\n      const colorScale = d3.scaleSequential(d3.interpolateBlues);\n      chart.selectAll(\".bar-label\").data(data).enter().append(\"text\").classed(\"bar-label\", true).attr(\"x\", d => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2).attr(\"dx\", 0).attr(\"y\", d => yScale(Object.values(d)[0])).attr(\"dy\", -6);\n      const xAxis = d3.axisBottom().scale(xScale);\n      chart.append(\"g\").classed(\"x axis\", true).attr(\"transform\", `translate(0,${height})`).call(xAxis);\n      const yAxis = d3.axisLeft().ticks(5).scale(yScale);\n      chart.append(\"g\").classed(\"y axis\", true).attr(\"transform\", \"translate(0,0)\").call(yAxis);\n      chart.select(\".x.axis\").append(\"text\").attr(\"x\", width / 2).attr(\"y\", 60).attr(\"fill\", \"#000\").style(\"font-size\", \"20px\").style(\"text-anchor\", \"middle\").text(x);\n      chart.select(\".y.axis\").append(\"text\").attr(\"x\", 0).attr(\"y\", 0).attr(\"transform\", `translate(-50, ${height / 2}) rotate(-90)`).attr(\"fill\", \"#000\").style(\"font-size\", \"20px\").style(\"text-anchor\", \"middle\").text(y);\n      const yGridlines = d3.axisLeft().scale(yScale).ticks(5).tickSize(-width, 0, 0).tickFormat(\"\");\n      chart.append(\"g\").call(yGridlines).classed(\"gridline\", true);\n      chart.selectAll(\".bar\").data(data).enter().append(\"rect\").classed(\"bar\", true).attr(\"x\", d => xScale(Object.keys(d)[0])).attr(\"y\", d => yScale(Object.values(d)[0])).attr(\"height\", d => height - yScale(Object.values(d)[0])).attr(\"width\", d => xScale.bandwidth() - 2).style(\"fill\", (d, i) => colorScale(0.8));\n      return el.toReact();\n    }\n  }\n\n}\n\nexport default CityStateBarGraph;","map":{"version":3,"sources":["/Users/Parth/web-project/src/Components/CityStateBarGraph.js"],"names":["React","Component","Element","d3","axios","CityStateBarGraph","state","city_state_counts","componentDidMount","data","state_names","get","then","res","states","dict","push","sort","a","b","keyA","Object","keys","keyB","setState","render","length","width","height","el","svg","select","append","attr","margin","top","bottom","left","right","chart","classed","x","y","xScale","scaleBand","domain","map","d","range","yScale","scaleLinear","max","values","colorScale","scaleSequential","interpolateBlues","selectAll","enter","bandwidth","xAxis","axisBottom","scale","call","yAxis","axisLeft","ticks","style","text","yGridlines","tickSize","tickFormat","i","toReact"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Element } from \"react-faux-dom\";\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nclass CityStateBarGraph extends Component {\n\n    state = {\n        city_state_counts : [],\n    };\n\n    componentDidMount() {\n        let data = [];\n        let state_names = [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"];\n        axios.get('https://api.collegefitfor.me/cities/vis/')\n            .then(res => {\n                const states = res.data;\n                for (let state in state_names) {\n                    state = state_names[state]\n                    let dict = {}\n                    dict[state] = states[state]\n                    if (dict[state] != null) {\n                        data.push(dict)\n                    }\n                }\n                data.sort(function(a, b) {\n                    var keyA = Object.keys(a)[0];\n                    var keyB = Object.keys(b)[0];\n\n                    if(keyA > keyB) {\n                        return 1;\n                    }\n                    if(keyB > keyA) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                this.setState({city_state_counts : data})\n            })\n    }\n\n    render() {\n        if(this.state.city_state_counts.length == 0) {\n            return <b> Loading... </b>\n        }\n        else {\n            let width = 1200;\n            let height = 600;\n\n            const el = new Element(\"div\");\n            const svg = d3\n                .select(el)\n                .append(\"svg\")\n                .attr(\"id\", \"chart\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n\n            const margin = {\n                top: 60,\n                bottom: 100,\n                left: 80,\n                right: 40\n            };\n            \n            const chart = svg\n                .append(\"g\")\n                .classed(\"display\", true)\n                .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n            width = width - margin.left - margin.right;\n            height = height - margin.top - margin.bottom;\n\n            var data = this.state.city_state_counts;\n            var x = \"States\";\n            var y = \"Number of Major Cities\";\n            \n            // creating scales\n            const xScale = d3\n                .scaleBand()\n                .domain(data.map(d => Object.keys(d)[0]))\n                .range([0, width]);\n            const yScale = d3\n                .scaleLinear()\n                .domain([0, d3.max(data, d => Object.values(d)[0])])\n                .range([height, 0]);\n            const colorScale = d3.scaleSequential(d3.interpolateBlues);\n\n            chart\n                .selectAll(\".bar-label\")\n                .data(data)\n                .enter()\n                .append(\"text\")\n                .classed(\"bar-label\", true)\n                .attr(\"x\", d => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2)\n                .attr(\"dx\", 0)\n                .attr(\"y\", d => yScale(Object.values(d)[0]))\n                .attr(\"dy\", -6)\n\n            const xAxis = d3.axisBottom().scale(xScale);\n            chart\n                .append(\"g\")\n                .classed(\"x axis\", true)\n                .attr(\"transform\", `translate(0,${height})`)\n                .call(xAxis);\n            \n            const yAxis = d3\n                .axisLeft()\n                .ticks(5)\n                .scale(yScale);\n            \n            chart\n                .append(\"g\")\n                .classed(\"y axis\", true)\n                .attr(\"transform\", \"translate(0,0)\")\n                .call(yAxis);\n        \n            chart\n                .select(\".x.axis\")\n                .append(\"text\")\n                .attr(\"x\", width / 2)\n                .attr(\"y\", 60)\n                .attr(\"fill\", \"#000\")\n                .style(\"font-size\", \"20px\")\n                .style(\"text-anchor\", \"middle\")\n                .text(x);\n        \n            chart\n                .select(\".y.axis\")\n                .append(\"text\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 0)\n                .attr(\"transform\", `translate(-50, ${height / 2}) rotate(-90)`)\n                .attr(\"fill\", \"#000\")\n                .style(\"font-size\", \"20px\")\n                .style(\"text-anchor\", \"middle\")\n                .text(y);\n        \n            const yGridlines = d3\n                .axisLeft()\n                .scale(yScale)\n                .ticks(5)\n                .tickSize(-width, 0, 0)\n                .tickFormat(\"\");\n        \n            chart\n                .append(\"g\")\n                .call(yGridlines)\n                .classed(\"gridline\", true);\n\n            chart\n                .selectAll(\".bar\")\n                .data(data)\n                .enter()\n                .append(\"rect\")\n                .classed(\"bar\", true)\n                .attr(\"x\", d => xScale(Object.keys(d)[0]))\n                .attr(\"y\", d => yScale(Object.values(d)[0]))\n                .attr(\"height\", d => height - yScale(Object.values(d)[0]))\n                .attr(\"width\", d => xScale.bandwidth() - 2)\n                .style(\"fill\", (d, i) => colorScale(0.8));\n\n            return el.toReact();\n        }\n    }\n}\n\nexport default CityStateBarGraph;\n"]},"metadata":{},"sourceType":"module"}