{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar TreemapVisualData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(TreemapVisualData, _super);\n\n  function TreemapVisualData() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._nodes = null;\n    _this._name = null;\n    _this._viewport = null;\n    return _this;\n  }\n\n  Object.defineProperty(TreemapVisualData.prototype, \"nodes\", {\n    get: function () {\n      return this._nodes;\n    },\n    set: function (a) {\n      this._nodes = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreemapVisualData.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    set: function (a) {\n      this._name = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreemapVisualData.prototype.scaleByViewport = function () {\n    var e_1, _a;\n\n    if (this.nodes != null) {\n      try {\n        for (var _b = tslib_1.__values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var a = _c.value;\n          a.e(this.viewport);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n\n  TreemapVisualData.prototype.serialize = function () {\n    var e_2, _a;\n\n    var a = new StringBuilder(0);\n    var b = true;\n    a.u(\"{\");\n\n    if (this.nodes != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      var c = true;\n      a.l(\"Nodes: [\");\n\n      try {\n        for (var _b = tslib_1.__values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var d = _c.value;\n\n          if (c) {\n            c = false;\n          } else {\n            a.l(\", \");\n          }\n\n          a.u(d.d());\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      a.u(\"]\");\n    }\n\n    if (this.name != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"name: '\");\n      a.l(this.name);\n      a.u(\"'\");\n    }\n\n    if (b) {\n      b = false;\n    } else {\n      a.l(\", \");\n    }\n\n    a.l(\"viewport: {\");\n    a.l(\"left: \" + this.viewport.left + \", top: \" + this.viewport.top + \", width: \" + this.viewport.width + \", height: \" + this.viewport.height);\n    a.u(\"}\");\n    a.u(\"}\");\n    return a.toString();\n  };\n\n  Object.defineProperty(TreemapVisualData.prototype, \"viewport\", {\n    get: function () {\n      return this._viewport;\n    },\n    set: function (a) {\n      this._viewport = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TreemapVisualData.$t = markType(TreemapVisualData, 'TreemapVisualData');\n  return TreemapVisualData;\n}(Base);\n\nexport { TreemapVisualData };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/TreemapVisualData.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar TreemapVisualData = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TreemapVisualData, _super);\n    function TreemapVisualData() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._nodes = null;\n        _this._name = null;\n        _this._viewport = null;\n        return _this;\n    }\n    Object.defineProperty(TreemapVisualData.prototype, \"nodes\", {\n        get: function () {\n            return this._nodes;\n        },\n        set: function (a) {\n            this._nodes = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreemapVisualData.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        set: function (a) {\n            this._name = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TreemapVisualData.prototype.scaleByViewport = function () {\n        var e_1, _a;\n        if (this.nodes != null) {\n            try {\n                for (var _b = tslib_1.__values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var a = _c.value;\n                    a.e(this.viewport);\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        }\n    };\n    TreemapVisualData.prototype.serialize = function () {\n        var e_2, _a;\n        var a = new StringBuilder(0);\n        var b = true;\n        a.u(\"{\");\n        if (this.nodes != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            var c = true;\n            a.l(\"Nodes: [\");\n            try {\n                for (var _b = tslib_1.__values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var d = _c.value;\n                    if (c) {\n                        c = false;\n                    }\n                    else {\n                        a.l(\", \");\n                    }\n                    a.u(d.d());\n                }\n            }\n            catch (e_2_1) {\n                e_2 = { error: e_2_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_2)\n                        throw e_2.error;\n                }\n            }\n            a.u(\"]\");\n        }\n        if (this.name != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"name: '\");\n            a.l(this.name);\n            a.u(\"'\");\n        }\n        if (b) {\n            b = false;\n        }\n        else {\n            a.l(\", \");\n        }\n        a.l(\"viewport: {\");\n        a.l(\"left: \" + this.viewport.left + \", top: \" + this.viewport.top + \", width: \" + this.viewport.width + \", height: \" + this.viewport.height);\n        a.u(\"}\");\n        a.u(\"}\");\n        return a.toString();\n    };\n    Object.defineProperty(TreemapVisualData.prototype, \"viewport\", {\n        get: function () {\n            return this._viewport;\n        },\n        set: function (a) {\n            this._viewport = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TreemapVisualData.$t = markType(TreemapVisualData, 'TreemapVisualData');\n    return TreemapVisualData;\n}(Base));\nexport { TreemapVisualData };\n//# sourceMappingURL=TreemapVisualData.js.map\n"]},"metadata":{},"sourceType":"module"}