{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrNumericAxisBase } from \"./igr-numeric-axis-base\";\nimport { NumericAngleAxis } from \"./NumericAngleAxis\";\n/**\n * Represents a IgxDataChartComponent angle based axis for polar series.\n*/\n\nvar IgrNumericAngleAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrNumericAngleAxis, _super);\n\n  function IgrNumericAngleAxis(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrNumericAngleAxis.prototype.createImplementation = function () {\n    return new NumericAngleAxis();\n  };\n\n  Object.defineProperty(IgrNumericAngleAxis.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrNumericAngleAxis.prototype, \"isAngular\", {\n    /**\n     * Gets if the current axis is of angular axis type\n    */\n    get: function () {\n      return this.i.b0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrNumericAngleAxis.prototype, \"startAngleOffset\", {\n    /**\n     * Indicates the angle in degress that the chart's 0th angle should be offset.\n    */\n    get: function () {\n      return this.i.lm;\n    },\n    set: function (v) {\n      this.i.lm = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the scaled angle value in radians based on the raw input.\n  \r\n  * @param unscaledValue  * The raw input value.\n  */\n\n  IgrNumericAngleAxis.prototype.getScaledAngle = function (unscaledValue) {\n    var iv = this.i.getScaledAngle(unscaledValue);\n    return iv;\n  };\n  /**\n   * Gets the raw axis value back from the angle that would be used on the chart.\n  \r\n  * @param scaledValue  * The chart angle value.\n  */\n\n\n  IgrNumericAngleAxis.prototype.getUnscaledAngle = function (scaledValue) {\n    var iv = this.i.getUnscaledAngle(scaledValue);\n    return iv;\n  };\n\n  return IgrNumericAngleAxis;\n}(IgrNumericAxisBase);\n\nexport { IgrNumericAngleAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-numeric-angle-axis.ts"],"names":[],"mappings":";AAKA,SAAS,kBAAT,QAA6D,yBAA7D;AAEA,SAAS,gBAAT,QAAiC,oBAAjC;AAGA;;;;AAGA,IAAA,mBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,EAAA,MAAA;;AAaxC,WAAA,mBAAA,CAAY,KAAZ,EAA4C;WAC3C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,mBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,gBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAS5B,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AAHb;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFY;oBAAA;;AAAA,GAAb;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,kBAAJ,EAAoB;AAHpB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFmB;SAGpB,UAAqB,CAArB,EAA8B;AAC7B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALmB;oBAAA;;AAAA,GAApB;AAMA;;;;;;AAKO,EAAA,mBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,aAAtB,EAA2C;AAC1C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,cAAP,CAAsB,aAAtB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,WAAxB,EAA2C;AAC1C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,gBAAP,CAAwB,WAAxB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,mBAAA;AAAC,CAjDD,CAAyC,kBAAzC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrNumericAxisBase } from \"./igr-numeric-axis-base\";\nimport { NumericAngleAxis } from \"./NumericAngleAxis\";\n/**\n * Represents a IgxDataChartComponent angle based axis for polar series.\n*/\nvar IgrNumericAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrNumericAngleAxis, _super);\n    function IgrNumericAngleAxis(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrNumericAngleAxis.prototype.createImplementation = function () {\n        return new NumericAngleAxis();\n    };\n    Object.defineProperty(IgrNumericAngleAxis.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrNumericAngleAxis.prototype, \"isAngular\", {\n        /**\n         * Gets if the current axis is of angular axis type\n        */\n        get: function () {\n            return this.i.b0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrNumericAngleAxis.prototype, \"startAngleOffset\", {\n        /**\n         * Indicates the angle in degress that the chart's 0th angle should be offset.\n        */\n        get: function () {\n            return this.i.lm;\n        },\n        set: function (v) {\n            this.i.lm = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the scaled angle value in radians based on the raw input.\n    \r\n    * @param unscaledValue  * The raw input value.\n    */\n    IgrNumericAngleAxis.prototype.getScaledAngle = function (unscaledValue) {\n        var iv = this.i.getScaledAngle(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Gets the raw axis value back from the angle that would be used on the chart.\n    \r\n    * @param scaledValue  * The chart angle value.\n    */\n    IgrNumericAngleAxis.prototype.getUnscaledAngle = function (scaledValue) {\n        var iv = this.i.getUnscaledAngle(scaledValue);\n        return (iv);\n    };\n    return IgrNumericAngleAxis;\n}(IgrNumericAxisBase));\nexport { IgrNumericAngleAxis };\n//# sourceMappingURL=igr-numeric-angle-axis.js.map\n"]},"metadata":{},"sourceType":"module"}