{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrHorizontalRangeCategorySeries } from \"./igr-horizontal-range-category-series\";\nimport { RangeColumnSeries } from \"./RangeColumnSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent range column series.\n*\n* The `IgrRangeColumnSeries` class represents range column series of the IgxDataChartComponent.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrRangeColumnSeries\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series1 = new IgrRangeColumnSeries({ name: \"series1\" });\n* series1.highMemberPath = \"High\";\n* series1.lowMemberPath  = \"Low\";\n* series1.xAxisName = \"xAxis\";\n* series1.yAxisName = \"yAxis\";\n* this.chart.series.add(series1);\n* ```\n*/\n\nvar IgrRangeColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrRangeColumnSeries, _super);\n\n  function IgrRangeColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrRangeColumnSeries.prototype.createImplementation = function () {\n    return new RangeColumnSeries();\n  };\n\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    *\n    * Use the `radiusX` property to round the corners of the column.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *     <IgrRangeColumnSeries\n    *         name=\"series1\"\n    *         xAxisName=\"xAxis\"\n    *         yAxisName=\"yAxis\"\n    *         highMemberPath=\"High\"\n    *         lowMemberPath=\"Low\"\n    * \t\tradiusX={10} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.radiusX=10;\n    * ```\n    */\n    get: function () {\n      return this.i.pk;\n    },\n    set: function (v) {\n      this.i.pk = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    *\n    * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *     <IgrRangeColumnSeries\n    *         name=\"series1\"\n    *         xAxisName=\"xAxis\"\n    *         yAxisName=\"yAxis\"\n    *         highMemberPath=\"High\"\n    *         lowMemberPath=\"Low\"\n    * \t\tradiusY={10} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.radiusY=10;\n    * ```\n    */\n    get: function () {\n      return this.i.pl;\n    },\n    set: function (v) {\n      this.i.pl = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  *\n  * The `getSeriesValueBoundingBox` method return the best available value of the bounding box within the series.\n  */\n\n  IgrRangeColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.lu(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  *\n  * The `getItemSpan` method returns the current width of the items within the categories.\n  *\n  * ```ts\n  * var x =series.getItemSpan();\n  * ```\n  */\n\n\n  IgrRangeColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.eg();\n    return iv;\n  };\n\n  return IgrRangeColumnSeries;\n}(IgrHorizontalRangeCategorySeries);\n\nexport { IgrRangeColumnSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-range-column-series.ts"],"names":[],"mappings":";AAKA,SAAS,gCAAT,QAAyF,wCAAzF;AAKA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,qBAAlC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAAA,oBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,OAAA,CAAA,SAAA,CAAA,oBAAA,EAAA,MAAA;;AAazC,WAAA,oBAAA,CAAY,KAAZ,EAA6C;WAC5C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,oBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,iBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAkC5B,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AA5BX;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AAkCA,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AA5BX;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AAMA;;;;;;;;AAOO,EAAA,oBAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,KAAjC,EAA+C;AAC9C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAO,QAAQ,CAAC,EAAD,CAAf;AACA,GAHM;AAIP;;;;;;;;;;;;AAUO,EAAA,oBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,EAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,oBAAA;AAAC,CA7GD,CAA0C,gCAA1C,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrHorizontalRangeCategorySeries } from \"./igr-horizontal-range-category-series\";\nimport { RangeColumnSeries } from \"./RangeColumnSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent range column series.\n*\n* The `IgrRangeColumnSeries` class represents range column series of the IgxDataChartComponent.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrRangeColumnSeries\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series1 = new IgrRangeColumnSeries({ name: \"series1\" });\n* series1.highMemberPath = \"High\";\n* series1.lowMemberPath  = \"Low\";\n* series1.xAxisName = \"xAxis\";\n* series1.yAxisName = \"yAxis\";\n* this.chart.series.add(series1);\n* ```\n*/\nvar IgrRangeColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrRangeColumnSeries, _super);\n    function IgrRangeColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrRangeColumnSeries.prototype.createImplementation = function () {\n        return new RangeColumnSeries();\n    };\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        *\n        * Use the `radiusX` property to round the corners of the column.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *     <IgrRangeColumnSeries\n        *         name=\"series1\"\n        *         xAxisName=\"xAxis\"\n        *         yAxisName=\"yAxis\"\n        *         highMemberPath=\"High\"\n        *         lowMemberPath=\"Low\"\n        * \t\tradiusX={10} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.radiusX=10;\n        * ```\n        */\n        get: function () {\n            return this.i.pk;\n        },\n        set: function (v) {\n            this.i.pk = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        *\n        * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *     <IgrRangeColumnSeries\n        *         name=\"series1\"\n        *         xAxisName=\"xAxis\"\n        *         yAxisName=\"yAxis\"\n        *         highMemberPath=\"High\"\n        *         lowMemberPath=\"Low\"\n        * \t\tradiusY={10} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.radiusY=10;\n        * ```\n        */\n        get: function () {\n            return this.i.pl;\n        },\n        set: function (v) {\n            this.i.pl = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    *\n    * The `getSeriesValueBoundingBox` method return the best available value of the bounding box within the series.\n    */\n    IgrRangeColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.lu(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    *\n    * The `getItemSpan` method returns the current width of the items within the categories.\n    *\n    * ```ts\n    * var x =series.getItemSpan();\n    * ```\n    */\n    IgrRangeColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.eg();\n        return (iv);\n    };\n    return IgrRangeColumnSeries;\n}(IgrHorizontalRangeCategorySeries));\nexport { IgrRangeColumnSeries };\n//# sourceMappingURL=igr-range-column-series.js.map\n"]},"metadata":{},"sourceType":"module"}