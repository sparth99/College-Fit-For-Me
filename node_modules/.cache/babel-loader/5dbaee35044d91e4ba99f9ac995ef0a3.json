{"ast":null,"code":"import { FinancialCalculationDataSource as FinancialCalculationDataSource_internal } from \"./FinancialCalculationDataSource\";\nimport { ensureBool } from \"igniteui-react-core\";\n/**\n * Represents the data contract between a financial series and the\n * decoupled calculation responsibilities which implement its mathmatical logic.\n * The FinancialCalculationDataSource contract represents the subset\n * of data which needs to be provided in order to test or run a calculation,\n * and its intentionally a subset of the information available to the series,\n * in order to make calculation strategies more easily testable and usable in isolation to\n * the financial series container.\n*/\n\nvar IgrFinancialCalculationDataSource =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function IgrFinancialCalculationDataSource() {\n    this._implementation = this.createImplementation();\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  }\n\n  IgrFinancialCalculationDataSource.prototype.createImplementation = function () {\n    return new FinancialCalculationDataSource_internal();\n  };\n\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrFinancialCalculationDataSource.prototype.onImplementationCreated = function () {};\n\n  IgrFinancialCalculationDataSource.prototype._provideImplementation = function (i) {\n    this._implementation = i;\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  };\n\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"openColumn\", {\n    get: function () {\n      return this.i.series.getOpenColumnAsArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"highColumn\", {\n    get: function () {\n      return this.i.series.getHighColumnAsArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"lowColumn\", {\n    get: function () {\n      return this.i.series.getLowColumnAsArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"closeColumn\", {\n    get: function () {\n      return this.i.series.getCloseColumnAsArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"volumeColumn\", {\n    get: function () {\n      return this.i.series.getVolumeColumnAsArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"indicatorColumn\", {\n    get: function () {\n      return this.i.series.indicatorColumn.asArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"typicalColumn\", {\n    /**\n    * An enumerable list of typical prices provided by the series to use\n    * in calculations.\n    */\n    get: function () {\n      if (this.i.typicalColumn == null) {\n        return null;\n      }\n\n      return this.i.typicalColumn.externalObject;\n    },\n    set: function (v) {\n      v == null ? this.i.typicalColumn = null : this.i.typicalColumn = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"trueRange\", {\n    /**\n     * And enumerable list of true range values provided by the series to use\n     * in calculations.\n    */\n    get: function () {\n      if (this.i.trueRange == null) {\n        return null;\n      }\n\n      return this.i.trueRange.externalObject;\n    },\n    set: function (v) {\n      v == null ? this.i.trueRange = null : this.i.trueRange = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"trueLow\", {\n    /**\n     * An enumerable list of true low values provided by the series to use\n     * in calculations.\n    */\n    get: function () {\n      if (this.i.trueLow == null) {\n        return null;\n      }\n\n      return this.i.trueLow.externalObject;\n    },\n    set: function (v) {\n      v == null ? this.i.trueLow = null : this.i.trueLow = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"period\", {\n    /**\n     * The period to use when calculating, if applicable.\n    */\n    get: function () {\n      return this.i.period;\n    },\n    set: function (v) {\n      this.i.period = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"shortPeriod\", {\n    /**\n     * The short period to use when calculating, if applicable.\n    */\n    get: function () {\n      return this.i.shortPeriod;\n    },\n    set: function (v) {\n      this.i.shortPeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"longPeriod\", {\n    /**\n     * The long period to use when calculating, if applicable.\n    */\n    get: function () {\n      return this.i.longPeriod;\n    },\n    set: function (v) {\n      this.i.longPeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"count\", {\n    /**\n     * The count of the values in the series.\n    */\n    get: function () {\n      return this.i.count;\n    },\n    set: function (v) {\n      this.i.count = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"calculateFrom\", {\n    /**\n     * The starting index from which to calculate\n    */\n    get: function () {\n      return this.i.calculateFrom;\n    },\n    set: function (v) {\n      this.i.calculateFrom = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"calculateCount\", {\n    /**\n     * The number of items from the starting index from which to calculate\n    */\n    get: function () {\n      return this.i.calculateCount;\n    },\n    set: function (v) {\n      this.i.calculateCount = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"multiplier\", {\n    /**\n     * If the calculation supports some sort of scaling factor,\n     * this value will be used.\n    */\n    get: function () {\n      return this.i.multiplier;\n    },\n    set: function (v) {\n      this.i.multiplier = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"minimumValue\", {\n    /**\n     * If the calculation determines the range of indicator values,\n     * it will set the minimum and maximux properties.\n     * This will contain the previous minimum value when the indicator\n     * calculation is called again, in case this makes the update of the\n     * value speedier.\n    */\n    get: function () {\n      return this.i.minimumValue;\n    },\n    set: function (v) {\n      this.i.minimumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"maximumValue\", {\n    /**\n     * If the calculation determines the range of indicator values,\n     * it will set the minimum and maximux properties.\n     * This will contain the previous minimum value when the indicator\n     * calculation is called again, in case this makes the update of the\n     * value speedier.\n    */\n    get: function () {\n      return this.i.maximumValue;\n    },\n    set: function (v) {\n      this.i.maximumValue = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"specifiesRange\", {\n    /**\n     * The calculation strategy should set this to true if it\n     * specifes the minimum and maximum value properties.\n    */\n    get: function () {\n      return this.i.specifiesRange;\n    },\n    set: function (v) {\n      this.i.specifiesRange = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrFinancialCalculationDataSource;\n}();\n\nexport { IgrFinancialCalculationDataSource };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-financial-calculation-data-source.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FinancialCalculationDataSource as FinancialCalculationDataSource_internal } from \"./FinancialCalculationDataSource\";\nimport { ensureBool } from \"igniteui-react-core\";\n/**\n * Represents the data contract between a financial series and the\n * decoupled calculation responsibilities which implement its mathmatical logic.\n * The FinancialCalculationDataSource contract represents the subset\n * of data which needs to be provided in order to test or run a calculation,\n * and its intentionally a subset of the information available to the series,\n * in order to make calculation strategies more easily testable and usable in isolation to\n * the financial series container.\n*/\nvar IgrFinancialCalculationDataSource = /** @class */ /*@__PURE__*/ (function () {\n    function IgrFinancialCalculationDataSource() {\n        this._implementation = this.createImplementation();\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    }\n    IgrFinancialCalculationDataSource.prototype.createImplementation = function () {\n        return new FinancialCalculationDataSource_internal();\n    };\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrFinancialCalculationDataSource.prototype.onImplementationCreated = function () {\n    };\n    IgrFinancialCalculationDataSource.prototype._provideImplementation = function (i) {\n        this._implementation = i;\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    };\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"openColumn\", {\n        get: function () {\n            return this.i.series.getOpenColumnAsArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"highColumn\", {\n        get: function () {\n            return this.i.series.getHighColumnAsArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"lowColumn\", {\n        get: function () {\n            return this.i.series.getLowColumnAsArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"closeColumn\", {\n        get: function () {\n            return this.i.series.getCloseColumnAsArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"volumeColumn\", {\n        get: function () {\n            return this.i.series.getVolumeColumnAsArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"indicatorColumn\", {\n        get: function () {\n            return this.i.series.indicatorColumn.asArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"typicalColumn\", {\n        /**\n     * An enumerable list of typical prices provided by the series to use\n     * in calculations.\n    */\n        get: function () {\n            if (this.i.typicalColumn == null) {\n                return null;\n            }\n            return this.i.typicalColumn.externalObject;\n        },\n        set: function (v) {\n            v == null ? this.i.typicalColumn = null : this.i.typicalColumn = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"trueRange\", {\n        /**\n         * And enumerable list of true range values provided by the series to use\n         * in calculations.\n        */\n        get: function () {\n            if (this.i.trueRange == null) {\n                return null;\n            }\n            return this.i.trueRange.externalObject;\n        },\n        set: function (v) {\n            v == null ? this.i.trueRange = null : this.i.trueRange = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"trueLow\", {\n        /**\n         * An enumerable list of true low values provided by the series to use\n         * in calculations.\n        */\n        get: function () {\n            if (this.i.trueLow == null) {\n                return null;\n            }\n            return this.i.trueLow.externalObject;\n        },\n        set: function (v) {\n            v == null ? this.i.trueLow = null : this.i.trueLow = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"period\", {\n        /**\n         * The period to use when calculating, if applicable.\n        */\n        get: function () {\n            return this.i.period;\n        },\n        set: function (v) {\n            this.i.period = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"shortPeriod\", {\n        /**\n         * The short period to use when calculating, if applicable.\n        */\n        get: function () {\n            return this.i.shortPeriod;\n        },\n        set: function (v) {\n            this.i.shortPeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"longPeriod\", {\n        /**\n         * The long period to use when calculating, if applicable.\n        */\n        get: function () {\n            return this.i.longPeriod;\n        },\n        set: function (v) {\n            this.i.longPeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"count\", {\n        /**\n         * The count of the values in the series.\n        */\n        get: function () {\n            return this.i.count;\n        },\n        set: function (v) {\n            this.i.count = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"calculateFrom\", {\n        /**\n         * The starting index from which to calculate\n        */\n        get: function () {\n            return this.i.calculateFrom;\n        },\n        set: function (v) {\n            this.i.calculateFrom = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"calculateCount\", {\n        /**\n         * The number of items from the starting index from which to calculate\n        */\n        get: function () {\n            return this.i.calculateCount;\n        },\n        set: function (v) {\n            this.i.calculateCount = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"multiplier\", {\n        /**\n         * If the calculation supports some sort of scaling factor,\n         * this value will be used.\n        */\n        get: function () {\n            return this.i.multiplier;\n        },\n        set: function (v) {\n            this.i.multiplier = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"minimumValue\", {\n        /**\n         * If the calculation determines the range of indicator values,\n         * it will set the minimum and maximux properties.\n         * This will contain the previous minimum value when the indicator\n         * calculation is called again, in case this makes the update of the\n         * value speedier.\n        */\n        get: function () {\n            return this.i.minimumValue;\n        },\n        set: function (v) {\n            this.i.minimumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"maximumValue\", {\n        /**\n         * If the calculation determines the range of indicator values,\n         * it will set the minimum and maximux properties.\n         * This will contain the previous minimum value when the indicator\n         * calculation is called again, in case this makes the update of the\n         * value speedier.\n        */\n        get: function () {\n            return this.i.maximumValue;\n        },\n        set: function (v) {\n            this.i.maximumValue = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialCalculationDataSource.prototype, \"specifiesRange\", {\n        /**\n         * The calculation strategy should set this to true if it\n         * specifes the minimum and maximum value properties.\n        */\n        get: function () {\n            return this.i.specifiesRange;\n        },\n        set: function (v) {\n            this.i.specifiesRange = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrFinancialCalculationDataSource;\n}());\nexport { IgrFinancialCalculationDataSource };\n//# sourceMappingURL=igr-financial-calculation-data-source.js.map\n"]},"metadata":{},"sourceType":"module"}