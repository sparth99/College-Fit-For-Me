{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { BollingerBandWidthIndicator } from \"./BollingerBandWidthIndicator\";\n/**\n * Represents a IgxDataChartComponent Bollinger Bandwidth indicator series.\n * Represents the normalized width of the Bollinger bands for each provided value.\n * For more info see: BollingerBandsOverlay\n * Default required members: High, Low, Close\n*\n* You can use the `IgrBollingerBandWidthIndicator` to represents a IgxDataChartComponent Bollinger Bandwidth indicator series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*\n*     <IgrBollingerBandsOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*\n*     <IgrBollingerBandWidthIndicator\n*     name=\"series3\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Line\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrBollingerBandWidthIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrBollingerBandWidthIndicator, _super);\n\n  function IgrBollingerBandWidthIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrBollingerBandWidthIndicator.prototype.createImplementation = function () {\n    return new BollingerBandWidthIndicator();\n  };\n\n  Object.defineProperty(IgrBollingerBandWidthIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrBollingerBandWidthIndicator.prototype, \"period\", {\n    /**\n     * Gets or sets the moving average period for the Bollinger Band Width Indicator.\n     * The typical, and initial, value for CCI periods is 20.\n    *\n    * You can use the `period` to set the moving average.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandsOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandWidthIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tperiod= {14} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.series.period = 14;\n    * ```\n    */\n    get: function () {\n      return this.i.qy;\n    },\n    set: function (v) {\n      this.i.qy = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrBollingerBandWidthIndicator.prototype, \"multiplier\", {\n    /**\n     * Gets or sets the multiplier for the Bollinger Band width.\n     * The typical, and initial, value for Bollinger Band width multiplier is 2.\n    *\n    * Use the `multiplier` property for the Bollinger Band width. The typical, and initial, value for Bollinger Band width multiplier is 2.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandsOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandWidthIndicator\n    *     name=\"series3\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Line\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tMultiplier= {2} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.series.multiplier = 14;\n    * ```\n    */\n    get: function () {\n      return this.i.qx;\n    },\n    set: function (v) {\n      this.i.qx = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrBollingerBandWidthIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrBollingerBandWidthIndicator };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-bollinger-band-width-indicator.ts"],"names":[],"mappings":";AAKA,SAAS,yBAAT,QAA2E,gCAA3E;AAIA,SAAS,2BAAT,QAA4C,+BAA5C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,IAAA,8BAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoD,EAAA,OAAA,CAAA,SAAA,CAAA,8BAAA,EAAA,MAAA;;AAanD,WAAA,8BAAA,CAAY,KAAZ,EAAuD;WACtD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,8BAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,2BAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,8BAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AA8D5B,EAAA,MAAA,CAAA,cAAA,CAAI,8BAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AAxDV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAwDA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFS;SAGV,UAAW,CAAX,EAAoB;AACnB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALS;oBAAA;;AAAA,GAAV;AA8DA,EAAA,MAAA,CAAA,cAAA,CAAI,8BAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAxDd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAwDA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFa;SAGd,UAAe,CAAf,EAAwB;AACvB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALa;oBAAA;;AAAA,GAAd;AAMD,SAAA,8BAAA;AAAC,CA5ID,CAAoD,yBAApD,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { BollingerBandWidthIndicator } from \"./BollingerBandWidthIndicator\";\n/**\n * Represents a IgxDataChartComponent Bollinger Bandwidth indicator series.\n * Represents the normalized width of the Bollinger bands for each provided value.\n * For more info see: BollingerBandsOverlay\n * Default required members: High, Low, Close\n*\n* You can use the `IgrBollingerBandWidthIndicator` to represents a IgxDataChartComponent Bollinger Bandwidth indicator series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*\n*     <IgrBollingerBandsOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*\n*     <IgrBollingerBandWidthIndicator\n*     name=\"series3\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Line\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrBollingerBandWidthIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrBollingerBandWidthIndicator, _super);\n    function IgrBollingerBandWidthIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrBollingerBandWidthIndicator.prototype.createImplementation = function () {\n        return new BollingerBandWidthIndicator();\n    };\n    Object.defineProperty(IgrBollingerBandWidthIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrBollingerBandWidthIndicator.prototype, \"period\", {\n        /**\n         * Gets or sets the moving average period for the Bollinger Band Width Indicator.\n         * The typical, and initial, value for CCI periods is 20.\n        *\n        * You can use the `period` to set the moving average.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandsOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandWidthIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tperiod= {14} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.series.period = 14;\n        * ```\n        */\n        get: function () {\n            return this.i.qy;\n        },\n        set: function (v) {\n            this.i.qy = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrBollingerBandWidthIndicator.prototype, \"multiplier\", {\n        /**\n         * Gets or sets the multiplier for the Bollinger Band width.\n         * The typical, and initial, value for Bollinger Band width multiplier is 2.\n        *\n        * Use the `multiplier` property for the Bollinger Band width. The typical, and initial, value for Bollinger Band width multiplier is 2.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandsOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandWidthIndicator\n        *     name=\"series3\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Line\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tMultiplier= {2} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.series.multiplier = 14;\n        * ```\n        */\n        get: function () {\n            return this.i.qx;\n        },\n        set: function (v) {\n            this.i.qx = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrBollingerBandWidthIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrBollingerBandWidthIndicator };\n//# sourceMappingURL=igr-bollinger-band-width-indicator.js.map\n"]},"metadata":{},"sourceType":"module"}