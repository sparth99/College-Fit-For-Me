{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, markType } from \"igniteui-react-core\";\nimport { DVContainer } from \"igniteui-react-core\";\nimport { IDataChartVisualDataManager_$type } from \"./IDataChartVisualDataManager\";\nimport { DataChartVisualDataManager } from \"./DataChartVisualDataManager\";\nimport { IAxisVisualDataManager_$type } from \"./IAxisVisualDataManager\";\nimport { ISeriesVisualDataManager_$type } from \"./ISeriesVisualDataManager\";\nimport { AxisVisualDataManager } from \"./AxisVisualDataManager\";\nimport { SeriesVisualDataManager } from \"./SeriesVisualDataManager\";\n/**\n * @hidden\n */\n\nvar VisualDataFactoryManager =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(VisualDataFactoryManager, _super);\n\n  function VisualDataFactoryManager() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  VisualDataFactoryManager.register = function () {\n    if (!VisualDataFactoryManager.a) {\n      DVContainer.instance.registerFactory(IDataChartVisualDataManager_$type, function () {\n        return new DataChartVisualDataManager();\n      });\n      DVContainer.instance.registerFactory(IAxisVisualDataManager_$type, function () {\n        return new AxisVisualDataManager();\n      });\n      DVContainer.instance.registerFactory(ISeriesVisualDataManager_$type, function () {\n        return new SeriesVisualDataManager();\n      });\n      VisualDataFactoryManager.a = true;\n    }\n  };\n\n  VisualDataFactoryManager.$t = markType(VisualDataFactoryManager, 'VisualDataFactoryManager');\n  VisualDataFactoryManager.a = false;\n  return VisualDataFactoryManager;\n}(Base);\n\nexport { VisualDataFactoryManager };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/VisualDataFactoryManager.ts"],"names":[],"mappings":"AAAA;;;;;;;AAOA,SAAS,IAAT,EAAqB,QAArB,QAAqC,qBAArC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAsC,iCAAtC,QAA+E,+BAA/E;AACA,SAAS,0BAAT,QAA2C,8BAA3C;AACA,SAAiC,4BAAjC,QAAqE,0BAArE;AACA,SAAmC,8BAAnC,QAAyE,4BAAzE;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,uBAAT,QAAwC,2BAAxC;AAEA;;;;AAGA,IAAA,wBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,OAAA,CAAA,SAAA,CAAA,wBAAA,EAAA,MAAA;;AAA9C,WAAA,wBAAA,GAAA;;AAWC;;AARO,EAAA,wBAAA,CAAA,QAAA,GAAP,YAAA;AACC,QAAI,CAAC,wBAAwB,CAAC,CAA9B,EAAiC;AAChC,MAAA,WAAW,CAAC,QAAZ,CAAqB,eAArB,CAAqC,iCAArC,EAAwE,YAAA;AAAM,eAAA,IAAA,0BAAA,EAAA;AAAgC,OAA9G;AACA,MAAA,WAAW,CAAC,QAAZ,CAAqB,eAArB,CAAqC,4BAArC,EAAmE,YAAA;AAAM,eAAA,IAAA,qBAAA,EAAA;AAA2B,OAApG;AACA,MAAA,WAAW,CAAC,QAAZ,CAAqB,eAArB,CAAqC,8BAArC,EAAqE,YAAA;AAAM,eAAA,IAAA,uBAAA,EAAA;AAA6B,OAAxG;AACA,MAAA,wBAAwB,CAAC,CAAzB,GAA6B,IAA7B;AACA;AACD,GAPM;;AAFA,EAAA,wBAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,wBAAD,EAA2B,0BAA3B,CAAnB;AACQ,EAAA,wBAAA,CAAA,CAAA,GAAa,KAAb;AAShB,SAAA,wBAAA;AAAC,CAXD,CAA8C,IAA9C,CAAA;;SAAa,wB","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, markType } from \"igniteui-react-core\";\nimport { DVContainer } from \"igniteui-react-core\";\nimport { IDataChartVisualDataManager_$type } from \"./IDataChartVisualDataManager\";\nimport { DataChartVisualDataManager } from \"./DataChartVisualDataManager\";\nimport { IAxisVisualDataManager_$type } from \"./IAxisVisualDataManager\";\nimport { ISeriesVisualDataManager_$type } from \"./ISeriesVisualDataManager\";\nimport { AxisVisualDataManager } from \"./AxisVisualDataManager\";\nimport { SeriesVisualDataManager } from \"./SeriesVisualDataManager\";\n/**\n * @hidden\n */\nvar VisualDataFactoryManager = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(VisualDataFactoryManager, _super);\n    function VisualDataFactoryManager() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    VisualDataFactoryManager.register = function () {\n        if (!VisualDataFactoryManager.a) {\n            DVContainer.instance.registerFactory(IDataChartVisualDataManager_$type, function () { return new DataChartVisualDataManager(); });\n            DVContainer.instance.registerFactory(IAxisVisualDataManager_$type, function () { return new AxisVisualDataManager(); });\n            DVContainer.instance.registerFactory(ISeriesVisualDataManager_$type, function () { return new SeriesVisualDataManager(); });\n            VisualDataFactoryManager.a = true;\n        }\n    };\n    VisualDataFactoryManager.$t = markType(VisualDataFactoryManager, 'VisualDataFactoryManager');\n    VisualDataFactoryManager.a = false;\n    return VisualDataFactoryManager;\n}(Base));\nexport { VisualDataFactoryManager };\n//# sourceMappingURL=VisualDataFactoryManager.js.map\n"]},"metadata":{},"sourceType":"module"}