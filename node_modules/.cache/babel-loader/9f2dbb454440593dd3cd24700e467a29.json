{"ast":null,"code":"var _jsxFileName = \"/Users/Parth/web-project/src/Components/GDPPieChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport PieChartSlice from './PieChartSlice';\nimport Promises from 'es6-promise';\n\nclass GDPPieChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pieChartData: [],\n      pieChartNames: []\n    };\n  }\n\n  componentDidMount() {\n    let data = [];\n    let names = [];\n    let promises = [];\n\n    for (let i = 0; i < 25; i++) {\n      let offset = i * 10;\n      promises.push(axios.get('http://api.pathogerm.com/countries/?offset=' + offset).then(res => {\n        const data2 = res.data;\n        const results = data2.results;\n\n        for (let j = 0; j < 10; j++) {\n          if (results[j][\"pop\"] !== null && results[j][\"pop\"] > 50000000 && results[j][\"gdp\"] !== null) {\n            data.push(results[j][\"gdp\"]);\n            names.push(results[j][\"name\"]);\n          }\n        }\n      }));\n    }\n\n    Promises.all(promises).then(() => this.setState({\n      pieChartData: data,\n      pieChartNames: names\n    }));\n  }\n\n  componentDidUpdate() {\n    if (this.state.pieChartData != 0) {\n      const svg = d3.select(\"#pieChart\");\n      const dimensions = svg.node().getBoundingClientRect();\n      svg.attr(\"viewBox\", `${-dimensions.width / 2} ${-dimensions.height / 2} ${dimensions.width} ${dimensions.height}`);\n    }\n  }\n\n  render() {\n    if (this.state.pieChartData.length == 0) {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 20\n          }\n        }, \" Loading... \")\n      );\n    } else {\n      var data = this.state.pieChartData;\n      var arcs = d3.pie()(data);\n      var innerRadius = 0;\n      var outerRadius = 250;\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(\"svg\", {\n          width: \"750\",\n          height: \"500\",\n          id: \"pieChart\",\n          style: {\n            \"paddingTop\": '10px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }\n        }, arcs.map((obj, i) =>\n        /*#__PURE__*/\n        React.createElement(PieChartSlice, {\n          key: \"slice\" + i,\n          innerRadius: innerRadius,\n          outerRadius: outerRadius,\n          startAngle: obj.startAngle,\n          endAngle: obj.endAngle,\n          fillColor: d3.rgb(Math.random() * (180 - 1) + 1, Math.random() * (180 - 1) + 1, Math.random() * (180 - 60) + 1),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }\n        })), arcs.map((obj, i) =>\n        /*#__PURE__*/\n        React.createElement(\"text\", {\n          key: \"label\" + i,\n          className: \"slice-text\",\n          transform: `translate(${d3.arc().centroid({\n            innerRadius: outerRadius / 2,\n            outerRadius: outerRadius,\n            startAngle: obj.startAngle,\n            endAngle: obj.endAngle\n          })})`,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          style: {\n            fontSize: 13\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(\"tspan\", {\n          style: {\n            fontSize: 10\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }\n        }, this.state.pieChartNames[i])))))\n      );\n    }\n  }\n\n}\n\nexport default GDPPieChart;","map":{"version":3,"sources":["/Users/Parth/web-project/src/Components/GDPPieChart.js"],"names":["React","Component","d3","axios","PieChartSlice","Promises","GDPPieChart","state","pieChartData","pieChartNames","componentDidMount","data","names","promises","i","offset","push","get","then","res","data2","results","j","all","setState","componentDidUpdate","svg","select","dimensions","node","getBoundingClientRect","attr","width","height","render","length","arcs","pie","innerRadius","outerRadius","map","obj","startAngle","endAngle","rgb","Math","random","arc","centroid","fontSize"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCM,KAFgC,GAExB;AACJC,MAAAA,YAAY,EAAG,EADX;AAEJC,MAAAA,aAAa,EAAG;AAFZ,KAFwB;AAAA;;AAOhCC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEA,QAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAIC,MAAM,GAAGD,CAAC,GAAC,EAAf;AACAD,MAAAA,QAAQ,CAACG,IAAT,CACAb,KAAK,CAACc,GAAN,CAAU,gDAAgDF,MAA1D,EACCG,IADD,CACMC,GAAG,IAAI;AACT,cAAMC,KAAK,GAAGD,GAAG,CAACR,IAAlB;AACA,cAAMU,OAAO,GAAGD,KAAK,CAACC,OAAtB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,cAAID,OAAO,CAACC,CAAD,CAAP,CAAW,KAAX,MAAsB,IAAtB,IAA8BD,OAAO,CAACC,CAAD,CAAP,CAAW,KAAX,IAAoB,QAAlD,IAA8DD,OAAO,CAACC,CAAD,CAAP,CAAW,KAAX,MAAsB,IAAxF,EAA8F;AAC1FX,YAAAA,IAAI,CAACK,IAAL,CAAUK,OAAO,CAACC,CAAD,CAAP,CAAW,KAAX,CAAV;AACAV,YAAAA,KAAK,CAACI,IAAN,CAAWK,OAAO,CAACC,CAAD,CAAP,CAAW,MAAX,CAAX;AACH;AACJ;AACJ,OAXD,CADA;AAaH;;AAEDjB,IAAAA,QAAQ,CAACkB,GAAT,CAAaV,QAAb,EAAuBK,IAAvB,CAA4B,MAAM,KAAKM,QAAL,CAAc;AAAChB,MAAAA,YAAY,EAAGG,IAAhB;AAAsBF,MAAAA,aAAa,EAAGG;AAAtC,KAAd,CAAlC;AACH;;AAEDa,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKlB,KAAL,CAAWC,YAAX,IAA2B,CAA/B,EAAkC;AAChC,YAAMkB,GAAG,GAAGxB,EAAE,CAACyB,MAAH,CAAU,WAAV,CAAZ;AACA,YAAMC,UAAU,GAAGF,GAAG,CAACG,IAAJ,GAAWC,qBAAX,EAAnB;AACAJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,SAAT,EACG,GAAE,CAACH,UAAU,CAACI,KAAZ,GAAoB,CAAE,IAAG,CAACJ,UAAU,CAACK,MAAZ,GAAqB,CAAE,IAAGL,UAAU,CAACI,KAAM,IAAGJ,UAAU,CAACK,MAAO,EAD9F;AAED;AACF;;AAGHC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAK3B,KAAL,CAAWC,YAAX,CAAwB2B,MAAxB,IAAkC,CAAtC,EAAyC;AACrC;AAAA;AAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACH,KAFD,MAEO;AACH,UAAIxB,IAAI,GAAG,KAAKJ,KAAL,CAAWC,YAAtB;AACA,UAAI4B,IAAI,GAAGlC,EAAE,CAACmC,GAAH,GAAS1B,IAAT,CAAX;AACA,UAAI2B,WAAW,GAAG,CAAlB;AACA,UAAIC,WAAW,GAAG,GAAlB;AACA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAK,UAAA,KAAK,EAAC,KAAX;AAAiB,UAAA,MAAM,EAAC,KAAxB;AAA8B,UAAA,EAAE,EAAC,UAAjC;AAA4C,UAAA,KAAK,EAAE;AAAC,0BAAc;AAAf,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKH,IAAI,CAACI,GAAL,CAAS,CAACC,GAAD,EAAM3B,CAAN;AAAA;AACV,4BAAC,aAAD;AACI,UAAA,GAAG,EAAE,UAAUA,CADnB;AAEI,UAAA,WAAW,EAAIwB,WAFnB;AAGI,UAAA,WAAW,EAAIC,WAHnB;AAII,UAAA,UAAU,EAAIE,GAAG,CAACC,UAJtB;AAKI,UAAA,QAAQ,EAAID,GAAG,CAACE,QALpB;AAMI,UAAA,SAAS,EAAIzC,EAAE,CAAC0C,GAAH,CAAOC,IAAI,CAACC,MAAL,MAAiB,MAAM,CAAvB,IAA4B,CAAnC,EACDD,IAAI,CAACC,MAAL,MAAiB,MAAM,CAAvB,IAA4B,CAD3B,EAC8BD,IAAI,CAACC,MAAL,MAAiB,MAAM,EAAvB,IAA6B,CAD3D,CANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADC,CADL,EAYKV,IAAI,CAACI,GAAL,CAAS,CAACC,GAAD,EAAM3B,CAAN;AAAA;AACV;AAAM,UAAA,GAAG,EAAE,UAAUA,CAArB;AACQ,UAAA,SAAS,EAAC,YADlB;AAEQ,UAAA,SAAS,EAAG,aAAYZ,EAAE,CAAC6C,GAAH,GACvBC,QADuB,CACd;AACNV,YAAAA,WAAW,EAAEC,WAAW,GAAG,CADrB;AAENA,YAAAA,WAAW,EAAEA,WAFP;AAGNG,YAAAA,UAAU,EAAED,GAAG,CAACC,UAHV;AAINC,YAAAA,QAAQ,EAAEF,GAAG,CAACE;AAJR,WADc,CAKK,GAPrC;AASQ,UAAA,UAAU,EAAC,QATnB;AAUQ,UAAA,IAAI,EAAC,OAVb;AAWQ,UAAA,KAAK,EAAE;AAACM,YAAAA,QAAQ,EAAE;AAAX,WAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYI;AAAO,UAAA,KAAK,EAAE;AAACA,YAAAA,QAAQ,EAAE;AAAX,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,KAAK1C,KAAL,CAAWE,aAAX,CAAyBK,CAAzB,CADD,CAZJ,CADC,CAZL,CADA;AADJ;AAmCH;AACJ;;AAvF+B;;AA0FpC,eAAeR,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport PieChartSlice from './PieChartSlice';\nimport Promises from 'es6-promise';\n\nclass GDPPieChart extends Component {\n    \n    state = {\n        pieChartData : [],\n        pieChartNames : [],\n    };\n\n    componentDidMount() {\n        let data = [];\n        let names = [];\n\n        let promises = []\n\n        for (let i = 0; i < 25; i++) {\n            let offset = i*10\n            promises.push(\n            axios.get('http://api.pathogerm.com/countries/?offset=' + offset)\n            .then(res => {\n                const data2 = res.data;\n                const results = data2.results;\n    \n                for (let j = 0; j < 10; j++) {\n                    if (results[j][\"pop\"] !== null && results[j][\"pop\"] > 50000000 && results[j][\"gdp\"] !== null) {\n                        data.push(results[j][\"gdp\"])\n                        names.push(results[j][\"name\"])\n                    }\n                }\n            }))\n        }\n    \n        Promises.all(promises).then(() => this.setState({pieChartData : data, pieChartNames : names}));\n    }\n\n    componentDidUpdate() {\n        if (this.state.pieChartData != 0) {\n          const svg = d3.select(\"#pieChart\");\n          const dimensions = svg.node().getBoundingClientRect();\n          svg.attr(\"viewBox\",\n            `${-dimensions.width / 2} ${-dimensions.height / 2} ${dimensions.width} ${dimensions.height}`);\n        }\n      }\n    \n\n    render() {\n        if (this.state.pieChartData.length == 0) {\n            return <b> Loading... </b>\n        } else {\n            var data = this.state.pieChartData;\n            var arcs = d3.pie()(data);\n            var innerRadius = 0;\n            var outerRadius = 250;\n            return (\n                <div>\n                <svg width=\"750\" height=\"500\" id=\"pieChart\" style={{\"paddingTop\": '10px'}}>\n                    {arcs.map((obj, i) =>\n                    <PieChartSlice\n                        key={\"slice\" + i}\n                        innerRadius = {innerRadius}\n                        outerRadius = {outerRadius}\n                        startAngle = {obj.startAngle}\n                        endAngle = {obj.endAngle}\n                        fillColor = {d3.rgb(Math.random() * (180 - 1) + 1,\n                                    Math.random() * (180 - 1) + 1, Math.random() * (180 - 60) + 1)}\n                    />\n                    )}\n                    {arcs.map((obj, i) => \n                    <text key={\"label\" + i}\n                            className=\"slice-text\"\n                            transform={`translate(${d3.arc()\n                            .centroid({\n                                innerRadius: outerRadius / 2,\n                                outerRadius: outerRadius,\n                                startAngle: obj.startAngle,\n                                endAngle: obj.endAngle})})`\n                            }\n                            textAnchor=\"middle\"\n                            fill=\"white\"\n                            style={{fontSize: 13}}>\n                        <tspan style={{fontSize: 10}}>\n                        {this.state.pieChartNames[i]}\n                        </tspan>\n                    </text>\n                    )}\n                </svg>\n                </div>\n            );\n        }\n    }\n}\n\nexport default GDPPieChart;\n"]},"metadata":{},"sourceType":"module"}