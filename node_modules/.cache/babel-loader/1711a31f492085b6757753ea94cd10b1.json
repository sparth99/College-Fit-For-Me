{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { IgrAxis } from './igr-axis';\nimport { toPoint, fromRect, ensureBool } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent category-based axes.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrCategoryAxisBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrCategoryAxisBase, _super);\n\n  function IgrCategoryAxisBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._chartLevelData = null;\n    _this._dataSource = null;\n    return _this;\n  }\n\n  IgrCategoryAxisBase.prototype.provideData = function (data) {\n    this._chartLevelData = data;\n    this.updateDataSource();\n  };\n\n  IgrCategoryAxisBase.prototype.updateDataSource = function () {\n    if (this._dataSource == null) {\n      this.i.itemsSource = this._chartLevelData;\n    } else {\n      this.i.itemsSource = this._dataSource;\n    }\n  };\n\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"dataSource\", {\n    get: function () {\n      if (this._dataSource != null) {\n        return this._dataSource;\n      }\n\n      return this.i.itemsSource;\n    },\n    set: function (value) {\n      this._dataSource = value;\n      this.updateDataSource(); //console.log(\"setting axis data source: \" + value)\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"i\", {\n    /**\n                             * @hidden\n                             */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"isContinuous\", {\n    /**\n    * Gets if the current axis is a continuous rather than a discrete scale\n    */\n    get: function () {\n      return this.i.b4;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"isCategory\", {\n    /**\n     * Checks if the axis is of category axis type\n    */\n    get: function () {\n      return this.i.b2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"itemsCount\", {\n    /**\n     * Gets the number of items in the current category axis items source.\n    */\n    get: function () {\n      return this.i.jz;\n    },\n    set: function (v) {\n      this.i.jz = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"gap\", {\n    /**\n     * Gets or sets the amount of space between adjacent categories for the current axis object.\n     * The gap is silently clamped to the range [0, 1] when used.\n    *\n    * Use the `gap` property to configure the spacing between items on a category axis with item spacing.\n    *\n    * A `gap` of 0 allocates no space between items.  A `gap` of 1 allocates a space between items equal to the width of one item.\n    *\n    * To set the item spacing to 75% the width of one item, set the `gap` to 0.75, as in this code:\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tref={this.onChartRef}\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" gap={0.4} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jo;\n    },\n    set: function (v) {\n      this.i.jo = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"overlap\", {\n    /**\n     * Gets or sets the amount of overlap between adjacent categories for the current axis object.\n     * The overlap is silently clamped to the range [-1, 1] when used.\n    *\n    * Use the `overlap` property to configure the spacing between items on a category axis with item spacing and more than one series.\n    *\n    * An `overlap` of 0 places grouped items adjacent to each other.  An `overlap` of 1 places grouped items in the same axis space, completely overlapping.  An `overlap` of -1 places a space between grouped items equal to the width of one item.\n    *\n    * To place grouped items with 75% overlap, set the `overlap` to 0.75, as in this code:\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" overlap={1} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\"\n    * />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jv;\n    },\n    set: function (v) {\n      this.i.jv = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"useClusteringMode\", {\n    /**\n     * Gets or sets whether the category axis should use clustering display mode even if no series are present that would force clustering mode.\n    *\n    * `useClusteringMode` applies grouping and spacing to a category axis equivalent to the grouping that occurs when grouping series, such as ColumnSeries, are used.\n    *\n    * Try setting it on an axis displaying financial series to adjust the spacing on the left and right sides of the axis:\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" useClusteringMode={2} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.jj;\n    },\n    set: function (v) {\n      this.i.jj = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrCategoryAxisBase.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {\n    var iv = this.i.ku(toPoint(point), useInterpolation, singularWidth);\n    return fromRect(iv);\n  };\n\n  IgrCategoryAxisBase.prototype.getCategoryBoundingBoxHelper = function (point, useInterpolation, singularWidth, isVertical) {\n    var iv = this.i.kv(toPoint(point), useInterpolation, singularWidth, isVertical);\n    return fromRect(iv);\n  };\n  /**\n   * Unscales a value from screen space into axis space.\n  \r\n  * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.\n  */\n\n\n  IgrCategoryAxisBase.prototype.unscaleValue = function (unscaledValue) {\n    var iv = this.i.jw(unscaledValue);\n    return iv;\n  };\n\n  IgrCategoryAxisBase.prototype.notifySetItem = function (index, oldItem, newItem) {\n    this.i.kh(index, oldItem, newItem);\n  };\n  /**\n   * Used to manually notify the axis that the data source has reset or cleared its items.\n  \r\n  */\n\n\n  IgrCategoryAxisBase.prototype.notifyClearItems = function () {\n    this.i.ke();\n  };\n\n  IgrCategoryAxisBase.prototype.notifyInsertItem = function (index, newItem) {\n    this.i.kf(index, newItem);\n  };\n\n  IgrCategoryAxisBase.prototype.notifyRemoveItem = function (index, oldItem) {\n    this.i.kg(index, oldItem);\n  };\n\n  return IgrCategoryAxisBase;\n}(IgrAxis);\n\nexport { IgrCategoryAxisBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-category-axis-base.ts"],"names":[],"mappings":"AAAA;;;;;;;AAiBA,SAAS,OAAT,QAAwB,YAAxB;AAOA,SAAuC,OAAvC,EAAmE,QAAnE,EAA6E,UAA7E,QAAmJ,qBAAnJ;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAA,mBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmH,EAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,EAAA,MAAA;;AAC/G,WAAA,mBAAA,CAAY,KAAZ,EAAoB;AAApB,QAAA,KAAA,GACF,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADV;;AAIK,IAAA,KAAA,CAAA,eAAA,GAAuB,IAAvB;AAcA,IAAA,KAAA,CAAA,WAAA,GAAmB,IAAnB;;AAhBP;;AAGD,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,IAAZ,EAAuB;AACtB,SAAK,eAAL,GAAsB,IAAtB;AACA,SAAK,gBAAL;AACA,GAHD;;AAKQ,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACC,QAAI,KAAK,WAAL,IAAoB,IAAxB,EAA8B;AAC7B,WAAK,CAAL,CAAO,WAAP,GAAqB,KAAK,eAA1B;AACA,KAFD,MAEO;AACN,WAAK,CAAL,CAAO,WAAP,GAAqB,KAAK,WAA1B;AACA;AACD,GANO;;AAUL,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;SAKjB,YAAA;AACO,UAAI,KAAK,WAAL,IAAoB,IAAxB,EAA8B;AAChC,eAAO,KAAK,WAAZ;AACG;;AACD,aAAO,KAAK,CAAL,CAAO,WAAd;AACH,KAVa;SAAd,UAAe,KAAf,EAAyB;AAC3B,WAAK,WAAL,GAAmB,KAAnB;AACA,WAAK,gBAAL,GAF2B,CAG3B;AACA,KAJgB;oBAAA;;AAAA,GAAd;AAeyB,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHpC;;;SAGwB,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAO5B,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAHf;;;SAGD,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFe;oBAAA;;AAAA,GAAhB;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFa;oBAAA;;AAAA,GAAd;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFa;SAGd,UAAe,CAAf,EAAwB;AACvB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALa;oBAAA;;AAAA,GAAd;AAgCA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,KAAJ,EAAO;AA1BP;;;;;;;;;;;;;;;;;;;;;;;;;;SA0BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFM;SAGP,UAAQ,CAAR,EAAiB;AAChB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALM;oBAAA;;AAAA,GAAP;AAgCA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AA1BX;;;;;;;;;;;;;;;;;;;;;;;;;;SA0BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AA4BA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;AAtBrB;;;;;;;;;;;;;;;;;;;;;;SAsBA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFoB;SAGrB,UAAsB,CAAtB,EAAgC;AAC/B,WAAK,CAAL,CAAO,EAAP,GAAY,UAAU,CAAC,CAAD,CAAtB;AACA,KALoB;oBAAA;;AAAA,GAArB;;AASQ,EAAA,mBAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,UAA8B,KAA9B,EAA8C,gBAA9C,EAAyE,aAAzE,EAA8F;AAC9F,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,gBAA1B,EAA4C,aAA5C,CAAT;AACA,WAAO,QAAQ,CAAC,EAAD,CAAf;AACA,GAHO;;AAID,EAAA,mBAAA,CAAA,SAAA,CAAA,4BAAA,GAAP,UAAoC,KAApC,EAAoD,gBAApD,EAA+E,aAA/E,EAAsG,UAAtG,EAAyH;AACxH,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,gBAA1B,EAA4C,aAA5C,EAA2D,UAA3D,CAAT;AACA,WAAO,QAAQ,CAAC,EAAD,CAAf;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,aAApB,EAAyC;AACxC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,aAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAAoC,OAApC,EAAkD,OAAlD,EAA8D;AAC7D,SAAK,CAAL,CAAO,EAAP,CAAU,KAAV,EAAiB,OAAjB,EAA0B,OAA1B;AACA,GAFM;AAGP;;;;;;AAIO,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACC,SAAK,CAAL,CAAO,EAAP;AACA,GAFM;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,KAAxB,EAAuC,OAAvC,EAAmD;AAClD,SAAK,CAAL,CAAO,EAAP,CAAU,KAAV,EAAiB,OAAjB;AACA,GAFM;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,KAAxB,EAAuC,OAAvC,EAAmD;AAClD,SAAK,CAAL,CAAO,EAAP,CAAU,KAAV,EAAiB,OAAjB;AACA,GAFM;;AAGR,SAAA,mBAAA;AAAC,CA7LD,CAAmH,OAAnH,CAAA","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { IgrAxis } from './igr-axis';\nimport { toPoint, fromRect, ensureBool } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent category-based axes.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrCategoryAxisBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrCategoryAxisBase, _super);\n    function IgrCategoryAxisBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._chartLevelData = null;\n        _this._dataSource = null;\n        return _this;\n    }\n    IgrCategoryAxisBase.prototype.provideData = function (data) {\n        this._chartLevelData = data;\n        this.updateDataSource();\n    };\n    IgrCategoryAxisBase.prototype.updateDataSource = function () {\n        if (this._dataSource == null) {\n            this.i.itemsSource = this._chartLevelData;\n        }\n        else {\n            this.i.itemsSource = this._dataSource;\n        }\n    };\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"dataSource\", {\n        get: function () {\n            if (this._dataSource != null) {\n                return this._dataSource;\n            }\n            return this.i.itemsSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.updateDataSource();\n            //console.log(\"setting axis data source: \" + value)\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"i\", {\n        /**\n                                 * @hidden\n                                 */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"isContinuous\", {\n        /**\n     * Gets if the current axis is a continuous rather than a discrete scale\n    */\n        get: function () {\n            return this.i.b4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"isCategory\", {\n        /**\n         * Checks if the axis is of category axis type\n        */\n        get: function () {\n            return this.i.b2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"itemsCount\", {\n        /**\n         * Gets the number of items in the current category axis items source.\n        */\n        get: function () {\n            return this.i.jz;\n        },\n        set: function (v) {\n            this.i.jz = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"gap\", {\n        /**\n         * Gets or sets the amount of space between adjacent categories for the current axis object.\n         * The gap is silently clamped to the range [0, 1] when used.\n        *\n        * Use the `gap` property to configure the spacing between items on a category axis with item spacing.\n        *\n        * A `gap` of 0 allocates no space between items.  A `gap` of 1 allocates a space between items equal to the width of one item.\n        *\n        * To set the item spacing to 75% the width of one item, set the `gap` to 0.75, as in this code:\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tref={this.onChartRef}\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" gap={0.4} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jo;\n        },\n        set: function (v) {\n            this.i.jo = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"overlap\", {\n        /**\n         * Gets or sets the amount of overlap between adjacent categories for the current axis object.\n         * The overlap is silently clamped to the range [-1, 1] when used.\n        *\n        * Use the `overlap` property to configure the spacing between items on a category axis with item spacing and more than one series.\n        *\n        * An `overlap` of 0 places grouped items adjacent to each other.  An `overlap` of 1 places grouped items in the same axis space, completely overlapping.  An `overlap` of -1 places a space between grouped items equal to the width of one item.\n        *\n        * To place grouped items with 75% overlap, set the `overlap` to 0.75, as in this code:\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" overlap={1} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\"\n        * />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jv;\n        },\n        set: function (v) {\n            this.i.jv = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"useClusteringMode\", {\n        /**\n         * Gets or sets whether the category axis should use clustering display mode even if no series are present that would force clustering mode.\n        *\n        * `useClusteringMode` applies grouping and spacing to a category axis equivalent to the grouping that occurs when grouping series, such as ColumnSeries, are used.\n        *\n        * Try setting it on an axis displaying financial series to adjust the spacing on the left and right sides of the axis:\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" useClusteringMode={2} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.jj;\n        },\n        set: function (v) {\n            this.i.jj = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrCategoryAxisBase.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {\n        var iv = this.i.ku(toPoint(point), useInterpolation, singularWidth);\n        return fromRect(iv);\n    };\n    IgrCategoryAxisBase.prototype.getCategoryBoundingBoxHelper = function (point, useInterpolation, singularWidth, isVertical) {\n        var iv = this.i.kv(toPoint(point), useInterpolation, singularWidth, isVertical);\n        return fromRect(iv);\n    };\n    /**\n     * Unscales a value from screen space into axis space.\n    \r\n    * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.\n    */\n    IgrCategoryAxisBase.prototype.unscaleValue = function (unscaledValue) {\n        var iv = this.i.jw(unscaledValue);\n        return (iv);\n    };\n    IgrCategoryAxisBase.prototype.notifySetItem = function (index, oldItem, newItem) {\n        this.i.kh(index, oldItem, newItem);\n    };\n    /**\n     * Used to manually notify the axis that the data source has reset or cleared its items.\n    \r\n    */\n    IgrCategoryAxisBase.prototype.notifyClearItems = function () {\n        this.i.ke();\n    };\n    IgrCategoryAxisBase.prototype.notifyInsertItem = function (index, newItem) {\n        this.i.kf(index, newItem);\n    };\n    IgrCategoryAxisBase.prototype.notifyRemoveItem = function (index, oldItem) {\n        this.i.kg(index, oldItem);\n    };\n    return IgrCategoryAxisBase;\n}(IgrAxis));\nexport { IgrCategoryAxisBase };\n//# sourceMappingURL=igr-category-axis-base.js.map\n"]},"metadata":{},"sourceType":"module"}