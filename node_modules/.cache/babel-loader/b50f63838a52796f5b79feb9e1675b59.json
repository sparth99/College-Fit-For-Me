{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrNumericXAxis } from \"./igr-numeric-x-axis\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CollisionAvoidanceType_$type } from \"./CollisionAvoidanceType\";\nimport { IgrMarkerSeries } from \"./igr-marker-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent scatter series\n*/\n\nvar IgrScatterBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrScatterBase, _super);\n\n  function IgrScatterBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrScatterBase.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"isScatter\", {\n    /**\n     * Checks if this series is a scatter series\n    */\n    get: function () {\n      return this.i.c4;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for the current object.\n    */\n    get: function () {\n      if (this.i.xAxis == null) {\n        return null;\n      }\n\n      if (!this.i.xAxis.externalObject) {\n        var e = IgrNumericXAxis._createFromInternal(this.i.xAxis);\n\n        if (e) {\n          e._implementation = this.i.xAxis;\n        }\n\n        this.i.xAxis.externalObject = e;\n      }\n\n      return this.i.xAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function () {\n      return this._xAxisName;\n    },\n    set: function (v) {\n      this._xAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for the current object.\n    */\n    get: function () {\n      if (this.i.yAxis == null) {\n        return null;\n      }\n\n      if (!this.i.yAxis.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n\n        if (e) {\n          e._implementation = this.i.yAxis;\n        }\n\n        this.i.yAxis.externalObject = e;\n      }\n\n      return this.i.yAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function () {\n      return this._yAxisName;\n    },\n    set: function (v) {\n      this._yAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"xMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.nr;\n    },\n    set: function (v) {\n      this.i.nr = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"yMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    */\n    get: function () {\n      return this.i.nv;\n    },\n    set: function (v) {\n      this.i.nv = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current scatter series.\n    */\n    get: function () {\n      return this.i.trendLineType;\n    },\n    set: function (v) {\n      this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush to use to draw the trend line.\n    */\n    get: function () {\n      return brushToString(this.i.trendLineBrush);\n    },\n    set: function (v) {\n      this.i.trendLineBrush = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this series.\n    */\n    get: function () {\n      return brushToString(this.i.os);\n    },\n    set: function (v) {\n      this.i.os = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current scatter series object's trend line.\n    */\n    get: function () {\n      return this.i.trendLineThickness;\n    },\n    set: function (v) {\n      this.i.trendLineThickness = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the moving average period for the current scatter series object.\n     * The typical, and initial, value for trend line period is 7.\n    */\n    get: function () {\n      return this.i.trendLinePeriod;\n    },\n    set: function (v) {\n      this.i.trendLinePeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"markerCollisionAvoidance\", {\n    /**\n     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n    */\n    get: function () {\n      return this.i.m1;\n    },\n    set: function (v) {\n      this.i.m1 = ensureEnum(CollisionAvoidanceType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"trendLineZIndex\", {\n    /**\n     * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.\n    */\n    get: function () {\n      return this.i.nl;\n    },\n    set: function (v) {\n      this.i.nl = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterBase.prototype, \"maximumMarkers\", {\n    /**\n     * Gets or sets the maximum number of markerItems displayed by the current series.\n     * If more than the specified number of markerItems are visible, the series will automatically\n     * choose a representative set.\n    */\n    get: function () {\n      return this.i.nk;\n    },\n    set: function (v) {\n      this.i.nk = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrScatterBase.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrScatterBase.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrScatterBase.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.fs(item, memberPathName);\n    return iv;\n  };\n  /**\n   * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinates for which to get a value marker bounding box for\n  */\n\n\n  IgrScatterBase.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n    var iv = this.i.lw(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrScatterBase.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.nh(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrScatterBase.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.ng(axis);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrScatterBase.prototype.getItem = function (world) {\n    var iv = this.i.fp(toPoint(world));\n    return iv;\n  };\n  /**\n   * Gets the index of the item that resides at the provided world coordinates.\n  \r\n  * @param world  * The world coordinates of the requested item.\n  */\n\n\n  IgrScatterBase.prototype.getItemIndex = function (world) {\n    var iv = this.i.e8(toPoint(world));\n    return iv;\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  */\n\n\n  IgrScatterBase.prototype.scrollIntoView = function (item) {\n    var iv = this.i.c9(item);\n    return iv;\n  };\n\n  return IgrScatterBase;\n}(IgrMarkerSeries);\n\nexport { IgrScatterBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-scatter-base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrNumericXAxis } from \"./igr-numeric-x-axis\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CollisionAvoidanceType_$type } from \"./CollisionAvoidanceType\";\nimport { IgrMarkerSeries } from \"./igr-marker-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent scatter series\n*/\nvar IgrScatterBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrScatterBase, _super);\n    function IgrScatterBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        return _this;\n    }\n    Object.defineProperty(IgrScatterBase.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"isScatter\", {\n        /**\n         * Checks if this series is a scatter series\n        */\n        get: function () {\n            return this.i.c4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for the current object.\n        */\n        get: function () {\n            if (this.i.xAxis == null) {\n                return null;\n            }\n            if (!this.i.xAxis.externalObject) {\n                var e = IgrNumericXAxis._createFromInternal(this.i.xAxis);\n                if (e) {\n                    e._implementation = this.i.xAxis;\n                }\n                this.i.xAxis.externalObject = e;\n            }\n            return this.i.xAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for the current object.\n        */\n        get: function () {\n            if (this.i.yAxis == null) {\n                return null;\n            }\n            if (!this.i.yAxis.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n                if (e) {\n                    e._implementation = this.i.yAxis;\n                }\n                this.i.yAxis.externalObject = e;\n            }\n            return this.i.yAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"xMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.nr;\n        },\n        set: function (v) {\n            this.i.nr = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"yMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        */\n        get: function () {\n            return this.i.nv;\n        },\n        set: function (v) {\n            this.i.nv = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current scatter series.\n        */\n        get: function () {\n            return this.i.trendLineType;\n        },\n        set: function (v) {\n            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush to use to draw the trend line.\n        */\n        get: function () {\n            return brushToString(this.i.trendLineBrush);\n        },\n        set: function (v) {\n            this.i.trendLineBrush = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this series.\n        */\n        get: function () {\n            return brushToString(this.i.os);\n        },\n        set: function (v) {\n            this.i.os = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current scatter series object's trend line.\n        */\n        get: function () {\n            return this.i.trendLineThickness;\n        },\n        set: function (v) {\n            this.i.trendLineThickness = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the moving average period for the current scatter series object.\n         * The typical, and initial, value for trend line period is 7.\n        */\n        get: function () {\n            return this.i.trendLinePeriod;\n        },\n        set: function (v) {\n            this.i.trendLinePeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"markerCollisionAvoidance\", {\n        /**\n         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n        */\n        get: function () {\n            return this.i.m1;\n        },\n        set: function (v) {\n            this.i.m1 = ensureEnum(CollisionAvoidanceType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"trendLineZIndex\", {\n        /**\n         * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.\n        */\n        get: function () {\n            return this.i.nl;\n        },\n        set: function (v) {\n            this.i.nl = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterBase.prototype, \"maximumMarkers\", {\n        /**\n         * Gets or sets the maximum number of markerItems displayed by the current series.\n         * If more than the specified number of markerItems are visible, the series will automatically\n         * choose a representative set.\n        */\n        get: function () {\n            return this.i.nk;\n        },\n        set: function (v) {\n            this.i.nk = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrScatterBase.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrScatterBase.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    IgrScatterBase.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.fs(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\n    */\n    IgrScatterBase.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n        var iv = this.i.lw(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrScatterBase.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.nh(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrScatterBase.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.ng(axis);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrScatterBase.prototype.getItem = function (world) {\n        var iv = this.i.fp(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Gets the index of the item that resides at the provided world coordinates.\n    \r\n    * @param world  * The world coordinates of the requested item.\n    */\n    IgrScatterBase.prototype.getItemIndex = function (world) {\n        var iv = this.i.e8(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    */\n    IgrScatterBase.prototype.scrollIntoView = function (item) {\n        var iv = this.i.c9(item);\n        return (iv);\n    };\n    return IgrScatterBase;\n}(IgrMarkerSeries));\nexport { IgrScatterBase };\n//# sourceMappingURL=igr-scatter-base.js.map\n"]},"metadata":{},"sourceType":"module"}