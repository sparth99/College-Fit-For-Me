{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CategorySeriesMarkerCollisionAvoidance_$type } from \"./CategorySeriesMarkerCollisionAvoidance\";\nimport { ConsolidatedItemHitTestBehavior_$type } from \"./ConsolidatedItemHitTestBehavior\";\nimport { IgrCategorySeries } from \"./igr-category-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* The `IgrAnchoredCategorySeries` represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* ```ts\n* <IgrDataChart >\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrLineSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrAnchoredCategorySeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrAnchoredCategorySeries, _super);\n\n  function IgrAnchoredCategorySeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    *\n    * The `valueMemberPath` property is used for the value mapping property of the current series object.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.pd;\n    },\n    set: function (v) {\n      this.i.pd = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current series object.\n    *\n    * The `trendLineType` property is used for the current series object's trend type.'\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLineType=\"SimpleAverage\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineType= \"CubicFit\";\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineType;\n    },\n    set: function (v) {\n      this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush to use to draw the trend line.\n    *\n    * The `trendLineBrush` property is used to brush the trend line.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLineBrush=\"Gray\"  />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineBrush=\"red\";\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.trendLineBrush);\n    },\n    set: function (v) {\n      this.i.trendLineBrush = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this series.\n    *\n    * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.\n    */\n    get: function () {\n      return brushToString(this.i.pv);\n    },\n    set: function (v) {\n      this.i.pv = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current series object's trend line.\n    *\n    * The `trendLineThickness` property is used for thickness of the current series object's trend line.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLineThickness =\"2\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineThickness= 2;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineThickness;\n    },\n    set: function (v) {\n      this.i.trendLineThickness = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the trend line period for the current series.\n     * The typical, and initial, value for trend line period is 7.\n    *\n    * The `trendLinePeriod` property is used for trend line period of the current series.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLinePeriod =\"2\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLinePeriod= 7;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLinePeriod;\n    },\n    set: function (v) {\n      this.i.trendLinePeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"markerCollisionAvoidance\", {\n    /**\n     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n    *\n    * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \tmarkerCollisionAvoidance=\"fade\"  />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.o0;\n    },\n    set: function (v) {\n      this.i.o0 = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"consolidatedItemHitTestBehavior\", {\n    /**\n     * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.\n    *\n    * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \tconsolidatedItemHitTestBehavior=\"Basic\"  />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.o1;\n    },\n    set: function (v) {\n      this.i.o1 = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrAnchoredCategorySeries.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.fs(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  *\n  * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.\n  *\n  * ```ts\n  * this.series.scrollIntoView(dataItem);\n  * ```\n  */\n\n\n  IgrAnchoredCategorySeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.c9(item);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  *\n  * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.\n  *\n  * ```ts\n  * let item: number = this.series.getItem({x:.5,y:.5});\n  * ```\n  */\n\n\n  IgrAnchoredCategorySeries.prototype.getItem = function (world) {\n    var iv = this.i.fp(toPoint(world));\n    return iv;\n  };\n\n  return IgrAnchoredCategorySeries;\n}(IgrCategorySeries);\n\nexport { IgrAnchoredCategorySeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-anchored-category-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CategorySeriesMarkerCollisionAvoidance_$type } from \"./CategorySeriesMarkerCollisionAvoidance\";\nimport { ConsolidatedItemHitTestBehavior_$type } from \"./ConsolidatedItemHitTestBehavior\";\nimport { IgrCategorySeries } from \"./igr-category-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* The `IgrAnchoredCategorySeries` represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* ```ts\n* <IgrDataChart >\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrLineSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrAnchoredCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrAnchoredCategorySeries, _super);\n    function IgrAnchoredCategorySeries(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        *\n        * The `valueMemberPath` property is used for the value mapping property of the current series object.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.pd;\n        },\n        set: function (v) {\n            this.i.pd = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current series object.\n        *\n        * The `trendLineType` property is used for the current series object's trend type.'\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLineType=\"SimpleAverage\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineType= \"CubicFit\";\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineType;\n        },\n        set: function (v) {\n            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush to use to draw the trend line.\n        *\n        * The `trendLineBrush` property is used to brush the trend line.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLineBrush=\"Gray\"  />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineBrush=\"red\";\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.trendLineBrush);\n        },\n        set: function (v) {\n            this.i.trendLineBrush = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this series.\n        *\n        * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.\n        */\n        get: function () {\n            return brushToString(this.i.pv);\n        },\n        set: function (v) {\n            this.i.pv = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current series object's trend line.\n        *\n        * The `trendLineThickness` property is used for thickness of the current series object's trend line.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLineThickness =\"2\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineThickness= 2;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineThickness;\n        },\n        set: function (v) {\n            this.i.trendLineThickness = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the trend line period for the current series.\n         * The typical, and initial, value for trend line period is 7.\n        *\n        * The `trendLinePeriod` property is used for trend line period of the current series.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLinePeriod =\"2\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLinePeriod= 7;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLinePeriod;\n        },\n        set: function (v) {\n            this.i.trendLinePeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"markerCollisionAvoidance\", {\n        /**\n         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n        *\n        * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \tmarkerCollisionAvoidance=\"fade\"  />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.o0;\n        },\n        set: function (v) {\n            this.i.o0 = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"consolidatedItemHitTestBehavior\", {\n        /**\n         * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.\n        *\n        * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \tconsolidatedItemHitTestBehavior=\"Basic\"  />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.o1;\n        },\n        set: function (v) {\n            this.i.o1 = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrAnchoredCategorySeries.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.fs(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    *\n    * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.\n    *\n    * ```ts\n    * this.series.scrollIntoView(dataItem);\n    * ```\n    */\n    IgrAnchoredCategorySeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.c9(item);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    *\n    * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.\n    *\n    * ```ts\n    * let item: number = this.series.getItem({x:.5,y:.5});\n    * ```\n    */\n    IgrAnchoredCategorySeries.prototype.getItem = function (world) {\n        var iv = this.i.fp(toPoint(world));\n        return (iv);\n    };\n    return IgrAnchoredCategorySeries;\n}(IgrCategorySeries));\nexport { IgrAnchoredCategorySeries };\n//# sourceMappingURL=igr-anchored-category-series.js.map\n"]},"metadata":{},"sourceType":"module"}