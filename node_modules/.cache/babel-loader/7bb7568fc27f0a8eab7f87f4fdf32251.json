{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrStraightNumericAxisBase } from \"./igr-straight-numeric-axis-base\";\nimport { NumericYAxis } from \"./NumericYAxis\";\n/**\n * Represents a IgxDataChartComponent numeric Y axis.\n*\n* The `IgrNumericYAxis` treats the data as continuously varying numerical data items. Labels on this axis are placed along the Y-axis. Location of labels varies according to the value in a data column that is mapped using the `YMemberPath` property for Scatter Series or `ValueMemberPath` property for Category Series.\n*\n* ```ts\n* <IgrDataChart >\n*\n*     <IgrCategoryXAxis name=\"xAxis\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrNumericYAxis  name=\"yAxis\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*\n*     <IgrLineSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\"\n* \tconsolidatedItemHitTestBehavior=\"Basic\"  />\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrColumnSeries({ name: \"series1\" });\n* this.series.dataSource = this.data;\n* this.series.xAxis = this.categoryXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"xAxis\";\n* this.series.yAxisName = \"yAxis\";\n* ```\n*/\n\nvar IgrNumericYAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrNumericYAxis, _super);\n\n  function IgrNumericYAxis(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrNumericYAxis.prototype.createImplementation = function () {\n    return new NumericYAxis();\n  };\n\n  Object.defineProperty(IgrNumericYAxis.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrNumericYAxis.prototype, \"isVertical\", {\n    /**\n     * Gets if the current axis is of vertical axis\n    */\n    get: function () {\n      return this.i.cf;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrNumericYAxis.prototype.scrollRangeIntoView = function (minimum, maximum) {\n    this.i.lv(minimum, maximum);\n  };\n\n  return IgrNumericYAxis;\n}(IgrStraightNumericAxisBase);\n\nexport { IgrNumericYAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-numeric-y-axis.ts"],"names":[],"mappings":";AAKA,SAAS,0BAAT,QAA6E,kCAA7E;AAGA,SAAS,YAAT,QAA6B,gBAA7B;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAA,eAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8F,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAA,MAAA;;AAa7F,WAAA,eAAA,CAAY,KAAZ,EAAoB;WACgB,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AAG/C;;AAdQ,EAAA,eAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,YAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAW5B,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFa;oBAAA;;AAAA,GAAd;;AAGO,EAAA,eAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,OAA3B,EAA4C,OAA5C,EAA2D;AAC1D,SAAK,CAAL,CAAO,EAAP,CAAU,OAAV,EAAmB,OAAnB;AACA,GAFM;;AAGR,SAAA,eAAA;AAAC,CA3BD,CAA8F,0BAA9F,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrStraightNumericAxisBase } from \"./igr-straight-numeric-axis-base\";\nimport { NumericYAxis } from \"./NumericYAxis\";\n/**\n * Represents a IgxDataChartComponent numeric Y axis.\n*\n* The `IgrNumericYAxis` treats the data as continuously varying numerical data items. Labels on this axis are placed along the Y-axis. Location of labels varies according to the value in a data column that is mapped using the `YMemberPath` property for Scatter Series or `ValueMemberPath` property for Category Series.\n*\n* ```ts\n* <IgrDataChart >\n*\n*     <IgrCategoryXAxis name=\"xAxis\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrNumericYAxis  name=\"yAxis\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*\n*     <IgrLineSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\"\n* \tconsolidatedItemHitTestBehavior=\"Basic\"  />\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrColumnSeries({ name: \"series1\" });\n* this.series.dataSource = this.data;\n* this.series.xAxis = this.categoryXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"xAxis\";\n* this.series.yAxisName = \"yAxis\";\n* ```\n*/\nvar IgrNumericYAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrNumericYAxis, _super);\n    function IgrNumericYAxis(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrNumericYAxis.prototype.createImplementation = function () {\n        return new NumericYAxis();\n    };\n    Object.defineProperty(IgrNumericYAxis.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrNumericYAxis.prototype, \"isVertical\", {\n        /**\n         * Gets if the current axis is of vertical axis\n        */\n        get: function () {\n            return this.i.cf;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrNumericYAxis.prototype.scrollRangeIntoView = function (minimum, maximum) {\n        this.i.lv(minimum, maximum);\n    };\n    return IgrNumericYAxis;\n}(IgrStraightNumericAxisBase));\nexport { IgrNumericYAxis };\n//# sourceMappingURL=igr-numeric-y-axis.js.map\n"]},"metadata":{},"sourceType":"module"}