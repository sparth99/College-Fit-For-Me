{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrNumericAngleAxis } from \"./igr-numeric-angle-axis\";\nimport { IgrNumericRadiusAxis } from \"./igr-numeric-radius-axis\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { IgrMarkerSeries } from \"./igr-marker-series\";\nimport { ensureBool, ensureEnum, brushToString, stringToBrush, toPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class from which all IgxDataChartComponent polar series are derived.\n*/\n\nvar IgrPolarBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrPolarBase, _super);\n\n  function IgrPolarBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._angleAxisName = null;\n    _this._radiusAxisName = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrPolarBase.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"isPolar\", {\n    /**\n     * Checks if this series is a polar series\n    */\n    get: function () {\n      return this.i.c0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"angleMemberPath\", {\n    /**\n     * Gets or sets the path to use to find the angle values for the series.\n    */\n    get: function () {\n      return this.i.nw;\n    },\n    set: function (v) {\n      this.i.nw = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"radiusMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the radius values for the series.\n    */\n    get: function () {\n      return this.i.n2;\n    },\n    set: function (v) {\n      this.i.n2 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"angleAxis\", {\n    /**\n     * Gets the effective angle axis for the current series object.\n    */\n    get: function () {\n      if (this.i.m3 == null) {\n        return null;\n      }\n\n      if (!this.i.m3.externalObject) {\n        var e = IgrNumericAngleAxis._createFromInternal(this.i.m3);\n\n        if (e) {\n          e._implementation = this.i.m3;\n        }\n\n        this.i.m3.externalObject = e;\n      }\n\n      return this.i.m3.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.m3 = null : this.i.m3 = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"angleAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve angleAxis from markup.\n    */\n    get: function () {\n      return this._angleAxisName;\n    },\n    set: function (v) {\n      this._angleAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"radiusAxis\", {\n    /**\n     * Gets the effective radius axis for the current series object.\n    */\n    get: function () {\n      if (this.i.m4 == null) {\n        return null;\n      }\n\n      if (!this.i.m4.externalObject) {\n        var e = IgrNumericRadiusAxis._createFromInternal(this.i.m4);\n\n        if (e) {\n          e._implementation = this.i.m4;\n        }\n\n        this.i.m4.externalObject = e;\n      }\n\n      return this.i.m4.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.m4 = null : this.i.m4 = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"radiusAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve radiusAxis from markup.\n    */\n    get: function () {\n      return this._radiusAxisName;\n    },\n    set: function (v) {\n      this._radiusAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"useCartesianInterpolation\", {\n    /**\n     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian\n     * spiral based interpolation.\n    */\n    get: function () {\n      return this.i.no;\n    },\n    set: function (v) {\n      this.i.no = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"maximumMarkers\", {\n    /**\n     * Gets or sets the maximum number of markers displayed by the current series.\n     * If more than the specified number of markers are visible, the polar series will automatically\n     * choose a representative set.\n    */\n    get: function () {\n      return this.i.nr;\n    },\n    set: function (v) {\n      this.i.nr = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current series object.\n    */\n    get: function () {\n      return this.i.nf;\n    },\n    set: function (v) {\n      this.i.nf = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush that specifies how the current series\n     * object's trend line is drawn.\n    */\n    get: function () {\n      return brushToString(this.i.os);\n    },\n    set: function (v) {\n      this.i.os = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this series.\n    */\n    get: function () {\n      return brushToString(this.i.or);\n    },\n    set: function (v) {\n      this.i.or = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current series object's trend line.\n    */\n    get: function () {\n      return this.i.nq;\n    },\n    set: function (v) {\n      this.i.nq = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the moving average period for the current series object.\n    */\n    get: function () {\n      return this.i.ns;\n    },\n    set: function (v) {\n      this.i.ns = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"trendLineZIndex\", {\n    /**\n     * Sets or Gets the Trendline Z index.\n    */\n    get: function () {\n      return this.i.nt;\n    },\n    set: function (v) {\n      this.i.nt = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPolarBase.prototype, \"clipSeriesToBounds\", {\n    /**\n     * Gets or sets whether to clip the series to the bounds.\n     * Setting this to true can effect performance.\n    */\n    get: function () {\n      return this.i.nm;\n    },\n    set: function (v) {\n      this.i.nm = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrPolarBase.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.angleAxisName && this.angleAxisName.length > 0 && axes[i].name == this.angleAxisName) {\n        this.angleAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.radiusAxisName && this.radiusAxisName.length > 0 && axes[i].name == this.radiusAxisName) {\n        this.radiusAxis = axes[i];\n      }\n    }\n  };\n\n  IgrPolarBase.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.angleAxis && this.angleAxis._styling) {\n      this.angleAxis._styling(container, component, this);\n    }\n\n    if (this.radiusAxis && this.radiusAxis._styling) {\n      this.radiusAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n   * Scrolls the requested item into view, if possible.\n  \r\n  * @param item  * The item to scroll into view.\n  */\n\n\n  IgrPolarBase.prototype.scrollIntoView = function (item) {\n    var iv = this.i.c9(item);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrPolarBase.prototype.getItem = function (world) {\n    var iv = this.i.fp(toPoint(world));\n    return iv;\n  };\n  /**\n   * Gets the index of the item that resides at the provided world coordinates.\n  \r\n  * @param world  * The world coordinates of the requested item.\n  */\n\n\n  IgrPolarBase.prototype.getItemIndex = function (world) {\n    var iv = this.i.e8(toPoint(world));\n    return iv;\n  };\n\n  IgrPolarBase.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.fs(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as RadiusAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrPolarBase.prototype.canUseAsRadiusAxis = function (axis) {\n    var iv = this.i.nl(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as AngleAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrPolarBase.prototype.canUseAsAngleAxis = function (axis) {\n    var iv = this.i.nk(axis);\n    return iv;\n  };\n\n  return IgrPolarBase;\n}(IgrMarkerSeries);\n\nexport { IgrPolarBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-polar-base.ts"],"names":[],"mappings":";AAKA,SAAS,mBAAT,QAAoC,0BAApC;AACA,SAAS,oBAAT,QAAqC,2BAArC;AACA,SAAwB,mBAAxB,QAAmD,qBAAnD;AACA,SAAS,eAAT,QAAuD,qBAAvD;AAGA,SAAS,UAAT,EAAqB,UAArB,EAAiC,aAAjC,EAAgD,aAAhD,EAA+D,OAA/D,QAA8E,qBAA9E;AAGA;;;;AAGA,IAAA,YAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8F,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAU7F,WAAA,YAAA,CAAY,KAAZ,EAAoB;AAApB,QAAA,KAAA,GACoC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADhD;;AAoDoB,IAAA,KAAA,CAAA,cAAA,GAAyB,IAAzB;AAiCA,IAAA,KAAA,CAAA,eAAA,GAA0B,IAA1B;;AAjFnB;;AAP2B,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAW5B,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;oBAAA;;AAAA,GAAX;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AAHnB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAZ;AACA,KALkB;oBAAA;;AAAA,GAAnB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,kBAAJ,EAAoB;AAHpB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFmB;SAGpB,UAAqB,CAArB,EAA8B;AAC7B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAZ;AACA,KALmB;oBAAA;;AAAA,GAApB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AAHb;;;SAGA,YAAA;AACwC,UAAI,KAAK,CAAL,CAAO,EAAP,IAAa,IAAjB,EAAuB;AACnB,eAAO,IAAP;AACH;;AAED,UAAI,CAAE,KAAK,CAAL,CAAO,EAAP,CAAkB,cAAxB,EAAwC;AACpC,YAAI,CAAC,GAAG,mBAAmB,CAAC,mBAApB,CAAwC,KAAK,CAAL,CAAO,EAA/C,CAAR;;AACA,YAAI,CAAJ,EAAO;AACF,UAAA,CAAS,CAAC,eAAV,GAA4B,KAAK,CAAL,CAAO,EAAnC;AACJ;;AACA,aAAK,CAAL,CAAO,EAAP,CAAkB,cAAlB,GAAmC,CAAnC;AACJ;;AACxC,aAAQ,KAAK,CAAL,CAAO,EAAP,CAAkB,cAA1B;AACA,KAbY;SAcb,UAAc,CAAd,EAAoC;AACI,UAAI,CAAC,IAAI,IAAL,IAAa,KAAK,iBAAlB,IAAwC,CAAS,CAAC,QAAtD,EAAiE,CAAS,CAAC,QAAV,CAAmB,KAAK,iBAAxB,EAA2C,IAA3C,EAAiD,IAAjD;AAExG,MAAA,CAAC,IAAI,IAAL,GAAY,KAAK,CAAL,CAAO,EAAP,GAAY,IAAxB,GAA+B,KAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAC,CAA7C;AACA,KAlBY;oBAAA;;AAAA,GAAb;AAwBY,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA,YAAA;AACI,aAAO,KAAK,cAAZ;AACH,KAFuB;SAGxB,UAAyB,CAAzB,EAAkC;AAC9B,WAAK,cAAL,GAAsB,CAAtB;AACH,KALuB;oBAAA;;AAAA,GAAxB;AASZ,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACwC,UAAI,KAAK,CAAL,CAAO,EAAP,IAAa,IAAjB,EAAuB;AACnB,eAAO,IAAP;AACH;;AAED,UAAI,CAAE,KAAK,CAAL,CAAO,EAAP,CAAkB,cAAxB,EAAwC;AACpC,YAAI,CAAC,GAAG,oBAAoB,CAAC,mBAArB,CAAyC,KAAK,CAAL,CAAO,EAAhD,CAAR;;AACA,YAAI,CAAJ,EAAO;AACF,UAAA,CAAS,CAAC,eAAV,GAA4B,KAAK,CAAL,CAAO,EAAnC;AACJ;;AACA,aAAK,CAAL,CAAO,EAAP,CAAkB,cAAlB,GAAmC,CAAnC;AACJ;;AACxC,aAAQ,KAAK,CAAL,CAAO,EAAP,CAAkB,cAA1B;AACA,KAba;SAcd,UAAe,CAAf,EAAsC;AACE,UAAI,CAAC,IAAI,IAAL,IAAa,KAAK,iBAAlB,IAAwC,CAAS,CAAC,QAAtD,EAAiE,CAAS,CAAC,QAAV,CAAmB,KAAK,iBAAxB,EAA2C,IAA3C,EAAiD,IAAjD;AAExG,MAAA,CAAC,IAAI,IAAL,GAAY,KAAK,CAAL,CAAO,EAAP,GAAY,IAAxB,GAA+B,KAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAC,CAA7C;AACA,KAlBa;oBAAA;;AAAA,GAAd;AAwBY,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAHzB;;;SAGA,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFwB;SAGzB,UAA0B,CAA1B,EAAmC;AAC/B,WAAK,eAAL,GAAuB,CAAvB;AACH,KALwB;oBAAA;;AAAA,GAAzB;AAUZ,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,2BAAJ,EAA6B;AAJ7B;;;;SAIA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAF4B;SAG7B,UAA8B,CAA9B,EAAwC;AACvC,WAAK,CAAL,CAAO,EAAP,GAAY,UAAU,CAAC,CAAD,CAAtB;AACA,KAL4B;oBAAA;;AAAA,GAA7B;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,gBAAJ,EAAkB;AALlB;;;;;SAKA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFiB;SAGlB,UAAmB,CAAnB,EAA4B;AAC3B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALiB;oBAAA;;AAAA,GAAlB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,eAAJ,EAAiB;AAHjB;;;SAGA,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,EAAd;AACA,KAFgB;SAGjB,UAAkB,CAAlB,EAAkC;AACjC,WAAK,CAAL,CAAO,EAAP,GAAY,UAAU,CAAgB,mBAAhB,EAAqC,CAArC,CAAtB;AACA,KALgB;oBAAA;;AAAA,GAAjB;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,gBAAJ,EAAkB;AAJlB;;;;SAIA,YAAA;AACC,aAAO,aAAa,CAAC,KAAK,CAAL,CAAO,EAAR,CAApB;AACA,KAFiB;SAGlB,UAAmB,CAAnB,EAA4B;AAC3B,WAAK,CAAL,CAAO,EAAP,GAAY,aAAa,CAAC,CAAD,CAAzB;AACA,KALiB;oBAAA;;AAAA,GAAlB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,sBAAJ,EAAwB;AAHxB;;;SAGA,YAAA;AACC,aAAO,aAAa,CAAC,KAAK,CAAL,CAAO,EAAR,CAApB;AACA,KAFuB;SAGxB,UAAyB,CAAzB,EAAkC;AACjC,WAAK,CAAL,CAAO,EAAP,GAAY,aAAa,CAAC,CAAD,CAAzB;AACA,KALuB;oBAAA;;AAAA,GAAxB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AAHtB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFqB;SAGtB,UAAuB,CAAvB,EAAgC;AAC/B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALqB;oBAAA;;AAAA,GAAtB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AAHnB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALkB;oBAAA;;AAAA,GAAnB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AAHnB;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALkB;oBAAA;;AAAA,GAAnB;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AAJtB;;;;SAIA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFqB;SAGtB,UAAuB,CAAvB,EAAiC;AAChC,WAAK,CAAL,CAAO,EAAP,GAAY,UAAU,CAAC,CAAD,CAAtB;AACA,KALqB;oBAAA;;AAAA,GAAtB;;AAOoB,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA+B;AAC5B,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,IAAf;;AAEJ,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,UAAI,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAAlD,IACA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,KAAK,aADzB,EACwC;AACpC,aAAK,SAAL,GAAiB,IAAI,CAAC,CAAD,CAArB;AACH;AACJ;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,UAAI,KAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,MAApB,GAA6B,CAApD,IACA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,KAAK,cADzB,EACyC;AACrC,aAAK,UAAL,GAAkB,IAAI,CAAC,CAAD,CAAtB;AACH;AACJ;AAEZ,GAjBmB;;AAmBF,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAV,UAAmB,SAAnB,EAAmC,SAAnC,EAAmD,MAAnD,EAA+D;AAC3D,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,SAAf,EAA0B,SAA1B,EAAqC,MAArC;;AAEA,SAAK,UAAL,GAAkB,IAAlB;;AACA,QAAI,KAAK,SAAL,IAAmB,KAAK,SAAL,CAAuB,QAA9C,EAAwD;AAC/D,WAAK,SAAL,CAAuB,QAAvB,CAAgC,SAAhC,EAA2C,SAA3C,EAAsD,IAAtD;AACJ;;AACD,QAAI,KAAK,UAAL,IAAoB,KAAK,UAAL,CAAwB,QAAhD,EAA0D;AACrD,WAAK,UAAL,CAAwB,QAAxB,CAAiC,SAAjC,EAA4C,SAA5C,EAAuD,IAAvD;AACJ;;AAEW,SAAK,UAAL,GAAkB,KAAlB;AACH,GAZS;AAalB;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA+B;AAC9B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA6B;AAC5B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAkC;AACjC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAA+B,cAA/B,EAAqD;AACpD,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,EAAgB,cAAhB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,IAA1B,EAAmC;AAClC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,IAAzB,EAAkC;AACjC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,YAAA;AAAC,CAjRD,CAA8F,eAA9F,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrNumericAngleAxis } from \"./igr-numeric-angle-axis\";\nimport { IgrNumericRadiusAxis } from \"./igr-numeric-radius-axis\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { IgrMarkerSeries } from \"./igr-marker-series\";\nimport { ensureBool, ensureEnum, brushToString, stringToBrush, toPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class from which all IgxDataChartComponent polar series are derived.\n*/\nvar IgrPolarBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrPolarBase, _super);\n    function IgrPolarBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._angleAxisName = null;\n        _this._radiusAxisName = null;\n        return _this;\n    }\n    Object.defineProperty(IgrPolarBase.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"isPolar\", {\n        /**\n         * Checks if this series is a polar series\n        */\n        get: function () {\n            return this.i.c0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"angleMemberPath\", {\n        /**\n         * Gets or sets the path to use to find the angle values for the series.\n        */\n        get: function () {\n            return this.i.nw;\n        },\n        set: function (v) {\n            this.i.nw = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"radiusMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the radius values for the series.\n        */\n        get: function () {\n            return this.i.n2;\n        },\n        set: function (v) {\n            this.i.n2 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"angleAxis\", {\n        /**\n         * Gets the effective angle axis for the current series object.\n        */\n        get: function () {\n            if (this.i.m3 == null) {\n                return null;\n            }\n            if (!this.i.m3.externalObject) {\n                var e = IgrNumericAngleAxis._createFromInternal(this.i.m3);\n                if (e) {\n                    e._implementation = this.i.m3;\n                }\n                this.i.m3.externalObject = e;\n            }\n            return this.i.m3.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.m3 = null : this.i.m3 = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"angleAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve angleAxis from markup.\n        */\n        get: function () {\n            return this._angleAxisName;\n        },\n        set: function (v) {\n            this._angleAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"radiusAxis\", {\n        /**\n         * Gets the effective radius axis for the current series object.\n        */\n        get: function () {\n            if (this.i.m4 == null) {\n                return null;\n            }\n            if (!this.i.m4.externalObject) {\n                var e = IgrNumericRadiusAxis._createFromInternal(this.i.m4);\n                if (e) {\n                    e._implementation = this.i.m4;\n                }\n                this.i.m4.externalObject = e;\n            }\n            return this.i.m4.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.m4 = null : this.i.m4 = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"radiusAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve radiusAxis from markup.\n        */\n        get: function () {\n            return this._radiusAxisName;\n        },\n        set: function (v) {\n            this._radiusAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"useCartesianInterpolation\", {\n        /**\n         * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian\n         * spiral based interpolation.\n        */\n        get: function () {\n            return this.i.no;\n        },\n        set: function (v) {\n            this.i.no = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"maximumMarkers\", {\n        /**\n         * Gets or sets the maximum number of markers displayed by the current series.\n         * If more than the specified number of markers are visible, the polar series will automatically\n         * choose a representative set.\n        */\n        get: function () {\n            return this.i.nr;\n        },\n        set: function (v) {\n            this.i.nr = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current series object.\n        */\n        get: function () {\n            return this.i.nf;\n        },\n        set: function (v) {\n            this.i.nf = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush that specifies how the current series\n         * object's trend line is drawn.\n        */\n        get: function () {\n            return brushToString(this.i.os);\n        },\n        set: function (v) {\n            this.i.os = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this series.\n        */\n        get: function () {\n            return brushToString(this.i.or);\n        },\n        set: function (v) {\n            this.i.or = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current series object's trend line.\n        */\n        get: function () {\n            return this.i.nq;\n        },\n        set: function (v) {\n            this.i.nq = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the moving average period for the current series object.\n        */\n        get: function () {\n            return this.i.ns;\n        },\n        set: function (v) {\n            this.i.ns = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"trendLineZIndex\", {\n        /**\n         * Sets or Gets the Trendline Z index.\n        */\n        get: function () {\n            return this.i.nt;\n        },\n        set: function (v) {\n            this.i.nt = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPolarBase.prototype, \"clipSeriesToBounds\", {\n        /**\n         * Gets or sets whether to clip the series to the bounds.\n         * Setting this to true can effect performance.\n        */\n        get: function () {\n            return this.i.nm;\n        },\n        set: function (v) {\n            this.i.nm = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrPolarBase.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.angleAxisName && this.angleAxisName.length > 0 &&\n                axes[i].name == this.angleAxisName) {\n                this.angleAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.radiusAxisName && this.radiusAxisName.length > 0 &&\n                axes[i].name == this.radiusAxisName) {\n                this.radiusAxis = axes[i];\n            }\n        }\n    };\n    IgrPolarBase.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.angleAxis && this.angleAxis._styling) {\n            this.angleAxis._styling(container, component, this);\n        }\n        if (this.radiusAxis && this.radiusAxis._styling) {\n            this.radiusAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    /**\n     * Scrolls the requested item into view, if possible.\n    \r\n    * @param item  * The item to scroll into view.\n    */\n    IgrPolarBase.prototype.scrollIntoView = function (item) {\n        var iv = this.i.c9(item);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrPolarBase.prototype.getItem = function (world) {\n        var iv = this.i.fp(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Gets the index of the item that resides at the provided world coordinates.\n    \r\n    * @param world  * The world coordinates of the requested item.\n    */\n    IgrPolarBase.prototype.getItemIndex = function (world) {\n        var iv = this.i.e8(toPoint(world));\n        return (iv);\n    };\n    IgrPolarBase.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.fs(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as RadiusAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrPolarBase.prototype.canUseAsRadiusAxis = function (axis) {\n        var iv = this.i.nl(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as AngleAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrPolarBase.prototype.canUseAsAngleAxis = function (axis) {\n        var iv = this.i.nk(axis);\n        return (iv);\n    };\n    return IgrPolarBase;\n}(IgrMarkerSeries));\nexport { IgrPolarBase };\n//# sourceMappingURL=igr-polar-base.js.map\n"]},"metadata":{},"sourceType":"module"}