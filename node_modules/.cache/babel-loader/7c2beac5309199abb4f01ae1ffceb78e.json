{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { ensureBool } from \"igniteui-react-core\";\n/**\n * Represents an category-based horizontal X axis that uses a DateTime scale.\n*\n* Represents horizontal axis that uses a DateTime scale.\n*\n* ```ts\n*   <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*     <IgrTimeXAxis name=\"xAxis\"\n* \tlabel=\"Date\"\n* \tdateTimeMemberPath=\"Date\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n* timeXAxis.title = \"Time X Axis\";\n* timeXAxis.dataSource = data;\n* timeXAxis.dateTimeMemberPath = \"date\";\n* timeXAxis.label = \"Date\";\n* this.chart.axes.add(xAxis);\n* ```\n*/\n\nvar IgrTimeAxisBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrTimeAxisBase, _super);\n\n  function IgrTimeAxisBase(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"dateTimeMemberPath\", {\n    /**\n     * Gets or sets the DateTime mapping property for the axis.\n    *\n    * Use `dateTimeMemberPath` property for DateTime mapping with the axis.\n    *\n    * ```ts\n    *   <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *     <IgrTimeXAxis name=\"xAxis\"\n    * \tlabel=\"Date\"\n    * \tdateTimeMemberPath=\"Date\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n    * timeXAxis.title = \"Time X Axis\";\n    * timeXAxis.dataSource = data;\n    * timeXAxis.dateTimeMemberPath = \"date\";\n    * timeXAxis.label = \"Date\";\n    * this.chart.axes.add(xAxis);\n    * ```\n    */\n    get: function () {\n      return this.i.dateTimeMemberPath;\n    },\n    set: function (v) {\n      this.i.dateTimeMemberPath = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"isDataPreSorted\", {\n    /**\n     * Gets or sets whether the data assigned to the date time axis should be considered pre-sorted by date/time.\n    *\n    * Use `isDataPreSorted` property to decide if the data assigned to the date time axis should be considered pre-sorted by date/time.\n    *\n    * ```ts\n    *   <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *     <IgrTimeXAxis name=\"xAxis\"\n    * \tlabel=\"Date\"\n    * \tisDataPreSorted={true}\n    * \tdateTimeMemberPath=\"Date\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n    * timeXAxis.title = \"Time X Axis\";\n    * timeXAxis.dataSource = data;\n    * timeXAxis.dateTimeMemberPath = \"date\";\n    * timeXAxis.isDataPreSorted= true ;\n    * ```\n    */\n    get: function () {\n      return this.i.k2;\n    },\n    set: function (v) {\n      this.i.k2 = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"actualMinimumValue\", {\n    /**\n     * Gets the coerced minimum value.\n    *\n    * Use `actualMinimumValue` to get the coerced maximum value.\n    */\n    get: function () {\n      return this.i.actualMinimumValue;\n    },\n    set: function (v) {\n      this.i.actualMinimumValue = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"actualMaximumValue\", {\n    /**\n     * Gets the coerced maximum value.\n    *\n    * Use `actualMaximumValue` to get the  coerced maximum value\n    */\n    get: function () {\n      return this.i.actualMaximumValue;\n    },\n    set: function (v) {\n      this.i.actualMaximumValue = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"minimumValue\", {\n    /**\n     * Gets or sets the axis MinimumValue.\n    *\n    * Use `minimumValue` property for axis minimum value.\n    *\n    * ```ts\n    *   <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *     <IgrTimeXAxis name=\"xAxis\"\n    * \tlabel=\"Date\"\n    * \tmaximumValue=\"2019-12-26\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.timeXAxis.maximumValue=\"2019-12-26\";\n    * ```\n    */\n    get: function () {\n      return this.i.minimumValue;\n    },\n    set: function (v) {\n      this.i.minimumValue = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"maximumValue\", {\n    /**\n     * Gets or sets the axis MaximumValue.\n    *\n    * Use `maximumValue` property for axis maximum value.\n    *\n    * ```ts\n    * <IgrDataChart\n    * dataSource={this.state.dataSource}\n    * width=\"700px\"\n    * height=\"500px\">\n    * <IgrTimeXAxis name=\"xAxis\"\n    * label=\"Date\"\n    * dateTimeMemberPath=\"Date\"\n    * maximumValue =\"2019-12-26\"\n    * />\n    * ```\n    *\n    * ```ts\n    * this.timeXAxis.maximumValue=\"2019-12-26\";\n    * ```\n    */\n    get: function () {\n      return this.i.maximumValue;\n    },\n    set: function (v) {\n      this.i.maximumValue = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"isDateTime\", {\n    /**\n     * Checks if the axis is of date time axis type\n    *\n    * Use `isDateTime` property to Checks if the axis is of date time axis type.\n    *\n    * ```ts\n    * const isDT = this.timeXAxis.isDateTime;\n    * ```\n    */\n    get: function () {\n      return this.i.b5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTimeAxisBase.prototype, \"isSorting\", {\n    /**\n     * Checks if axis requires sorting of items\n    *\n    * Use `isSorting` property to Checks if axis requires sorting of items.\n    *\n    * ```ts\n    * const isDT = this.timeXAxis.isDateTime;\n    * ```\n    */\n    get: function () {\n      return this.i.cd;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTimeAxisBase.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.e4(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Gets the index of the data item with the value nearest the given value.\n  \r\n  * @param unscaledValue  * The value to find a value close to.\n  */\n\n\n  IgrTimeAxisBase.prototype.getIndexClosestToUnscaledValue = function (unscaledValue) {\n    var iv = this.i.i$f(unscaledValue);\n    return iv;\n  };\n  /**\n   * Updates the axis when the data has been changed.\n  \r\n  */\n\n\n  IgrTimeAxisBase.prototype.notifyDataChanged = function () {\n    this.i.i$i();\n  };\n\n  return IgrTimeAxisBase;\n}(IgrCategoryAxisBase);\n\nexport { IgrTimeAxisBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-time-axis-base.ts"],"names":[],"mappings":";AAKA,SAAS,mBAAT,QAA+D,0BAA/D;AAGA,SAAS,UAAT,QAA2B,qBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAA,eAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuG,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAA,MAAA;;AAUtG,WAAA,eAAA,CAAY,KAAZ,EAAoB;WACgB,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AAG/C;;AAP2B,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAiC5B,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AAzBtB;;;;;;;;;;;;;;;;;;;;;;;;;SAyBA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,kBAAf;AACA,KAFqB;SAGtB,UAAuB,CAAvB,EAAgC;AAC/B,WAAK,CAAL,CAAO,kBAAP,GAA4B,CAA5B;AACA,KALqB;oBAAA;;AAAA,GAAtB;AA+BA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AAzBnB;;;;;;;;;;;;;;;;;;;;;;;;;SAyBA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA8B;AAC7B,WAAK,CAAL,CAAO,EAAP,GAAY,UAAU,CAAC,CAAD,CAAtB;AACA,KALkB;oBAAA;;AAAA,GAAnB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AALtB;;;;;SAKA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,kBAAf;AACA,KAFqB;SAGtB,UAAuB,CAAvB,EAA8B;AAC7B,WAAK,CAAL,CAAO,kBAAP,GAA4B,CAA5B;AACA,KALqB;oBAAA;;AAAA,GAAtB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AALtB;;;;;SAKA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,kBAAf;AACA,KAFqB;SAGtB,UAAuB,CAAvB,EAA8B;AAC7B,WAAK,CAAL,CAAO,kBAAP,GAA4B,CAA5B;AACA,KALqB;oBAAA;;AAAA,GAAtB;AA0BA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AApBhB;;;;;;;;;;;;;;;;;;;;SAoBA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,YAAf;AACA,KAFe;SAGhB,UAAiB,CAAjB,EAAwB;AACvB,WAAK,CAAL,CAAO,YAAP,GAAsB,CAAtB;AACA,KALe;oBAAA;;AAAA,GAAhB;AA2BA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AArBhB;;;;;;;;;;;;;;;;;;;;;SAqBA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,YAAf;AACA,KAFe;SAGhB,UAAiB,CAAjB,EAAwB;AACvB,WAAK,CAAL,CAAO,YAAP,GAAsB,CAAtB;AACA,KALe;oBAAA;;AAAA,GAAhB;AAeA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AATd;;;;;;;;;SASA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFa;oBAAA;;AAAA,GAAd;AAYA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AATb;;;;;;;;;SASA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFY;oBAAA;;AAAA,GAAb;;AAGO,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAA+B,cAA/B,EAAqD;AACpD,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,EAAgB,cAAhB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,eAAA,CAAA,SAAA,CAAA,8BAAA,GAAP,UAAsC,aAAtC,EAA2D;AAC1D,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,GAAP,CAAW,aAAX,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACC,SAAK,CAAL,CAAO,GAAP;AACA,GAFM;;AAGR,SAAA,eAAA;AAAC,CApMD,CAAuG,mBAAvG,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { ensureBool } from \"igniteui-react-core\";\n/**\n * Represents an category-based horizontal X axis that uses a DateTime scale.\n*\n* Represents horizontal axis that uses a DateTime scale.\n*\n* ```ts\n*   <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*     <IgrTimeXAxis name=\"xAxis\"\n* \tlabel=\"Date\"\n* \tdateTimeMemberPath=\"Date\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n* timeXAxis.title = \"Time X Axis\";\n* timeXAxis.dataSource = data;\n* timeXAxis.dateTimeMemberPath = \"date\";\n* timeXAxis.label = \"Date\";\n* this.chart.axes.add(xAxis);\n* ```\n*/\nvar IgrTimeAxisBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrTimeAxisBase, _super);\n    function IgrTimeAxisBase(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"dateTimeMemberPath\", {\n        /**\n         * Gets or sets the DateTime mapping property for the axis.\n        *\n        * Use `dateTimeMemberPath` property for DateTime mapping with the axis.\n        *\n        * ```ts\n        *   <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *     <IgrTimeXAxis name=\"xAxis\"\n        * \tlabel=\"Date\"\n        * \tdateTimeMemberPath=\"Date\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n        * timeXAxis.title = \"Time X Axis\";\n        * timeXAxis.dataSource = data;\n        * timeXAxis.dateTimeMemberPath = \"date\";\n        * timeXAxis.label = \"Date\";\n        * this.chart.axes.add(xAxis);\n        * ```\n        */\n        get: function () {\n            return this.i.dateTimeMemberPath;\n        },\n        set: function (v) {\n            this.i.dateTimeMemberPath = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"isDataPreSorted\", {\n        /**\n         * Gets or sets whether the data assigned to the date time axis should be considered pre-sorted by date/time.\n        *\n        * Use `isDataPreSorted` property to decide if the data assigned to the date time axis should be considered pre-sorted by date/time.\n        *\n        * ```ts\n        *   <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *     <IgrTimeXAxis name=\"xAxis\"\n        * \tlabel=\"Date\"\n        * \tisDataPreSorted={true}\n        * \tdateTimeMemberPath=\"Date\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * timeXAxis = new IgrTimeXAxis({name: \"timeXAxis\"});\n        * timeXAxis.title = \"Time X Axis\";\n        * timeXAxis.dataSource = data;\n        * timeXAxis.dateTimeMemberPath = \"date\";\n        * timeXAxis.isDataPreSorted= true ;\n        * ```\n        */\n        get: function () {\n            return this.i.k2;\n        },\n        set: function (v) {\n            this.i.k2 = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"actualMinimumValue\", {\n        /**\n         * Gets the coerced minimum value.\n        *\n        * Use `actualMinimumValue` to get the coerced maximum value.\n        */\n        get: function () {\n            return this.i.actualMinimumValue;\n        },\n        set: function (v) {\n            this.i.actualMinimumValue = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"actualMaximumValue\", {\n        /**\n         * Gets the coerced maximum value.\n        *\n        * Use `actualMaximumValue` to get the  coerced maximum value\n        */\n        get: function () {\n            return this.i.actualMaximumValue;\n        },\n        set: function (v) {\n            this.i.actualMaximumValue = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"minimumValue\", {\n        /**\n         * Gets or sets the axis MinimumValue.\n        *\n        * Use `minimumValue` property for axis minimum value.\n        *\n        * ```ts\n        *   <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *     <IgrTimeXAxis name=\"xAxis\"\n        * \tlabel=\"Date\"\n        * \tmaximumValue=\"2019-12-26\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.timeXAxis.maximumValue=\"2019-12-26\";\n        * ```\n        */\n        get: function () {\n            return this.i.minimumValue;\n        },\n        set: function (v) {\n            this.i.minimumValue = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"maximumValue\", {\n        /**\n         * Gets or sets the axis MaximumValue.\n        *\n        * Use `maximumValue` property for axis maximum value.\n        *\n        * ```ts\n        * <IgrDataChart\n        * dataSource={this.state.dataSource}\n        * width=\"700px\"\n        * height=\"500px\">\n        * <IgrTimeXAxis name=\"xAxis\"\n        * label=\"Date\"\n        * dateTimeMemberPath=\"Date\"\n        * maximumValue =\"2019-12-26\"\n        * />\n        * ```\n        *\n        * ```ts\n        * this.timeXAxis.maximumValue=\"2019-12-26\";\n        * ```\n        */\n        get: function () {\n            return this.i.maximumValue;\n        },\n        set: function (v) {\n            this.i.maximumValue = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"isDateTime\", {\n        /**\n         * Checks if the axis is of date time axis type\n        *\n        * Use `isDateTime` property to Checks if the axis is of date time axis type.\n        *\n        * ```ts\n        * const isDT = this.timeXAxis.isDateTime;\n        * ```\n        */\n        get: function () {\n            return this.i.b5;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTimeAxisBase.prototype, \"isSorting\", {\n        /**\n         * Checks if axis requires sorting of items\n        *\n        * Use `isSorting` property to Checks if axis requires sorting of items.\n        *\n        * ```ts\n        * const isDT = this.timeXAxis.isDateTime;\n        * ```\n        */\n        get: function () {\n            return this.i.cd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTimeAxisBase.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.e4(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Gets the index of the data item with the value nearest the given value.\n    \r\n    * @param unscaledValue  * The value to find a value close to.\n    */\n    IgrTimeAxisBase.prototype.getIndexClosestToUnscaledValue = function (unscaledValue) {\n        var iv = this.i.i$f(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Updates the axis when the data has been changed.\n    \r\n    */\n    IgrTimeAxisBase.prototype.notifyDataChanged = function () {\n        this.i.i$i();\n    };\n    return IgrTimeAxisBase;\n}(IgrCategoryAxisBase));\nexport { IgrTimeAxisBase };\n//# sourceMappingURL=igr-time-axis-base.js.map\n"]},"metadata":{},"sourceType":"module"}