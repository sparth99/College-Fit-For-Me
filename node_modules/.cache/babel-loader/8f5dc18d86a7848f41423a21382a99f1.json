{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrVerticalAnchoredCategorySeries } from \"./igr-vertical-anchored-category-series\";\nimport { BarSeries } from \"./BarSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent bar series.\n*/\n\nvar IgrBarSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrBarSeries, _super);\n\n  function IgrBarSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrBarSeries.prototype.createImplementation = function () {\n    return new BarSeries();\n  };\n\n  Object.defineProperty(IgrBarSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrBarSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\n    */\n    get: function () {\n      return this.i.qa;\n    },\n    set: function (v) {\n      this.i.qa = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrBarSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\n    */\n    get: function () {\n      return this.i.qb;\n    },\n    set: function (v) {\n      this.i.qb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  */\n\n  IgrBarSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.lu(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  */\n\n\n  IgrBarSeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.c9(item);\n    return iv;\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrBarSeries.prototype.getItemSpan = function () {\n    var iv = this.i.eg();\n    return iv;\n  };\n\n  return IgrBarSeries;\n}(IgrVerticalAnchoredCategorySeries);\n\nexport { IgrBarSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-bar-series.ts"],"names":[],"mappings":";AAKA,SAAS,iCAAT,QAA2F,yCAA3F;AAKA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,qBAAlC;AAEA;;;;AAGA,IAAA,YAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAajC,WAAA,YAAA,CAAY,KAAZ,EAAqC;WACpC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,SAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAS5B,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AAMA;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,KAAjC,EAA+C;AAC9C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAO,QAAQ,CAAC,EAAD,CAAf;AACA,GAHM;AAIP;;;;;;;;;AAOO,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA+B;AAC9B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;AAIO,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,EAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,YAAA;AAAC,CA9DD,CAAkC,iCAAlC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrVerticalAnchoredCategorySeries } from \"./igr-vertical-anchored-category-series\";\nimport { BarSeries } from \"./BarSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent bar series.\n*/\nvar IgrBarSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrBarSeries, _super);\n    function IgrBarSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrBarSeries.prototype.createImplementation = function () {\n        return new BarSeries();\n    };\n    Object.defineProperty(IgrBarSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrBarSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\n        */\n        get: function () {\n            return this.i.qa;\n        },\n        set: function (v) {\n            this.i.qa = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrBarSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\n        */\n        get: function () {\n            return this.i.qb;\n        },\n        set: function (v) {\n            this.i.qb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    */\n    IgrBarSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.lu(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    */\n    IgrBarSeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.c9(item);\n        return (iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrBarSeries.prototype.getItemSpan = function () {\n        var iv = this.i.eg();\n        return (iv);\n    };\n    return IgrBarSeries;\n}(IgrVerticalAnchoredCategorySeries));\nexport { IgrBarSeries };\n//# sourceMappingURL=igr-bar-series.js.map\n"]},"metadata":{},"sourceType":"module"}