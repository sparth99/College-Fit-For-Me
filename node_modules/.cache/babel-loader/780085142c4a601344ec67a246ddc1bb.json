{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { GridMode_$type } from './GridMode';\nimport { IgrSeriesViewer } from './igr-series-viewer';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamDataChart } from './XamDataChart';\nimport { CollectionAdapter, brushToString, stringToBrush, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, NamePatcher } from \"igniteui-react-core\";\nimport { Axis } from './Axis';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { IgrSeriesCollection } from './igr-series-collection';\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { IgrAxisCollection } from './igr-axis-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { SyncLinkManager } from './SyncLinkManager';\nimport { SyncLink } from './SyncLink';\n/**\n * Represents a chart area containing axes, series, an optional legend and other hosted content.\n*/\n\nvar IgrDataChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrDataChart, _super);\n\n  function IgrDataChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.contentAxes = [];\n    _this.contentSeries = [];\n    /**\n     * The series actually present in the chart. Do not directly modify this array.\n     * This array's contents can be modified by causing React to reproject the child content.\n     * Or adding and removing series from the manual series collection on the series property.\n     */\n\n    _this.actualSeries = [];\n    /**\n     * The axes actually present in the chart. Do not directly modify this array.\n     * This array's contents can be modified by causing React to reproject the child content.\n     * Or adding and removing axes from the manual axes collection on the axes property.\n     */\n\n    _this.actualAxes = [];\n    _this._series = null;\n    _this._axes = null;\n    _this._initialized = false;\n    _this._axesAdapter = null;\n    _this._seriesAdapter = null;\n    _this._defaultTooltips = null;\n    _this._uniqueTooltipId = 0;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._tooltipRef = _this._tooltipRef.bind(_this);\n    _this._activeTooltipElements = new Map();\n    _this._activeTooltips = new Map();\n    _this._currentTooltips = [];\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n\n    if (document) {\n      _this._container = document.createElement(\"div\");\n      _this._container.style.display = \"block\";\n      _this._container.style.width = \"100%\";\n      _this._container.style.height = \"100%\";\n    }\n\n    var root;\n    root = _this._container;\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this._wrapper = ren;\n    var chart = _this.i;\n    _this._chart = chart;\n    _this._axesAdapter = new CollectionAdapter(_this.contentAxes, _this.i.axes, _this.actualAxes, function (c) {\n      return c.i;\n    }, function (i) {\n      i._provideRenderer(_this._wrapper);\n\n      i.provideData(_this._dataSource);\n\n      if (_this._container && _this._container.parentElement) {\n        i._styling(_this._container, _this, _this);\n      }\n\n      _this._checkCrossing();\n    }, function (i) {\n      i._provideRenderer(null);\n\n      i.provideData(null);\n    });\n    _this._seriesAdapter = new CollectionAdapter(_this.contentSeries, _this.i.series, _this.actualSeries, function (c) {\n      return c.i;\n    }, function (i) {\n      i.owner = _this;\n\n      i._provideRenderer(_this._wrapper);\n\n      i.provideData(_this._dataSource);\n\n      if (_this._container && _this._container.parentElement) {\n        i._styling(_this._container, _this, _this);\n      }\n\n      i.bindAxes(_this.actualAxes);\n\n      _this._ensureDefaultTooltip(i);\n\n      _this._ensureTooltipCreated(i);\n    }, function (i) {\n      i._provideRenderer(null);\n\n      i.provideData(null);\n    });\n    chart.provideContainer(ren);\n    ren.addSizeWatcher(function () {\n      _this._chart.notifyContainerResized();\n    });\n    _this._initialized = true;\n    return _this;\n  }\n\n  Object.defineProperty(IgrDataChart.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._chart.notifyContainerResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"legend\", {\n    /**\n     * Gets or sets the legend used for the current chart.\n    */\n    get: function () {\n      if (this.i.legend != null) return this.i.legend.externalObject;\n    },\n    set: function (v) {\n      if (v != undefined && v != null) this.i.legend = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDataChart.prototype._updateContentChildren = function () {\n    this.contentAxes.length = 0;\n    this.contentSeries.length = 0;\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (Axis.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentAxes.push(contentChildrenActual[i]);\n      } else {\n        this.contentSeries.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._axesAdapter !== null) {\n      this._axesAdapter.notifyContentChanged();\n    }\n\n    if (this._seriesAdapter !== null) {\n      this._seriesAdapter.notifyContentChanged();\n    }\n  }; // private _childrenDiffer(children: any): boolean {\n  //     if (this._contentChildren === null) {\n  //         return true;\n  //     }\n  //     if (React.Children.count(children) != this._contentChildren.length) {\n  //         return true;\n  //     }\n  //     let arr = React.Children.toArray(children);\n  //     for (let i = 0; i < arr.length; i++) {\n  //         if ((arr[i] as any).props.name !== this._contentChildren[i].props.name) {\n  //             return true;\n  //         }\n  //     }\n  //     return false;\n  // }\n\n\n  IgrDataChart.prototype._getMainRef = function (ref) {\n    this._elRef = ref;\n  };\n\n  IgrDataChart.prototype.render = function () {\n    // if (!this._childrenDiffer(this.props.children)) {\n    // \tlet div = React.createElement(\"div\", {\n    // \t\tref: (ref) => {\n    // \t\t\tthis._elRef = ref;\n    // \t\t},\n    // \t\tchildren: this.props.children\n    // \t});\n    // \treturn div;\n    // } else {\n    var children = this._contentChildrenManager.getChildren(this.props.children); //this._contentChildrenUnresolved = this._contentChildrenMap.size;\n\n\n    if (this._currentTooltips && this._currentTooltips.length > 0) {\n      //children = React.Children.toArray(this.props.children);\n      for (var i = 0; i < this._currentTooltips.length; i++) {\n        var t = this._currentTooltips[i];\n\n        if (this._activeTooltipElements.has(t)) {\n          children.push(this._activeTooltipElements.get(t));\n        } else {\n          if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n            continue;\n          }\n\n          var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n          var tEle = React.createElement(Tooltip, {\n            ref: this._tooltipRef,\n            key: this._currentTooltips[i].key,\n            owner: this._currentTooltips[i]\n          });\n          var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n\n          this._activeTooltipElements.set(t, portal);\n\n          children.push(portal);\n        }\n      }\n    }\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-data-chart igr-data-chart\",\n      ref: this._getMainRef,\n      children: children\n    });\n    return div; //}\n  };\n\n  IgrDataChart.prototype._tooltipRef = function (t) {\n    //console.log(t);\n    if (t === null) {\n      return;\n    }\n\n    if (t.currentOwner && t.currentOwner.tooltipTemplate) {\n      t.template = t.currentOwner.tooltipTemplate;\n    }\n\n    this._activeTooltips.set(t.currentOwner, t);\n  };\n\n  IgrDataChart.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container);\n\n    this._chart.notifyContainerResized();\n\n    this.initializeContent();\n  };\n\n  Object.defineProperty(IgrDataChart.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n\n        this._chart.notifyContainerResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"series\", {\n    /**\n     * A collection or manually added series for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._series === null) {\n        var coll = new IgrSeriesCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._seriesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._series = coll;\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"axes\", {\n    /**\n     * A collection or manually added axes for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._axes === null) {\n        var coll = new IgrAxisCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._axesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._axes = coll;\n      }\n\n      return this._axes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDataChart.prototype.componentWillUnmount = function () {\n    this._chart.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrDataChart.prototype.createImplementation = function () {\n    return new XamDataChart();\n  };\n\n  Object.defineProperty(IgrDataChart.prototype, \"dataSource\", {\n    get: function () {\n      return this._dataSource;\n    },\n    set: function (value) {\n      this._dataSource = value;\n      this.bindData();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrDataChart.prototype.bindData = function () {\n    //console.log(\"binding data: \" + this._dataSource);\n    if (this.actualAxes && this.actualAxes.length > 0) {\n      var currAxes = this.actualAxes;\n\n      for (var i = 0; i < currAxes.length; i++) {\n        currAxes[i].provideData(this._dataSource);\n      }\n    }\n\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        currSeries[i].provideData(this._dataSource);\n      }\n    }\n  };\n\n  IgrDataChart.prototype.initializeContent = function () {\n    if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n      var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n      this._defaultTooltips = d;\n\n      this._onDefaultTooltipsReady(d); //this._container.appendChild(cr.location.nativeElement);\n\n    }\n\n    this._styling(this._container, this);\n\n    if (this.actualAxes && this.actualAxes.length > 0) {\n      var currAxes = this.actualAxes;\n\n      for (var i = 0; i < currAxes.length; i++) {\n        currAxes[i]._styling(this._container, this, this);\n      }\n    }\n\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        currSeries[i]._styling(this._container, this, this);\n      }\n    }\n\n    this.i.notifyContainerResized();\n  };\n\n  IgrDataChart.prototype._checkCrossing = function () {\n    var toBind = [];\n    var byName = new Map();\n\n    for (var i = 0; i < this.actualAxes.length; i++) {\n      byName.set(this.actualAxes[i].name, this.actualAxes[i]);\n\n      if (this.actualAxes[i].crossingAxisName) {\n        toBind.push(this.actualAxes[i]);\n      }\n    }\n\n    for (var i = 0; i < toBind.length; i++) {\n      if (byName.has(toBind[i].crossingAxisName)) {\n        if (toBind[i].crossingAxis !== byName.get(toBind[i].crossingAxisName)) {\n          toBind[i].crossingAxis = byName.get(toBind[i].crossingAxisName);\n        }\n      }\n    }\n  };\n\n  IgrDataChart.prototype._ensureTooltipCreated = function (series) {\n    var _this = this;\n\n    series._ensureTooltipCreated(function () {\n      return _this.createTooltip();\n    }, function (ele) {\n      var wrapper = new ReactWrapper(ele, _this._wrapper);\n      wrapper.updateToolTip = ele.updateToolTip;\n      wrapper.hideToolTip = ele.hideToolTip;\n\n      if (_this._activeTooltips.has(ele)) {\n        var tCont = _this._activeTooltips.get(ele);\n\n        tCont.template = ele.tooltipTemplate;\n      }\n\n      return wrapper;\n    });\n  };\n\n  IgrDataChart.prototype._ensureDefaultTooltip = function (series) {\n    if (this._defaultTooltips == null) {\n      return;\n    }\n\n    this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n  };\n\n  IgrDataChart.prototype._onDefaultTooltipsReady = function (cr) {\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        if (currSeries[i].showDefaultTooltip) {\n          this._ensureDefaultTooltip(currSeries[i]);\n        }\n      }\n    }\n  };\n\n  IgrDataChart.prototype.createTooltip = function () {\n    // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n    // \treturn null;\n    // }\n    // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n    var wrapper = this._wrapper.createElement(\"div\");\n\n    var ele = wrapper.getNativeElement();\n    ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n    this._uniqueTooltipId++;\n    this._currentTooltips = this._currentTooltips.slice(0);\n\n    this._currentTooltips.push(ele); //let element = React.createElement(Tooltip,  );\n    //let portal = ReactDOM.createPortal(element, ele);\n\n\n    var self = this;\n\n    ele.updateToolTip = function (c, isSubContent) {\n      if (c.externalObject) {\n        c = c.externalObject;\n      } else {\n        var ext = new IgrDataContext();\n        ext._implementation = c;\n        c = ext;\n      }\n\n      if (!isSubContent) {\n        if (ele.parentElement != self._container) {\n          if (ele.parentElement != null) {\n            ele.parentElement.removeChild(ele);\n          }\n\n          self._container.appendChild(ele);\n        }\n      } else {\n        c.isSubContent = true;\n      }\n\n      if (self._activeTooltips.has(ele)) {\n        var t = self._activeTooltips.get(ele);\n\n        t.dataContext = c;\n      }\n\n      ele.style.display = \"block\";\n      return true;\n    };\n\n    ele.hideToolTip = function () {\n      ele.style.display = \"none\";\n    };\n\n    ele.style.display = \"none\";\n\n    this._updateTooltipState();\n\n    return ele;\n  };\n\n  IgrDataChart.prototype._updateTooltipState = function () {\n    if (this._initialized) {\n      this.setState({\n        tooltips: this._currentTooltips\n      });\n    }\n  };\n\n  Object.defineProperty(IgrDataChart.prototype, \"syncChannel\", {\n    /**\n     * Gets or sets the channel with which to synchronize.\n    *\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n    */\n    get: function () {\n      return this.i.syncChannel;\n    },\n    set: function (v) {\n      var newLink = null;\n\n      if (v && v.length > 0) {\n        newLink = SyncLinkManager.instance().getLink(v);\n      }\n\n      var oldLink = this.i.actualSyncLink;\n\n      if (oldLink) {\n        SyncLinkManager.instance().releaseLink(oldLink);\n      }\n\n      if (newLink) {\n        this.i.actualSyncLink = newLink;\n      } else {\n        this.i.actualSyncLink = new SyncLink();\n      }\n\n      this.i.syncChannel = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"synchronizeVertically\", {\n    /**\n     * Gets or sets the bool used to display the window preview shadow.\n    *\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n    */\n    get: function () {\n      return this.i.syncSettings ? this.i.syncSettings.synchronizeVertically : false;\n    },\n    set: function (v) {\n      this.i.syncSettings.synchronizeVertically = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"synchronizeHorizontally\", {\n    /**\n     * Gets or sets the bool used to display the window preview shadow.\n    *\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n    */\n    get: function () {\n      return this.i.syncSettings ? this.i.syncSettings.synchronizeHorizontally : false;\n    },\n    set: function (v) {\n      this.i.syncSettings.synchronizeHorizontally = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"i\", {\n    /**\n                             * @hidden\n                             */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"isSquare\", {\n    /**\n    * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.\n    *\n    * Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.\n    *\n    * ```ts\n    *  this.chart.isSquare=\"True\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsHorizontalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ns;\n    },\n    set: function (v) {\n      this.i.ns = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"windowScaleHorizontal\", {\n    /**\n     * A number between 0 and 1 determining the scale of the horizontal zoom.\n     * This property is effectively a shortcut to the Width of the WindowRect property.\n    *\n    * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.\n    *\n    * ```ts\n    * this.chart.windowScaleHorizontal=\"0.75\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \twindowScaleHorizontal=\"0.75\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ob;\n    },\n    set: function (v) {\n      this.i.ob = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"windowScaleVertical\", {\n    /**\n     * A number between 0 and 1 determining the scale of the vertical zoom.\n     * This property is effectively a shortcut to the Height of the WindowRect property.\n    *\n    * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.\n    *\n    * ```ts\n    * this.chart.windowScaleVertical=\"0.75\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \twindowScaleVertical=\"0.75\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.oc;\n    },\n    set: function (v) {\n      this.i.oc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleHorizontal\", {\n    /**\n     * A number between 0 and 1 determining the scale of the horizontal zoom.\n     * This property is effectively a shortcut to the Width of the ActualWindowRect property.\n    */\n    get: function () {\n      return this.i.n3;\n    },\n    set: function (v) {\n      this.i.n3 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleVertical\", {\n    /**\n     * A number between 0 and 1 determining the scale of the vertical zoom.\n     * This property is effectively a shortcut to the Height of the ActualWindowRect property.\n    */\n    get: function () {\n      return this.i.n4;\n    },\n    set: function (v) {\n      this.i.n4 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"isHorizontalZoomEnabled\", {\n    /**\n     * Gets or sets horizontal zoomability of the current control\n    *\n    * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.\n    *\n    * ```ts\n    * this.chart.IsHorizontalZoomEnabled= true;\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsHorizontalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.nr;\n    },\n    set: function (v) {\n      this.i.nr = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"isVerticalZoomEnabled\", {\n    /**\n     * Gets or sets vertical zoomability of the current control\n    *\n    * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.\n    *\n    * ```ts\n    * this.chart.isVerticalZoomEnabled=\"True\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsVerticalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.nt;\n    },\n    set: function (v) {\n      this.i.nt = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"gridMode\", {\n    /**\n     * Gets or sets how grid lines are rendered in relation to series.\n    *\n    *  Try setting the `gridMode` property to bring your grid lines in front of the data series.\n    */\n    get: function () {\n      return this.i.ng;\n    },\n    set: function (v) {\n      this.i.ng = ensureEnum(GridMode_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"alignsGridLinesToPixels\", {\n    /**\n     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\n    */\n    get: function () {\n      return this.i.nn;\n    },\n    set: function (v) {\n      this.i.nn = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"brushes\", {\n    /**\n     * Gets or sets the palette of brushes to use for coloring the chart series.\n    *\n    * `brushes` can be set declaratively to a list of color strings.\n    *\n    * ```ts\n    * this.chart.brushes=\"red\" ;\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tbrushes=\"red\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.m9);\n    },\n    set: function (v) {\n      this.i.m9 = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"markerBrushes\", {\n    /**\n     * Gets or sets the MarkerBrushes property.\n     * The brushes property defines the palette from which automatically assigned series brushes are selected.\n    *\n    * `markerBrushes` can be set declaratively to a list of color strings.\n    *\n    * ```ts\n    * this.chart.markerBrushes=\"red,green,blue\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tMarkerBrushes=\"red,green,blue\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.na);\n    },\n    set: function (v) {\n      this.i.na = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"outlines\", {\n    /**\n     * Gets or sets the palette of brushes to use for outlines on the chart series.\n    *\n    * `outlines` can be set declaratively to a list of color strings.\n    *\n    * ```ts\n    * this.chart.outlines=\"red,green,blue\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     outlines=\"red,green,blue\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.nc);\n    },\n    set: function (v) {\n      this.i.nc = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"markerOutlines\", {\n    /**\n     * Gets or sets the MarkerOutlines property.\n     * The brushes property defines the palette from which automatically assigned series brushes are selected.\n    *\n    * `markerOutlines` can be set declaratively to a list of color strings.\n    *\n    * ```ts\n    * this.chart.markerOutlines=\"red,green,blue\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     markerOutlines=\"red,green,blue\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return fromBrushCollection(this.i.nb);\n    },\n    set: function (v) {\n      this.i.nb = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"defaultAxisStroke\", {\n    /**\n     * Gets or sets the DefaultAxisStroke property.\n     * The DefaultAxisStroke property defines the brush which is used by the axes when no Axis.Stroke is set.\n    */\n    get: function () {\n      return brushToString(this.i.po);\n    },\n    set: function (v) {\n      this.i.po = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMajorStroke\", {\n    /**\n     * Gets or sets the DefaultAxisMajorStroke property.\n     * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no Axis.MajorStroke is set.\n    */\n    get: function () {\n      return brushToString(this.i.pm);\n    },\n    set: function (v) {\n      this.i.pm = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMinorStroke\", {\n    /**\n     * Gets or sets the DefaultAxisMinorStroke property.\n     * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no Axis.MinorStroke is set.\n    */\n    get: function () {\n      return brushToString(this.i.pn);\n    },\n    set: function (v) {\n      this.i.pn = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginLeft\", {\n    /**\n     * Margin applied to the left of the plot area.\n    */\n    get: function () {\n      return this.i.n8;\n    },\n    set: function (v) {\n      this.i.n8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginTop\", {\n    /**\n     * Margin applied above the plot area.\n    */\n    get: function () {\n      return this.i.oa;\n    },\n    set: function (v) {\n      this.i.oa = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginRight\", {\n    /**\n     * Margin applied to the right of the plot area.\n    */\n    get: function () {\n      return this.i.n9;\n    },\n    set: function (v) {\n      this.i.n9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginBottom\", {\n    /**\n     * Margin applied below the plot area.\n    */\n    get: function () {\n      return this.i.n7;\n    },\n    set: function (v) {\n      this.i.n7 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n  * Notifies the chart that the CSS styles in effect have been updated.\n  */\n\n  IgrDataChart.prototype.styleUpdated = function () {\n    this.i.o4();\n  };\n  /**\n   * Export serialized visual data.\n  \r\n  */\n\n\n  IgrDataChart.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.om();\n    return iv;\n  };\n\n  return IgrDataChart;\n}(IgrSeriesViewer);\n\nexport { IgrDataChart };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-data-chart.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { GridMode_$type } from './GridMode';\nimport { IgrSeriesViewer } from './igr-series-viewer';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamDataChart } from './XamDataChart';\nimport { CollectionAdapter, brushToString, stringToBrush, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, NamePatcher } from \"igniteui-react-core\";\nimport { Axis } from './Axis';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { IgrSeriesCollection } from './igr-series-collection';\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { IgrAxisCollection } from './igr-axis-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { SyncLinkManager } from './SyncLinkManager';\nimport { SyncLink } from './SyncLink';\n/**\n * Represents a chart area containing axes, series, an optional legend and other hosted content.\n*/\nvar IgrDataChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrDataChart, _super);\n    function IgrDataChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this.contentAxes = [];\n        _this.contentSeries = [];\n        /**\n         * The series actually present in the chart. Do not directly modify this array.\n         * This array's contents can be modified by causing React to reproject the child content.\n         * Or adding and removing series from the manual series collection on the series property.\n         */\n        _this.actualSeries = [];\n        /**\n         * The axes actually present in the chart. Do not directly modify this array.\n         * This array's contents can be modified by causing React to reproject the child content.\n         * Or adding and removing axes from the manual axes collection on the axes property.\n         */\n        _this.actualAxes = [];\n        _this._series = null;\n        _this._axes = null;\n        _this._initialized = false;\n        _this._axesAdapter = null;\n        _this._seriesAdapter = null;\n        _this._defaultTooltips = null;\n        _this._uniqueTooltipId = 0;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._tooltipRef = _this._tooltipRef.bind(_this);\n        _this._activeTooltipElements = new Map();\n        _this._activeTooltips = new Map();\n        _this._currentTooltips = [];\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        if (document) {\n            _this._container = document.createElement(\"div\");\n            _this._container.style.display = \"block\";\n            _this._container.style.width = \"100%\";\n            _this._container.style.height = \"100%\";\n        }\n        var root;\n        root = _this._container;\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this._wrapper = ren;\n        var chart = _this.i;\n        _this._chart = chart;\n        _this._axesAdapter = new CollectionAdapter(_this.contentAxes, _this.i.axes, _this.actualAxes, function (c) { return c.i; }, function (i) {\n            i._provideRenderer(_this._wrapper);\n            i.provideData(_this._dataSource);\n            if (_this._container && _this._container.parentElement) {\n                i._styling(_this._container, _this, _this);\n            }\n            _this._checkCrossing();\n        }, function (i) { i._provideRenderer(null); i.provideData(null); });\n        _this._seriesAdapter = new CollectionAdapter(_this.contentSeries, _this.i.series, _this.actualSeries, function (c) { return c.i; }, function (i) {\n            i.owner = _this;\n            i._provideRenderer(_this._wrapper);\n            i.provideData(_this._dataSource);\n            if (_this._container && _this._container.parentElement) {\n                i._styling(_this._container, _this, _this);\n            }\n            i.bindAxes(_this.actualAxes);\n            _this._ensureDefaultTooltip(i);\n            _this._ensureTooltipCreated(i);\n        }, function (i) { i._provideRenderer(null); i.provideData(null); });\n        chart.provideContainer(ren);\n        ren.addSizeWatcher(function () {\n            _this._chart.notifyContainerResized();\n        });\n        _this._initialized = true;\n        return _this;\n    }\n    Object.defineProperty(IgrDataChart.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._chart.notifyContainerResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"legend\", {\n        /**\n         * Gets or sets the legend used for the current chart.\n        */\n        get: function () {\n            if (this.i.legend != null)\n                return this.i.legend.externalObject;\n        },\n        set: function (v) {\n            if (v != undefined && v != null)\n                this.i.legend = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDataChart.prototype._updateContentChildren = function () {\n        this.contentAxes.length = 0;\n        this.contentSeries.length = 0;\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((Axis.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentAxes.push(contentChildrenActual[i]);\n            }\n            else {\n                this.contentSeries.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._axesAdapter !== null) {\n            this._axesAdapter.notifyContentChanged();\n        }\n        if (this._seriesAdapter !== null) {\n            this._seriesAdapter.notifyContentChanged();\n        }\n    };\n    // private _childrenDiffer(children: any): boolean {\n    //     if (this._contentChildren === null) {\n    //         return true;\n    //     }\n    //     if (React.Children.count(children) != this._contentChildren.length) {\n    //         return true;\n    //     }\n    //     let arr = React.Children.toArray(children);\n    //     for (let i = 0; i < arr.length; i++) {\n    //         if ((arr[i] as any).props.name !== this._contentChildren[i].props.name) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n    IgrDataChart.prototype._getMainRef = function (ref) {\n        this._elRef = ref;\n    };\n    IgrDataChart.prototype.render = function () {\n        // if (!this._childrenDiffer(this.props.children)) {\n        // \tlet div = React.createElement(\"div\", {\n        // \t\tref: (ref) => {\n        // \t\t\tthis._elRef = ref;\n        // \t\t},\n        // \t\tchildren: this.props.children\n        // \t});\n        // \treturn div;\n        // } else {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        //this._contentChildrenUnresolved = this._contentChildrenMap.size;\n        if (this._currentTooltips && this._currentTooltips.length > 0) {\n            //children = React.Children.toArray(this.props.children);\n            for (var i = 0; i < this._currentTooltips.length; i++) {\n                var t = this._currentTooltips[i];\n                if (this._activeTooltipElements.has(t)) {\n                    children.push(this._activeTooltipElements.get(t));\n                }\n                else {\n                    if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n                        continue;\n                    }\n                    var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n                    var tEle = React.createElement(Tooltip, {\n                        ref: this._tooltipRef,\n                        key: this._currentTooltips[i].key,\n                        owner: this._currentTooltips[i]\n                    });\n                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n                    this._activeTooltipElements.set(t, portal);\n                    children.push(portal);\n                }\n            }\n        }\n        var div = React.createElement(\"div\", {\n            className: \"ig-data-chart igr-data-chart\",\n            ref: this._getMainRef,\n            children: children\n        });\n        return div;\n        //}\n    };\n    IgrDataChart.prototype._tooltipRef = function (t) {\n        //console.log(t);\n        if (t === null) {\n            return;\n        }\n        if (t.currentOwner &&\n            t.currentOwner.tooltipTemplate) {\n            t.template = t.currentOwner.tooltipTemplate;\n        }\n        this._activeTooltips.set(t.currentOwner, t);\n    };\n    IgrDataChart.prototype.componentDidMount = function () {\n        _super.prototype.componentDidMount.call(this);\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container);\n        this._chart.notifyContainerResized();\n        this.initializeContent();\n    };\n    Object.defineProperty(IgrDataChart.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this._chart.notifyContainerResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"series\", {\n        /**\n         * A collection or manually added series for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._series === null) {\n                var coll = new IgrSeriesCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._seriesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._series = coll;\n            }\n            return this._series;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"axes\", {\n        /**\n         * A collection or manually added axes for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._axes === null) {\n                var coll = new IgrAxisCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._axesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._axes = coll;\n            }\n            return this._axes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDataChart.prototype.componentWillUnmount = function () {\n        this._chart.destroy();\n        this._wrapper.destroy();\n    };\n    IgrDataChart.prototype.createImplementation = function () {\n        return new XamDataChart();\n    };\n    Object.defineProperty(IgrDataChart.prototype, \"dataSource\", {\n        get: function () {\n            return this._dataSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.bindData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrDataChart.prototype.bindData = function () {\n        //console.log(\"binding data: \" + this._dataSource);\n        if (this.actualAxes && this.actualAxes.length > 0) {\n            var currAxes = this.actualAxes;\n            for (var i = 0; i < currAxes.length; i++) {\n                currAxes[i].provideData(this._dataSource);\n            }\n        }\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                currSeries[i].provideData(this._dataSource);\n            }\n        }\n    };\n    IgrDataChart.prototype.initializeContent = function () {\n        if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n            var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n            this._defaultTooltips = d;\n            this._onDefaultTooltipsReady(d);\n            //this._container.appendChild(cr.location.nativeElement);\n        }\n        this._styling(this._container, this);\n        if (this.actualAxes && this.actualAxes.length > 0) {\n            var currAxes = this.actualAxes;\n            for (var i = 0; i < currAxes.length; i++) {\n                currAxes[i]._styling(this._container, this, this);\n            }\n        }\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                currSeries[i]._styling(this._container, this, this);\n            }\n        }\n        this.i.notifyContainerResized();\n    };\n    IgrDataChart.prototype._checkCrossing = function () {\n        var toBind = [];\n        var byName = new Map();\n        for (var i = 0; i < this.actualAxes.length; i++) {\n            byName.set(this.actualAxes[i].name, this.actualAxes[i]);\n            if (this.actualAxes[i].crossingAxisName) {\n                toBind.push(this.actualAxes[i]);\n            }\n        }\n        for (var i = 0; i < toBind.length; i++) {\n            if (byName.has(toBind[i].crossingAxisName)) {\n                if (toBind[i].crossingAxis !== byName.get(toBind[i].crossingAxisName)) {\n                    toBind[i].crossingAxis = byName.get(toBind[i].crossingAxisName);\n                }\n            }\n        }\n    };\n    IgrDataChart.prototype._ensureTooltipCreated = function (series) {\n        var _this = this;\n        series._ensureTooltipCreated(function () { return _this.createTooltip(); }, function (ele) {\n            var wrapper = new ReactWrapper(ele, _this._wrapper);\n            wrapper.updateToolTip = ele.updateToolTip;\n            wrapper.hideToolTip = ele.hideToolTip;\n            if (_this._activeTooltips.has(ele)) {\n                var tCont = _this._activeTooltips.get(ele);\n                tCont.template = ele.tooltipTemplate;\n            }\n            return wrapper;\n        });\n    };\n    IgrDataChart.prototype._ensureDefaultTooltip = function (series) {\n        if (this._defaultTooltips == null) {\n            return;\n        }\n        this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n    };\n    IgrDataChart.prototype._onDefaultTooltipsReady = function (cr) {\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                if (currSeries[i].showDefaultTooltip) {\n                    this._ensureDefaultTooltip(currSeries[i]);\n                }\n            }\n        }\n    };\n    IgrDataChart.prototype.createTooltip = function () {\n        // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n        // \treturn null;\n        // }\n        // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n        var wrapper = this._wrapper.createElement(\"div\");\n        var ele = wrapper.getNativeElement();\n        ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n        this._uniqueTooltipId++;\n        this._currentTooltips = this._currentTooltips.slice(0);\n        this._currentTooltips.push(ele);\n        //let element = React.createElement(Tooltip,  );\n        //let portal = ReactDOM.createPortal(element, ele);\n        var self = this;\n        ele.updateToolTip = function (c, isSubContent) {\n            if (c.externalObject) {\n                c = c.externalObject;\n            }\n            else {\n                var ext = new IgrDataContext();\n                ext._implementation = c;\n                c = ext;\n            }\n            if (!isSubContent) {\n                if (ele.parentElement != self._container) {\n                    if (ele.parentElement != null) {\n                        ele.parentElement.removeChild(ele);\n                    }\n                    self._container.appendChild(ele);\n                }\n            }\n            else {\n                c.isSubContent = true;\n            }\n            if (self._activeTooltips.has(ele)) {\n                var t = self._activeTooltips.get(ele);\n                t.dataContext = c;\n            }\n            ele.style.display = \"block\";\n            return true;\n        };\n        ele.hideToolTip = function () {\n            ele.style.display = \"none\";\n        };\n        ele.style.display = \"none\";\n        this._updateTooltipState();\n        return ele;\n    };\n    IgrDataChart.prototype._updateTooltipState = function () {\n        if (this._initialized) {\n            this.setState({ tooltips: this._currentTooltips });\n        }\n    };\n    Object.defineProperty(IgrDataChart.prototype, \"syncChannel\", {\n        /**\n         * Gets or sets the channel with which to synchronize.\n        *\n        * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n        */\n        get: function () {\n            return this.i.syncChannel;\n        },\n        set: function (v) {\n            var newLink = null;\n            if (v && v.length > 0) {\n                newLink = SyncLinkManager.instance().getLink(v);\n            }\n            var oldLink = this.i.actualSyncLink;\n            if (oldLink) {\n                SyncLinkManager.instance().releaseLink(oldLink);\n            }\n            if (newLink) {\n                this.i.actualSyncLink = newLink;\n            }\n            else {\n                this.i.actualSyncLink = new SyncLink();\n            }\n            this.i.syncChannel = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"synchronizeVertically\", {\n        /**\n         * Gets or sets the bool used to display the window preview shadow.\n        *\n        * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n        */\n        get: function () {\n            return this.i.syncSettings ? this.i.syncSettings.synchronizeVertically : false;\n        },\n        set: function (v) {\n            this.i.syncSettings.synchronizeVertically = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"synchronizeHorizontally\", {\n        /**\n         * Gets or sets the bool used to display the window preview shadow.\n        *\n        * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n        */\n        get: function () {\n            return this.i.syncSettings ? this.i.syncSettings.synchronizeHorizontally : false;\n        },\n        set: function (v) {\n            this.i.syncSettings.synchronizeHorizontally = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"i\", {\n        /**\n                                 * @hidden\n                                 */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"isSquare\", {\n        /**\n     * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.\n    *\n    * Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.\n    *\n    * ```ts\n    *  this.chart.isSquare=\"True\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsHorizontalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n        get: function () {\n            return this.i.ns;\n        },\n        set: function (v) {\n            this.i.ns = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"windowScaleHorizontal\", {\n        /**\n         * A number between 0 and 1 determining the scale of the horizontal zoom.\n         * This property is effectively a shortcut to the Width of the WindowRect property.\n        *\n        * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.\n        *\n        * ```ts\n        * this.chart.windowScaleHorizontal=\"0.75\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \twindowScaleHorizontal=\"0.75\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ob;\n        },\n        set: function (v) {\n            this.i.ob = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"windowScaleVertical\", {\n        /**\n         * A number between 0 and 1 determining the scale of the vertical zoom.\n         * This property is effectively a shortcut to the Height of the WindowRect property.\n        *\n        * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.\n        *\n        * ```ts\n        * this.chart.windowScaleVertical=\"0.75\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \twindowScaleVertical=\"0.75\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.oc;\n        },\n        set: function (v) {\n            this.i.oc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleHorizontal\", {\n        /**\n         * A number between 0 and 1 determining the scale of the horizontal zoom.\n         * This property is effectively a shortcut to the Width of the ActualWindowRect property.\n        */\n        get: function () {\n            return this.i.n3;\n        },\n        set: function (v) {\n            this.i.n3 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleVertical\", {\n        /**\n         * A number between 0 and 1 determining the scale of the vertical zoom.\n         * This property is effectively a shortcut to the Height of the ActualWindowRect property.\n        */\n        get: function () {\n            return this.i.n4;\n        },\n        set: function (v) {\n            this.i.n4 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"isHorizontalZoomEnabled\", {\n        /**\n         * Gets or sets horizontal zoomability of the current control\n        *\n        * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.\n        *\n        * ```ts\n        * this.chart.IsHorizontalZoomEnabled= true;\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tIsHorizontalZoomEnabled=\"True\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.nr;\n        },\n        set: function (v) {\n            this.i.nr = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"isVerticalZoomEnabled\", {\n        /**\n         * Gets or sets vertical zoomability of the current control\n        *\n        * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.\n        *\n        * ```ts\n        * this.chart.isVerticalZoomEnabled=\"True\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tIsVerticalZoomEnabled=\"True\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.nt;\n        },\n        set: function (v) {\n            this.i.nt = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"gridMode\", {\n        /**\n         * Gets or sets how grid lines are rendered in relation to series.\n        *\n        *  Try setting the `gridMode` property to bring your grid lines in front of the data series.\n        */\n        get: function () {\n            return this.i.ng;\n        },\n        set: function (v) {\n            this.i.ng = ensureEnum(GridMode_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"alignsGridLinesToPixels\", {\n        /**\n         * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\n        */\n        get: function () {\n            return this.i.nn;\n        },\n        set: function (v) {\n            this.i.nn = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"brushes\", {\n        /**\n         * Gets or sets the palette of brushes to use for coloring the chart series.\n        *\n        * `brushes` can be set declaratively to a list of color strings.\n        *\n        * ```ts\n        * this.chart.brushes=\"red\" ;\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tbrushes=\"red\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.m9);\n        },\n        set: function (v) {\n            this.i.m9 = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"markerBrushes\", {\n        /**\n         * Gets or sets the MarkerBrushes property.\n         * The brushes property defines the palette from which automatically assigned series brushes are selected.\n        *\n        * `markerBrushes` can be set declaratively to a list of color strings.\n        *\n        * ```ts\n        * this.chart.markerBrushes=\"red,green,blue\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tMarkerBrushes=\"red,green,blue\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.na);\n        },\n        set: function (v) {\n            this.i.na = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"outlines\", {\n        /**\n         * Gets or sets the palette of brushes to use for outlines on the chart series.\n        *\n        * `outlines` can be set declaratively to a list of color strings.\n        *\n        * ```ts\n        * this.chart.outlines=\"red,green,blue\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     outlines=\"red,green,blue\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.nc);\n        },\n        set: function (v) {\n            this.i.nc = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"markerOutlines\", {\n        /**\n         * Gets or sets the MarkerOutlines property.\n         * The brushes property defines the palette from which automatically assigned series brushes are selected.\n        *\n        * `markerOutlines` can be set declaratively to a list of color strings.\n        *\n        * ```ts\n        * this.chart.markerOutlines=\"red,green,blue\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     markerOutlines=\"red,green,blue\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.nb);\n        },\n        set: function (v) {\n            this.i.nb = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"defaultAxisStroke\", {\n        /**\n         * Gets or sets the DefaultAxisStroke property.\n         * The DefaultAxisStroke property defines the brush which is used by the axes when no Axis.Stroke is set.\n        */\n        get: function () {\n            return brushToString(this.i.po);\n        },\n        set: function (v) {\n            this.i.po = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMajorStroke\", {\n        /**\n         * Gets or sets the DefaultAxisMajorStroke property.\n         * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no Axis.MajorStroke is set.\n        */\n        get: function () {\n            return brushToString(this.i.pm);\n        },\n        set: function (v) {\n            this.i.pm = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMinorStroke\", {\n        /**\n         * Gets or sets the DefaultAxisMinorStroke property.\n         * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no Axis.MinorStroke is set.\n        */\n        get: function () {\n            return brushToString(this.i.pn);\n        },\n        set: function (v) {\n            this.i.pn = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginLeft\", {\n        /**\n         * Margin applied to the left of the plot area.\n        */\n        get: function () {\n            return this.i.n8;\n        },\n        set: function (v) {\n            this.i.n8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginTop\", {\n        /**\n         * Margin applied above the plot area.\n        */\n        get: function () {\n            return this.i.oa;\n        },\n        set: function (v) {\n            this.i.oa = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginRight\", {\n        /**\n         * Margin applied to the right of the plot area.\n        */\n        get: function () {\n            return this.i.n9;\n        },\n        set: function (v) {\n            this.i.n9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginBottom\", {\n        /**\n         * Margin applied below the plot area.\n        */\n        get: function () {\n            return this.i.n7;\n        },\n        set: function (v) {\n            this.i.n7 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n * Notifies the chart that the CSS styles in effect have been updated.\n\r\n*/\n    IgrDataChart.prototype.styleUpdated = function () {\n        this.i.o4();\n    };\n    /**\n     * Export serialized visual data.\n    \r\n    */\n    IgrDataChart.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.om();\n        return (iv);\n    };\n    return IgrDataChart;\n}(IgrSeriesViewer));\nexport { IgrDataChart };\n//# sourceMappingURL=igr-data-chart.js.map\n"]},"metadata":{},"sourceType":"module"}