{"ast":null,"code":"var _jsxFileName = \"/Users/Parth/web-project/src/Pages/Universities.js\";\nimport React, { Component } from 'react';\nimport { Nav, CardDeck, Spinner } from 'react-bootstrap';\nimport '../Styles/Universities.css';\nimport Navigation from '../Components/Navigation';\nimport Footer from '../Components/Footer';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { api } from '../instance';\nexport default class Universities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      universities: null,\n      page: 1,\n      loading: true\n    };\n\n    this.fetchUniversities = () => {\n      api.get('/universities', {\n        params: {\n          page: this.state.page\n        }\n      }).then(res => res.data).then(universities => {\n        this.setState({\n          universities,\n          loading: false\n        });\n      });\n    };\n\n    this.formatPercent = value => {\n      return value === 0 ? 'N/A' : value.toFixed(2).toString() + '%';\n    };\n\n    this.displayUniversities = () => {\n      const {\n        universities\n      } = this.state;\n      let rows = [];\n\n      for (let r = 0; r < 5; r++) {\n        let children = [];\n\n        for (let c = 0; c < 3; c++) {\n          if (universities.length <= c + 3 * r) {\n            break;\n          }\n\n          var university = universities[c + 3 * r];\n          children.push(React.createElement(Card, {\n            className: \"universities-card\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, React.createElement(Nav.Link, {\n            href: '/universities/' + university.name.replace(/ /g, \"_\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, React.createElement(Card.Img, {\n            src: university.image_url,\n            variant: \"top\",\n            height: \"300\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }), React.createElement(Card.Body, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, React.createElement(Card.Title, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, university.name), React.createElement(Card.Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, \"City: \", university.city_name, \", \", university.state_name), React.createElement(Card.Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, \"Acceptance Rate: \", this.formatPercent(university.admission_rate))))));\n        }\n\n        rows.push(React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n        rows.push(React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, children));\n        if (universities.length < 3 * r) break;\n      }\n\n      return rows;\n    };\n\n    this.changePage = (event, page) => {\n      event.preventDefault();\n      this.setState({\n        page: page,\n        loading: true\n      }, () => this.fetchUniversities());\n    };\n\n    this.displayButtons = page => {\n      let buttons = [];\n\n      if (page != 1) {\n        buttons.push(React.createElement(Button, {\n          variant: \"primary\",\n          onClick: e => {\n            this.changePage(e, 1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \"First\"));\n        buttons.push(React.createElement(Button, {\n          variant: \"primary\",\n          onClick: e => {\n            this.changePage(e, this.state.page - 1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"<<\"));\n      }\n\n      buttons.push(React.createElement(Button, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, page));\n\n      if (page != 47) {\n        buttons.push(React.createElement(Button, {\n          variant: \"primary\",\n          onClick: e => {\n            this.changePage(e, this.state.page + 1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \">>\"));\n        buttons.push(React.createElement(Button, {\n          variant: \"primary\",\n          onClick: e => {\n            this.changePage(e, 47);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"Last\"));\n      }\n\n      return buttons;\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUniversities();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      className: \"universities-jumbotron\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Find the University that's the best fit for you. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), \"Explore information on over 5,000 Universities across the country.\"), this.state.loading ? React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      className: \"Spinner-custom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, null, React.createElement(CardDeck, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.displayUniversities(this.state.universities)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), this.displayButtons(this.state.page)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Parth/web-project/src/Pages/Universities.js"],"names":["React","Component","Nav","CardDeck","Spinner","Navigation","Footer","Jumbotron","Card","Button","api","Universities","state","universities","page","loading","fetchUniversities","get","params","then","res","data","setState","formatPercent","value","toFixed","toString","displayUniversities","rows","r","children","c","length","university","push","name","replace","image_url","city_name","state_name","admission_rate","changePage","event","preventDefault","displayButtons","buttons","e","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Nav, CardDeck, Spinner } from 'react-bootstrap';\nimport '../Styles/Universities.css';\nimport Navigation from '../Components/Navigation';\nimport Footer from '../Components/Footer';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { api } from '../instance';\n\nexport default class Universities extends Component {\n  state = {\n    universities: null,\n    page: 1,\n    loading: true,\n  };\n\n  componentDidMount() {\n    this.fetchUniversities();\n  }\n\n  fetchUniversities = () => {\n    api\n      .get('/universities', {\n        params: {\n          page: this.state.page,\n        },\n      })\n      .then((res) => res.data)\n      .then((universities) => {\n        this.setState({ universities, loading: false });\n      });\n  };\n\n  formatPercent = (value) => {\n    return value === 0 ? 'N/A' : value.toFixed(2).toString() + '%';\n  }\n\n  displayUniversities = () => {\n    const { universities } = this.state;\n    let rows = [];\n    for (let r = 0; r < 5; r++) {\n      let children = [];\n      for (let c = 0; c < 3; c++) {\n        if (universities.length <= c + 3 * r) {\n          break;\n        }\n        var university = universities[c + 3 * r];\n        children.push(\n          <Card className=\"universities-card\">\n            <Nav.Link\n              href={\n                '/universities/' +\n                university.name.replace(/ /g,\"_\")\n              }\n            >\n              <Card.Img src={university.image_url} variant=\"top\" height=\"300\" />\n              <Card.Body>\n                <Card.Title>{university.name}</Card.Title>\n                <Card.Text>\n                  City: {university.city_name}, {university.state_name}\n                </Card.Text>\n                <Card.Text>\n                  Acceptance Rate: {this.formatPercent(university.admission_rate)}\n                </Card.Text>\n              </Card.Body>\n            </Nav.Link>\n          </Card>\n        );\n      }\n      rows.push(<br></br>);\n      rows.push(<div className=\"row\">{children}</div>);\n      if (universities.length < 3 * r) break;\n    }\n    return rows;\n  };\n\n  changePage = (event, page) => {\n    event.preventDefault();\n\n    this.setState(\n      {\n        page: page,\n        loading: true,\n      },\n      () => this.fetchUniversities()\n    );\n  };\n\n  displayButtons = (page) => {\n    let buttons = []\n\n    if (page != 1) {\n      buttons.push(\n        <Button variant=\"primary\" onClick={(e) => {this.changePage(e, 1)}}>\n            First\n        </Button>\n      )\n      buttons.push(\n        <Button variant=\"primary\" onClick={(e) => {this.changePage(e, this.state.page - 1)}}>\n            &lt;&lt;\n        </Button>\n      )\n    }\n\n    buttons.push(\n      <Button variant='primary'>\n      {page}\n      </Button>\n    )\n\n    if(page != 47){\n      buttons.push(\n        <Button variant=\"primary\" onClick={(e) => {this.changePage(e, this.state.page + 1)}}>\n            &gt;&gt;\n        </Button>\n      )\n      buttons.push(\n        <Button variant=\"primary\" onClick={(e) => {this.changePage(e, 47)}}>\n            Last\n        </Button>\n      )\n    }\n\n    return buttons\n  }\n\n  render() {\n    return (\n      <div>\n        <Navigation />\n        <Jumbotron className=\"universities-jumbotron\"></Jumbotron>\n        <p>\n          Find the University that's the best fit for you. <br />\n          Explore information on over 5,000 Universities across the country.\n        </p>\n        {this.state.loading ? (\n          <Spinner\n            animation=\"border\"\n            role=\"status\"\n            className=\"Spinner-custom\"\n          />\n        ) : (\n          <>\n            <CardDeck>\n              {this.displayUniversities(this.state.universities)}\n            </CardDeck>\n            <p />\n            {this.displayButtons(this.state.page)}\n          </>\n        )}\n        <p />\n        <Footer />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}