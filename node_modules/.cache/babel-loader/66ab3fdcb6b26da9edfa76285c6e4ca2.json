{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { LineSeries } from \"./LineSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent line series.\n * Displays trend over time or ordered categories.Useful when there are many data points and the order is important.\n*\n* `IgrLineSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of points connected by straight line segments.\n*\n* ```ts\n* <IgrDataChart\n* \tdataSource={this.data} >\n* <IgrCategoryXAxis name=\"xAxis\"\n* \tlabel=\"Country\" />\n* <IgrNumericYAxis name=\"yAxis\"\n* \tminimumValue={0}  />\n* <IgrLineSeries\n* \tname=\"series1\"\n* \txAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Coal\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series2 = new IgrLineSeries({ name: \"series2\" });\n* series2.markerType = MarkerType.Circle;\n* series2.valueMemberPath = \"RUS\";\n* series2.title = \"Russia\";\n* series2.xAxisName = \"xAxis\";\n* series2.yAxisName = \"yAxis\";\n* series2.thickness = 2;\n* ```\n*/\n\nvar IgrLineSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrLineSeries, _super);\n\n  function IgrLineSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrLineSeries.prototype.createImplementation = function () {\n    return new LineSeries();\n  };\n\n  Object.defineProperty(IgrLineSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLineSeries.prototype, \"isAreaOrLine\", {\n    /**\n     * Gets whether the current series shows an area or line shape.\n    *\n    * Gets whether the `IgrSeries` shows an area or a line shape.\n    *\n    * ```ts\n    * let isAreaOrLine: boolean = series.isAreaOrLine;\n    * ```\n    */\n    get: function () {\n      return this.i.ck;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLineSeries.prototype, \"unknownValuePlotting\", {\n    /**\n     * Determines how unknown values will be plotted on the chart.\n     * Null and Double.NaN are two examples of unknown values.\n    *\n    * Determines how unknown values will be plotted for the `IgrSeries`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.\n    *\n    * Null and Double.NaN are two examples of unknown values.\n    *\n    * ```ts\n    * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    * \tdataSource={this.data} >\n    * <IgrCategoryXAxis name=\"xAxis\"\n    * \tlabel=\"Country\" />\n    * <IgrNumericYAxis name=\"yAxis\"\n    * \tminimumValue={0}  />\n    * <IgrLineSeries\n    * \tname=\"series1\"\n    * \txAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Coal\"\n    * \tunknownValuePlotting:\"LinearInterpolate\"/>\n    * ```\n    */\n    get: function () {\n      return this.i.unknownValuePlotting;\n    },\n    set: function (v) {\n      this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrLineSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrLineSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-line-series.ts"],"names":[],"mappings":";AAKA,SAA+B,0BAA/B,QAAiE,qBAAjE;AACA,SAAS,mCAAT,QAA+F,2CAA/F;AAKA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAqB,UAArB,QAAuC,qBAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAA,aAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,EAAA,MAAA;;AAalC,WAAA,aAAA,CAAY,KAAZ,EAAsC;WACrC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,aAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,UAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAe5B,EAAA,MAAA,CAAA,cAAA,CAAI,aAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAThB;;;;;;;;;SASA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFe;oBAAA;;AAAA,GAAhB;AA8BA,EAAA,MAAA,CAAA,cAAA,CAAI,aAAA,CAAA,SAAJ,EAAI,sBAAJ,EAAwB;AA3BxB;;;;;;;;;;;;;;;;;;;;;;;;;;;SA2BA,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,oBAAd;AACA,KAFuB;SAGxB,UAAyB,CAAzB,EAAgD;AAC/C,WAAK,CAAL,CAAO,oBAAP,GAA8B,UAAU,CAAuB,0BAAvB,EAAmD,CAAnD,CAAxC;AACA,KALuB;oBAAA;;AAAA,GAAxB;AAMD,SAAA,aAAA;AAAC,CA7DD,CAAmC,mCAAnC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { LineSeries } from \"./LineSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent line series.\n * Displays trend over time or ordered categories.Useful when there are many data points and the order is important.\n*\n* `IgrLineSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of points connected by straight line segments.\n*\n* ```ts\n* <IgrDataChart\n* \tdataSource={this.data} >\n* <IgrCategoryXAxis name=\"xAxis\"\n* \tlabel=\"Country\" />\n* <IgrNumericYAxis name=\"yAxis\"\n* \tminimumValue={0}  />\n* <IgrLineSeries\n* \tname=\"series1\"\n* \txAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Coal\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series2 = new IgrLineSeries({ name: \"series2\" });\n* series2.markerType = MarkerType.Circle;\n* series2.valueMemberPath = \"RUS\";\n* series2.title = \"Russia\";\n* series2.xAxisName = \"xAxis\";\n* series2.yAxisName = \"yAxis\";\n* series2.thickness = 2;\n* ```\n*/\nvar IgrLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrLineSeries, _super);\n    function IgrLineSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrLineSeries.prototype.createImplementation = function () {\n        return new LineSeries();\n    };\n    Object.defineProperty(IgrLineSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLineSeries.prototype, \"isAreaOrLine\", {\n        /**\n         * Gets whether the current series shows an area or line shape.\n        *\n        * Gets whether the `IgrSeries` shows an area or a line shape.\n        *\n        * ```ts\n        * let isAreaOrLine: boolean = series.isAreaOrLine;\n        * ```\n        */\n        get: function () {\n            return this.i.ck;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLineSeries.prototype, \"unknownValuePlotting\", {\n        /**\n         * Determines how unknown values will be plotted on the chart.\n         * Null and Double.NaN are two examples of unknown values.\n        *\n        * Determines how unknown values will be plotted for the `IgrSeries`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.\n        *\n        * Null and Double.NaN are two examples of unknown values.\n        *\n        * ```ts\n        * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        * \tdataSource={this.data} >\n        * <IgrCategoryXAxis name=\"xAxis\"\n        * \tlabel=\"Country\" />\n        * <IgrNumericYAxis name=\"yAxis\"\n        * \tminimumValue={0}  />\n        * <IgrLineSeries\n        * \tname=\"series1\"\n        * \txAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Coal\"\n        * \tunknownValuePlotting:\"LinearInterpolate\"/>\n        * ```\n        */\n        get: function () {\n            return this.i.unknownValuePlotting;\n        },\n        set: function (v) {\n            this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrLineSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrLineSeries };\n//# sourceMappingURL=igr-line-series.js.map\n"]},"metadata":{},"sourceType":"module"}