{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { OnBalanceVolumeIndicator } from \"./OnBalanceVolumeIndicator\";\n/**\n * Represents a IgxDataChartComponent On Balance Bolume indicator series.\n * Default required members: Close, Volume\n*\n* You can use the `IgrOnBalanceVolumeIndicator` to calculate a running total of sales volume for a stock.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrOnBalanceVolumeIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"Close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrOnBalanceVolumeIndicator({ name: \"series1\" });\n* this.series.dataSource = this.data;\n* this.series.xAxis = this.categoryXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"xAxis\";\n* this.series.yAxisName = \"yAxis\";\n* this.series.openMemberPath = \"open\";\n* this.series.highMemberPath = \"high\";\n* this.series.lowMemberPath = \"low\";\n* this.series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrOnBalanceVolumeIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrOnBalanceVolumeIndicator, _super);\n\n  function IgrOnBalanceVolumeIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrOnBalanceVolumeIndicator.prototype.createImplementation = function () {\n    return new OnBalanceVolumeIndicator();\n  };\n\n  Object.defineProperty(IgrOnBalanceVolumeIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrOnBalanceVolumeIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrOnBalanceVolumeIndicator };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-on-balance-volume-indicator.ts"],"names":[],"mappings":";AAKA,SAAS,yBAAT,QAA2E,gCAA3E;AAIA,SAAS,wBAAT,QAAyC,4BAAzC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,IAAA,2BAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiD,EAAA,OAAA,CAAA,SAAA,CAAA,2BAAA,EAAA,MAAA;;AAahD,WAAA,2BAAA,CAAY,KAAZ,EAAoD;WACnD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,2BAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,wBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,2BAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAM7B,SAAA,2BAAA;AAAC,CAhBD,CAAiD,yBAAjD,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { OnBalanceVolumeIndicator } from \"./OnBalanceVolumeIndicator\";\n/**\n * Represents a IgxDataChartComponent On Balance Bolume indicator series.\n * Default required members: Close, Volume\n*\n* You can use the `IgrOnBalanceVolumeIndicator` to calculate a running total of sales volume for a stock.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrOnBalanceVolumeIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"Close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrOnBalanceVolumeIndicator({ name: \"series1\" });\n* this.series.dataSource = this.data;\n* this.series.xAxis = this.categoryXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"xAxis\";\n* this.series.yAxisName = \"yAxis\";\n* this.series.openMemberPath = \"open\";\n* this.series.highMemberPath = \"high\";\n* this.series.lowMemberPath = \"low\";\n* this.series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrOnBalanceVolumeIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrOnBalanceVolumeIndicator, _super);\n    function IgrOnBalanceVolumeIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrOnBalanceVolumeIndicator.prototype.createImplementation = function () {\n        return new OnBalanceVolumeIndicator();\n    };\n    Object.defineProperty(IgrOnBalanceVolumeIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrOnBalanceVolumeIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrOnBalanceVolumeIndicator };\n//# sourceMappingURL=igr-on-balance-volume-indicator.js.map\n"]},"metadata":{},"sourceType":"module"}