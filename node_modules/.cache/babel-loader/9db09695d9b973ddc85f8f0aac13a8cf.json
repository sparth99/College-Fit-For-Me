{"ast":null,"code":"var _jsxFileName = \"/Users/Parth/web-project/src/Components/CountriesPopulationBarGraph.js\";\nimport React, { Component } from 'react';\nimport { Element } from \"react-faux-dom\";\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport Promises from 'es6-promise';\n\nclass CountriesPopulationBarGraph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      country_populations: []\n    };\n  }\n\n  componentDidMount() {\n    var data = [];\n    let promises = [];\n\n    for (let i = 0; i < 25; i++) {\n      let offset = i * 10;\n      promises.push(axios.get('https://api.pathogerm.com/countries/?offset=' + offset).then(res => {\n        const data2 = res.data;\n        const results = data2.results;\n\n        for (let j = 0; j < 10; j++) {\n          if (results[j][\"pop\"] !== null && results[j][\"pop\"] > 50000000) {\n            var dict = {};\n            dict[results[j][\"name\"]] = results[j][\"pop\"];\n            data.push(dict);\n          }\n        }\n      }));\n    }\n\n    Promises.all(promises).then(() => this.setState({\n      country_populations: data\n    }));\n  }\n\n  render() {\n    if (this.state.country_populations === 0) {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 20\n          }\n        }, \" Loading... \")\n      );\n    } else {\n      let width = 1200;\n      let height = 600;\n      const el = new Element(\"div\");\n      const svg = d3.select(el).append(\"svg\").attr(\"id\", \"chart\").attr(\"width\", width).attr(\"height\", height);\n      const margin = {\n        top: 60,\n        bottom: 100,\n        left: 80,\n        right: 40\n      };\n      const chart = svg.append(\"g\").classed(\"display\", true).attr(\"transform\", `translate(${margin.left},${margin.top})`);\n      width = width - margin.left - margin.right;\n      height = height - margin.top - margin.bottom;\n      var data = this.state.country_populations;\n      var x = \"Countries with Population Over 50 Million\";\n      var y = \"Population\"; // creating scales\n\n      const xScale = d3.scaleBand().domain(data.map(d => Object.keys(d)[0])).range([0, width]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => Object.values(d)[0])]).range([height, 0]);\n      const colorScale = d3.scaleSequential(d3.interpolateBlues);\n      chart.selectAll(\".bar-label\").data(data).enter().append(\"text\").classed(\"bar-label\", true).attr(\"x\", d => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2).attr(\"dx\", 0).attr(\"y\", d => yScale(Object.values(d)[0])).attr(\"dy\", -6);\n      const xAxis = d3.axisBottom().scale(xScale);\n      chart.append(\"g\").classed(\"x axis\", true).attr(\"transform\", `translate(0,${height})`).call(xAxis);\n      const yAxis = d3.axisLeft().ticks(5).scale(yScale);\n      chart.append(\"g\").classed(\"y axis\", true).attr(\"transform\", \"translate(0,0)\").call(yAxis);\n      chart.select(\".x.axis\").append(\"text\").attr(\"x\", width / 2).attr(\"y\", 60).attr(\"fill\", \"#000\").style(\"font-size\", \"20px\").style(\"text-anchor\", \"middle\").text(x);\n      chart.select(\".y.axis\").append(\"text\").attr(\"x\", 0).attr(\"y\", 0).attr(\"transform\", `translate(-50, ${height / 2}) rotate(-90)`).attr(\"fill\", \"#000\").style(\"font-size\", \"20px\").style(\"text-anchor\", \"middle\").text(y);\n      const yGridlines = d3.axisLeft().scale(yScale).ticks(5).tickSize(-width, 0, 0).tickFormat(\"\");\n      chart.append(\"g\").call(yGridlines).classed(\"gridline\", true);\n      chart.selectAll(\".bar\").data(data).enter().append(\"rect\").classed(\"bar\", true).attr(\"x\", d => xScale(Object.keys(d)[0])).attr(\"y\", d => yScale(Object.values(d)[0])).attr(\"height\", d => height - yScale(Object.values(d)[0])).attr(\"width\", d => xScale.bandwidth() - 2).style(\"fill\", (d, i) => colorScale(0.8));\n      return el.toReact();\n    }\n  }\n\n}\n\nexport default CountriesPopulationBarGraph;","map":{"version":3,"sources":["/Users/Parth/web-project/src/Components/CountriesPopulationBarGraph.js"],"names":["React","Component","Element","d3","axios","Promises","CountriesPopulationBarGraph","state","country_populations","componentDidMount","data","promises","i","offset","push","get","then","res","data2","results","j","dict","all","setState","render","width","height","el","svg","select","append","attr","margin","top","bottom","left","right","chart","classed","x","y","xScale","scaleBand","domain","map","d","Object","keys","range","yScale","scaleLinear","max","values","colorScale","scaleSequential","interpolateBlues","selectAll","enter","bandwidth","xAxis","axisBottom","scale","call","yAxis","axisLeft","ticks","style","text","yGridlines","tickSize","tickFormat","toReact"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Element } from \"react-faux-dom\";\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport Promises from 'es6-promise';\n\nclass CountriesPopulationBarGraph extends Component {\n\n    state = {\n        country_populations : [],\n    };\n\n    componentDidMount() {\n\n        var data = []\n        let promises = []\n\n        for (let i = 0; i < 25; i++) {\n            let offset = i*10\n            promises.push(\n            axios.get('https://api.pathogerm.com/countries/?offset=' + offset)\n            .then(res => {\n                const data2 = res.data;\n                const results = data2.results;\n    \n                for (let j = 0; j < 10; j++) {\n                    if (results[j][\"pop\"] !== null && results[j][\"pop\"] > 50000000) {\n                        var dict = {}\n                        dict[results[j][\"name\"]] = results[j][\"pop\"]\n                        data.push(dict)\n                    }\n                }\n            }))\n        }\n    \n        Promises.all(promises).then(() => this.setState({country_populations : data}));\n\n    }\n\n    render() {\n        if(this.state.country_populations === 0) {\n            return <b> Loading... </b>\n        }\n        else {\n            let width = 1200;\n            let height = 600;\n\n            const el = new Element(\"div\");\n            const svg = d3\n                .select(el)\n                .append(\"svg\")\n                .attr(\"id\", \"chart\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n\n            const margin = {\n                top: 60,\n                bottom: 100,\n                left: 80,\n                right: 40\n            };\n            \n            const chart = svg\n                .append(\"g\")\n                .classed(\"display\", true)\n                .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n            width = width - margin.left - margin.right;\n            height = height - margin.top - margin.bottom;\n\n            var data = this.state.country_populations;\n            var x = \"Countries with Population Over 50 Million\";\n            var y = \"Population\";\n            \n            // creating scales\n            const xScale = d3\n                .scaleBand()\n                .domain(data.map(d => Object.keys(d)[0]))\n                .range([0, width]);\n            const yScale = d3\n                .scaleLinear()\n                .domain([0, d3.max(data, d => Object.values(d)[0])])\n                .range([height, 0]);\n            const colorScale = d3.scaleSequential(d3.interpolateBlues);\n\n            chart\n                .selectAll(\".bar-label\")\n                .data(data)\n                .enter()\n                .append(\"text\")\n                .classed(\"bar-label\", true)\n                .attr(\"x\", d => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2)\n                .attr(\"dx\", 0)\n                .attr(\"y\", d => yScale(Object.values(d)[0]))\n                .attr(\"dy\", -6)\n\n            const xAxis = d3.axisBottom().scale(xScale);\n            chart\n                .append(\"g\")\n                .classed(\"x axis\", true)\n                .attr(\"transform\", `translate(0,${height})`)\n                .call(xAxis);\n            \n            const yAxis = d3\n                .axisLeft()\n                .ticks(5)\n                .scale(yScale);\n            \n            chart\n                .append(\"g\")\n                .classed(\"y axis\", true)\n                .attr(\"transform\", \"translate(0,0)\")\n                .call(yAxis);\n        \n            chart\n                .select(\".x.axis\")\n                .append(\"text\")\n                .attr(\"x\", width / 2)\n                .attr(\"y\", 60)\n                .attr(\"fill\", \"#000\")\n                .style(\"font-size\", \"20px\")\n                .style(\"text-anchor\", \"middle\")\n                .text(x);\n        \n            chart\n                .select(\".y.axis\")\n                .append(\"text\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 0)\n                .attr(\"transform\", `translate(-50, ${height / 2}) rotate(-90)`)\n                .attr(\"fill\", \"#000\")\n                .style(\"font-size\", \"20px\")\n                .style(\"text-anchor\", \"middle\")\n                .text(y);\n        \n            const yGridlines = d3\n                .axisLeft()\n                .scale(yScale)\n                .ticks(5)\n                .tickSize(-width, 0, 0)\n                .tickFormat(\"\");\n        \n            chart\n                .append(\"g\")\n                .call(yGridlines)\n                .classed(\"gridline\", true);\n\n            chart\n                .selectAll(\".bar\")\n                .data(data)\n                .enter()\n                .append(\"rect\")\n                .classed(\"bar\", true)\n                .attr(\"x\", d => xScale(Object.keys(d)[0]))\n                .attr(\"y\", d => yScale(Object.values(d)[0]))\n                .attr(\"height\", d => height - yScale(Object.values(d)[0]))\n                .attr(\"width\", d => xScale.bandwidth() - 2)\n                .style(\"fill\", (d, i) => colorScale(0.8));\n\n            return el.toReact();\n        }\n    }\n}\n\nexport default CountriesPopulationBarGraph;\n"]},"metadata":{},"sourceType":"module"}