{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { FinancialChartDropDownControlView } from \"./FinancialChartDropDownControlView\";\nimport { SRProvider } from \"igniteui-react-core\";\nimport { FinancialChartIndicatorMenuItems } from \"./FinancialChartIndicatorMenuItems\";\nimport { Dictionary$2 } from \"igniteui-react-core\";\nimport { Type, Array_$type, typeGetValue, fromEnum, EnumUtil, markType } from \"igniteui-react-core\";\nimport { TemplatedHtmlControl } from \"./TemplatedHtmlControl\";\nimport { FinancialIndicatorType_$type } from \"./FinancialIndicatorType\";\nimport { FinancialOverlayType_$type } from \"./FinancialOverlayType\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { FinancialChartVolumeType_$type } from \"./FinancialChartVolumeType\";\nimport { FinancialIndicatorTypeCollection } from \"./FinancialIndicatorTypeCollection\";\nimport { FinancialOverlayTypeCollection } from \"./FinancialOverlayTypeCollection\";\nimport { stringIsNullOrEmpty } from \"igniteui-react-core\";\nimport { stringFormat } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar FinancialChartIndicatorMenuView =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(FinancialChartIndicatorMenuView, _super);\n\n  function FinancialChartIndicatorMenuView() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FinancialChartIndicatorMenuView.prototype.f = function (a, b, c, d) {\n    var e_1, _a;\n\n    _super.prototype.f.call(this, a, b, c, d);\n\n    var e = new SRProvider(a);\n    TemplatedHtmlControl.n(\".financialChartIndicatorMenuLabel\", \"FinancialChart_IndicatorMenu_Header\", a, e);\n    TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='FinancialOverlayType'] span\", \"FinancialChart_IndicatorMenu_OverlaysCategoryHeader\", a, e);\n    TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='TrendLineType'] span\", \"FinancialChart_IndicatorMenu_TrendlinesCategoryHeader\", a, e);\n    TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='FinancialChartVolumeType'] span\", \"FinancialChart_IndicatorMenu_VolumeCategoryHeader\", a, e);\n    TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='FinancialIndicatorType'] span\", \"FinancialChart_IndicatorMenu_IndicatorsCategoryHeader\", a, e);\n    var f = new FinancialChartIndicatorMenuItems(e);\n    var g = new Dictionary$2(Type.$, Array_$type, 0);\n\n    try {\n      for (var _b = tslib_1.__values(fromEnum(f)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var h = _c.value;\n\n        if (h.c < 1) {\n          continue;\n        }\n\n        var i = typeGetValue(h.d);\n\n        if (!g.containsKey(h.g)) {\n          g.addItem(h.g, EnumUtil.getNames(h.g));\n        }\n\n        var j = g.item(h.g)[i];\n\n        if (stringIsNullOrEmpty(j)) {\n          continue;\n        }\n\n        j = j.charAt(0).toUpperCase() + j.substr(1);\n        var k = stringFormat(\".financialChartIndicatorMenuDropDownMenuList li[data-value='{0}']\", j);\n        TemplatedHtmlControl.m(k, h.f, a);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  FinancialChartIndicatorMenuView.prototype.k = function (a) {\n    _super.prototype.k.call(this, a);\n\n    var b = a;\n\n    if (b.tagName != \"LI\") {\n      return;\n    }\n\n    var c = b.parentNode.parentNode;\n    var d;\n    var e = false;\n\n    switch (c.getAttribute(\"data-value\")) {\n      case \"FinancialOverlayType\":\n        d = FinancialOverlayType_$type;\n        e = false;\n        break;\n\n      case \"TrendLineType\":\n        d = TrendLineType_$type;\n        e = true;\n        break;\n\n      case \"FinancialChartVolumeType\":\n        d = FinancialChartVolumeType_$type;\n        e = true;\n        break;\n\n      default:\n      case \"FinancialIndicatorType\":\n        d = FinancialIndicatorType_$type;\n        e = false;\n        break;\n    }\n\n    var f = b.classList.toggle(\"checked\");\n    var g = b.parentNode;\n\n    if (e) {\n      for (var h = 0; h < g.children.length; h++) {\n        var i = g.children.item(h);\n\n        if (i != b) {\n          i.classList.remove(\"checked\");\n        }\n      }\n\n      var j = f ? b.getAttribute(\"data-value\") : \"None\";\n\n      if (stringIsNullOrEmpty(j)) {\n        return;\n      }\n\n      var k = EnumUtil.parse(d, j, true);\n\n      if (d == FinancialChartVolumeType_$type) {\n        this.l.h = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, k);\n      } else {\n        this.l.k = EnumUtil.getEnumValue(TrendLineType_$type, k);\n      }\n    } else {\n      if (d == FinancialIndicatorType_$type) {\n        this.l.i = new FinancialIndicatorTypeCollection(0);\n        ;\n      } else {\n        this.l.j = new FinancialOverlayTypeCollection(0);\n      }\n\n      for (var l = 0; l < g.children.length; l++) {\n        var m = g.children.item(l);\n\n        if (m.classList.contains(\"checked\")) {\n          var n = m.getAttribute(\"data-value\");\n\n          if (stringIsNullOrEmpty(n)) {\n            continue;\n          }\n\n          var o = EnumUtil.parse(d, n, true);\n\n          if (d == FinancialIndicatorType_$type) {\n            var p = EnumUtil.getEnumValue(FinancialIndicatorType_$type, o);\n            this.l.i.add(p);\n          } else {\n            var q = EnumUtil.getEnumValue(FinancialOverlayType_$type, o);\n            this.l.j.add(q);\n          }\n        }\n      }\n    }\n\n    this.a.onSelectionChanged();\n  };\n\n  Object.defineProperty(FinancialChartIndicatorMenuView.prototype, \"l\", {\n    get: function () {\n      return this.a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FinancialChartIndicatorMenuView.$t = markType(FinancialChartIndicatorMenuView, 'FinancialChartIndicatorMenuView', FinancialChartDropDownControlView.$);\n  return FinancialChartIndicatorMenuView;\n}(FinancialChartDropDownControlView);\n\nexport { FinancialChartIndicatorMenuView };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/FinancialChartIndicatorMenuView.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { FinancialChartDropDownControlView } from \"./FinancialChartDropDownControlView\";\nimport { SRProvider } from \"igniteui-react-core\";\nimport { FinancialChartIndicatorMenuItems } from \"./FinancialChartIndicatorMenuItems\";\nimport { Dictionary$2 } from \"igniteui-react-core\";\nimport { Type, Array_$type, typeGetValue, fromEnum, EnumUtil, markType } from \"igniteui-react-core\";\nimport { TemplatedHtmlControl } from \"./TemplatedHtmlControl\";\nimport { FinancialIndicatorType_$type } from \"./FinancialIndicatorType\";\nimport { FinancialOverlayType_$type } from \"./FinancialOverlayType\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { FinancialChartVolumeType_$type } from \"./FinancialChartVolumeType\";\nimport { FinancialIndicatorTypeCollection } from \"./FinancialIndicatorTypeCollection\";\nimport { FinancialOverlayTypeCollection } from \"./FinancialOverlayTypeCollection\";\nimport { stringIsNullOrEmpty } from \"igniteui-react-core\";\nimport { stringFormat } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar FinancialChartIndicatorMenuView = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FinancialChartIndicatorMenuView, _super);\n    function FinancialChartIndicatorMenuView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FinancialChartIndicatorMenuView.prototype.f = function (a, b, c, d) {\n        var e_1, _a;\n        _super.prototype.f.call(this, a, b, c, d);\n        var e = new SRProvider(a);\n        TemplatedHtmlControl.n(\".financialChartIndicatorMenuLabel\", \"FinancialChart_IndicatorMenu_Header\", a, e);\n        TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='FinancialOverlayType'] span\", \"FinancialChart_IndicatorMenu_OverlaysCategoryHeader\", a, e);\n        TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='TrendLineType'] span\", \"FinancialChart_IndicatorMenu_TrendlinesCategoryHeader\", a, e);\n        TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='FinancialChartVolumeType'] span\", \"FinancialChart_IndicatorMenu_VolumeCategoryHeader\", a, e);\n        TemplatedHtmlControl.n(\".financialChartIndicatorMenuDropDownMenu li[data-value='FinancialIndicatorType'] span\", \"FinancialChart_IndicatorMenu_IndicatorsCategoryHeader\", a, e);\n        var f = new FinancialChartIndicatorMenuItems(e);\n        var g = new Dictionary$2(Type.$, Array_$type, 0);\n        try {\n            for (var _b = tslib_1.__values(fromEnum(f)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var h = _c.value;\n                if (h.c < 1) {\n                    continue;\n                }\n                var i = typeGetValue(h.d);\n                if (!g.containsKey(h.g)) {\n                    g.addItem(h.g, EnumUtil.getNames(h.g));\n                }\n                var j = g.item(h.g)[i];\n                if (stringIsNullOrEmpty(j)) {\n                    continue;\n                }\n                j = j.charAt(0).toUpperCase() + j.substr(1);\n                var k = stringFormat(\".financialChartIndicatorMenuDropDownMenuList li[data-value='{0}']\", j);\n                TemplatedHtmlControl.m(k, h.f, a);\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    };\n    FinancialChartIndicatorMenuView.prototype.k = function (a) {\n        _super.prototype.k.call(this, a);\n        var b = a;\n        if (b.tagName != \"LI\") {\n            return;\n        }\n        var c = b.parentNode.parentNode;\n        var d;\n        var e = false;\n        switch (c.getAttribute(\"data-value\")) {\n            case \"FinancialOverlayType\":\n                d = FinancialOverlayType_$type;\n                e = false;\n                break;\n            case \"TrendLineType\":\n                d = TrendLineType_$type;\n                e = true;\n                break;\n            case \"FinancialChartVolumeType\":\n                d = FinancialChartVolumeType_$type;\n                e = true;\n                break;\n            default:\n            case \"FinancialIndicatorType\":\n                d = FinancialIndicatorType_$type;\n                e = false;\n                break;\n        }\n        var f = b.classList.toggle(\"checked\");\n        var g = b.parentNode;\n        if (e) {\n            for (var h = 0; h < g.children.length; h++) {\n                var i = g.children.item(h);\n                if (i != b) {\n                    i.classList.remove(\"checked\");\n                }\n            }\n            var j = f ? b.getAttribute(\"data-value\") : \"None\";\n            if (stringIsNullOrEmpty(j)) {\n                return;\n            }\n            var k = EnumUtil.parse(d, j, true);\n            if (d == FinancialChartVolumeType_$type) {\n                this.l.h = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, k);\n            }\n            else {\n                this.l.k = EnumUtil.getEnumValue(TrendLineType_$type, k);\n            }\n        }\n        else {\n            if (d == FinancialIndicatorType_$type) {\n                this.l.i = new FinancialIndicatorTypeCollection(0);\n                ;\n            }\n            else {\n                this.l.j = new FinancialOverlayTypeCollection(0);\n            }\n            for (var l = 0; l < g.children.length; l++) {\n                var m = g.children.item(l);\n                if (m.classList.contains(\"checked\")) {\n                    var n = m.getAttribute(\"data-value\");\n                    if (stringIsNullOrEmpty(n)) {\n                        continue;\n                    }\n                    var o = EnumUtil.parse(d, n, true);\n                    if (d == FinancialIndicatorType_$type) {\n                        var p = EnumUtil.getEnumValue(FinancialIndicatorType_$type, o);\n                        this.l.i.add(p);\n                    }\n                    else {\n                        var q = EnumUtil.getEnumValue(FinancialOverlayType_$type, o);\n                        this.l.j.add(q);\n                    }\n                }\n            }\n        }\n        this.a.onSelectionChanged();\n    };\n    Object.defineProperty(FinancialChartIndicatorMenuView.prototype, \"l\", {\n        get: function () {\n            return this.a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FinancialChartIndicatorMenuView.$t = markType(FinancialChartIndicatorMenuView, 'FinancialChartIndicatorMenuView', FinancialChartDropDownControlView.$);\n    return FinancialChartIndicatorMenuView;\n}(FinancialChartDropDownControlView));\nexport { FinancialChartIndicatorMenuView };\n//# sourceMappingURL=FinancialChartIndicatorMenuView.js.map\n"]},"metadata":{},"sourceType":"module"}