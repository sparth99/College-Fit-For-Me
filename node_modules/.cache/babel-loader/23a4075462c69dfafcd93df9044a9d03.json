{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { PriceDisplayType_$type } from \"./PriceDisplayType\";\nimport { IgrFinancialSeries } from \"./igr-financial-series\";\nimport { FinancialPriceSeries } from \"./FinancialPriceSeries\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.\n * Default required members: Open, Low, High, Close\n*\n* The `IgrFinancialPriceSeries` class represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrFinancialPriceSeries({name: \"series\"});\n* this.series.dataSource = this.financialData;\n* this.series.xAxis = this.timeXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"timeXAxis\";\n* this.series.yAxisName = \"numericYAxis\";\n* this.series.highMemberPath=\"High\" ;\n* this.series.lowMemberPath=\"Low\";\n* this.series.closeMemberPath=\"Close\";\n* this.series.openMemberPath=\"Open\";\n* this.series.volumeMemberPath=\"Volume\";\n* ```\n*/\n\nvar IgrFinancialPriceSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrFinancialPriceSeries, _super);\n\n  function IgrFinancialPriceSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrFinancialPriceSeries.prototype.createImplementation = function () {\n    return new FinancialPriceSeries();\n  };\n\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current financial series.\n    *\n    * Use the `trendLineType` property for the trend type of the current financial series.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLineType={this.state.trendLineType}  />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineType= \"CubicFit\";\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineType;\n    },\n    set: function (v) {\n      this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush to use to draw the trend line.\n    *\n    * Use the `trendLineBrush` property to brush the the trend line.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLineBrush=\"Blue\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineBrush=\"red\";\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.trendLineBrush);\n    },\n    set: function (v) {\n      this.i.trendLineBrush = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this FinancialPriceSeries.\n    *\n    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.\n    *\n    * ````ts\n    * <IgrDataChart\n    *         ref={this.onChartRef}\n    *         dataSource={this.data}\n    *         width=\"100%\"\n    *         height=\"100%\" >\n    *\n    *         <IgrCategoryXAxis name=\"xAxis\" label=\"Label\" />\n    *         <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *         <IgrFinancialPriceSeries\n    *             name=\"series1\"\n    *             xAxisName=\"xAxis\"\n    *             yAxisName=\"yAxis\"\n    *             highMemberPath=\"High\"\n    *             lowMemberPath=\"Low\"\n    *             closeMemberPath=\"Close\"\n    *             openMemberPath=\"Open\"\n    *             volumeMemberPath=\"Volume\"\n    *             trendLineType={this.state.trendLineType}\n    *             displayType= \"Candlestick\"\n    *             trendLinePeriod = {2}\n    *             actualTrendLineBrush= \"blue\"/>\n    *\n    *     </IgrDataChart>\n    *\n    * \t```\n    * ````\n    */\n    get: function () {\n      return brushToString(this.i.p3);\n    },\n    set: function (v) {\n      this.i.p3 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.\n    *\n    * Use the `trendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLineThickness=\"3\"/>\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineThickness=5;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineThickness;\n    },\n    set: function (v) {\n      this.i.trendLineThickness = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the trend line period for the current series.\n     * The typical, and initial, value for trend line period is 7.\n    *\n    * Use the `trendLinePeriod` property for the periodo the the current series.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \ttrendLinePeriod={7} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLinePeriod= 7;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLinePeriod;\n    },\n    set: function (v) {\n      this.i.trendLinePeriod = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"displayType\", {\n    /**\n     * Gets or sets the display type for the current FinancialPriceSeries object.\n    *\n    * Use the `displayType` property for the display type of the current FinancialPriceSeries object.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.displayType=PriceDisplayType.Candlestick;\n    * ```\n    */\n    get: function () {\n      return this.i.pk;\n    },\n    set: function (v) {\n      this.i.pk = ensureEnum(PriceDisplayType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialPriceSeries.prototype, \"negativeOutline\", {\n    /**\n     * Brush to use for outlining negative elements in the series.\n    *\n    * Use the `negativeOutline` property to brush the outline negative elements in the series.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tnegativeOutline=\"Red\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.negativeOutline=\"red\";\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.p4);\n    },\n    set: function (v) {\n      this.i.p4 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  *\n  * The `getSeriesValueBoundingBox` method return the best available value bounding box within the series that has the best value match for the world position provided.\n  */\n\n  IgrFinancialPriceSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.lu(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The categorySeries is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  *\n  * The `scrollIntoView` methos scrolls the series to display the item for the specified data item.\n  */\n\n\n  IgrFinancialPriceSeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.c9(item);\n    return iv;\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  *\n  * The `getItemSpan` method is used For a category plotted series, returns the current width of the items within the categories.\n  *\n  * This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned\n  */\n\n\n  IgrFinancialPriceSeries.prototype.getItemSpan = function () {\n    var iv = this.i.eg();\n    return iv;\n  };\n\n  IgrFinancialPriceSeries.prototype.setNegativeColors = function (negativeBrush, negativeOutline) {\n    this.i.ji(stringToBrush(negativeBrush), stringToBrush(negativeOutline));\n  };\n\n  return IgrFinancialPriceSeries;\n}(IgrFinancialSeries);\n\nexport { IgrFinancialPriceSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-financial-price-series.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { PriceDisplayType_$type } from \"./PriceDisplayType\";\nimport { IgrFinancialSeries } from \"./igr-financial-series\";\nimport { FinancialPriceSeries } from \"./FinancialPriceSeries\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.\n * Default required members: Open, Low, High, Close\n*\n* The `IgrFinancialPriceSeries` class represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrFinancialPriceSeries({name: \"series\"});\n* this.series.dataSource = this.financialData;\n* this.series.xAxis = this.timeXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"timeXAxis\";\n* this.series.yAxisName = \"numericYAxis\";\n* this.series.highMemberPath=\"High\" ;\n* this.series.lowMemberPath=\"Low\";\n* this.series.closeMemberPath=\"Close\";\n* this.series.openMemberPath=\"Open\";\n* this.series.volumeMemberPath=\"Volume\";\n* ```\n*/\nvar IgrFinancialPriceSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrFinancialPriceSeries, _super);\n    function IgrFinancialPriceSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrFinancialPriceSeries.prototype.createImplementation = function () {\n        return new FinancialPriceSeries();\n    };\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current financial series.\n        *\n        * Use the `trendLineType` property for the trend type of the current financial series.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLineType={this.state.trendLineType}  />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineType= \"CubicFit\";\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineType;\n        },\n        set: function (v) {\n            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush to use to draw the trend line.\n        *\n        * Use the `trendLineBrush` property to brush the the trend line.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLineBrush=\"Blue\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineBrush=\"red\";\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.trendLineBrush);\n        },\n        set: function (v) {\n            this.i.trendLineBrush = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this FinancialPriceSeries.\n        *\n        * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.\n        *\n        * ````ts\n        * <IgrDataChart\n        *         ref={this.onChartRef}\n        *         dataSource={this.data}\n        *         width=\"100%\"\n        *         height=\"100%\" >\n        *\n        *         <IgrCategoryXAxis name=\"xAxis\" label=\"Label\" />\n        *         <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *         <IgrFinancialPriceSeries\n        *             name=\"series1\"\n        *             xAxisName=\"xAxis\"\n        *             yAxisName=\"yAxis\"\n        *             highMemberPath=\"High\"\n        *             lowMemberPath=\"Low\"\n        *             closeMemberPath=\"Close\"\n        *             openMemberPath=\"Open\"\n        *             volumeMemberPath=\"Volume\"\n        *             trendLineType={this.state.trendLineType}\n        *             displayType= \"Candlestick\"\n        *             trendLinePeriod = {2}\n        *             actualTrendLineBrush= \"blue\"/>\n        *\n        *     </IgrDataChart>\n        *\n        * \t```\n        * ````\n        */\n        get: function () {\n            return brushToString(this.i.p3);\n        },\n        set: function (v) {\n            this.i.p3 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.\n        *\n        * Use the `trendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLineThickness=\"3\"/>\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineThickness=5;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineThickness;\n        },\n        set: function (v) {\n            this.i.trendLineThickness = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the trend line period for the current series.\n         * The typical, and initial, value for trend line period is 7.\n        *\n        * Use the `trendLinePeriod` property for the periodo the the current series.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \ttrendLinePeriod={7} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLinePeriod= 7;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLinePeriod;\n        },\n        set: function (v) {\n            this.i.trendLinePeriod = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"displayType\", {\n        /**\n         * Gets or sets the display type for the current FinancialPriceSeries object.\n        *\n        * Use the `displayType` property for the display type of the current FinancialPriceSeries object.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.displayType=PriceDisplayType.Candlestick;\n        * ```\n        */\n        get: function () {\n            return this.i.pk;\n        },\n        set: function (v) {\n            this.i.pk = ensureEnum(PriceDisplayType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialPriceSeries.prototype, \"negativeOutline\", {\n        /**\n         * Brush to use for outlining negative elements in the series.\n        *\n        * Use the `negativeOutline` property to brush the outline negative elements in the series.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tnegativeOutline=\"Red\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.negativeOutline=\"red\";\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.p4);\n        },\n        set: function (v) {\n            this.i.p4 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    *\n    * The `getSeriesValueBoundingBox` method return the best available value bounding box within the series that has the best value match for the world position provided.\n    */\n    IgrFinancialPriceSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.lu(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The categorySeries is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    *\n    * The `scrollIntoView` methos scrolls the series to display the item for the specified data item.\n    */\n    IgrFinancialPriceSeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.c9(item);\n        return (iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    *\n    * The `getItemSpan` method is used For a category plotted series, returns the current width of the items within the categories.\n    *\n    * This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned\n    */\n    IgrFinancialPriceSeries.prototype.getItemSpan = function () {\n        var iv = this.i.eg();\n        return (iv);\n    };\n    IgrFinancialPriceSeries.prototype.setNegativeColors = function (negativeBrush, negativeOutline) {\n        this.i.ji(stringToBrush(negativeBrush), stringToBrush(negativeOutline));\n    };\n    return IgrFinancialPriceSeries;\n}(IgrFinancialSeries));\nexport { IgrFinancialPriceSeries };\n//# sourceMappingURL=igr-financial-price-series.js.map\n"]},"metadata":{},"sourceType":"module"}