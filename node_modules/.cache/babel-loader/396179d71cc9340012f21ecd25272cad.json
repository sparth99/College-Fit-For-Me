{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrFinancialOverlay } from \"./igr-financial-overlay\";\nimport { PriceChannelOverlay } from \"./PriceChannelOverlay\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent Financial Price Channel Overlay series.\n * Default required members: High, Low\n*\n* You can use the `IgrPriceChannelOverlay` to display price volatility.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPriceChannelOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPriceChannelOverlay({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrPriceChannelOverlay =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrPriceChannelOverlay, _super);\n\n  function IgrPriceChannelOverlay(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrPriceChannelOverlay.prototype.createImplementation = function () {\n    return new PriceChannelOverlay();\n  };\n\n  Object.defineProperty(IgrPriceChannelOverlay.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrPriceChannelOverlay.prototype, \"period\", {\n    /**\n     * Gets or sets the moving average period for the current PriceChannelOverlay object.\n     * The typical, and initial, value for Bollinger band periods is 14.\n    *\n    * You can use the `period` to set the moving average.\n    *\n    * ```ts\n    * this.series.period = 14;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *    <IgrPriceChannelOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tperiod = {14} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.pq;\n    },\n    set: function (v) {\n      this.i.pq = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrPriceChannelOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrPriceChannelOverlay.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.fc(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrPriceChannelOverlay.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.fe(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  return IgrPriceChannelOverlay;\n}(IgrFinancialOverlay);\n\nexport { IgrPriceChannelOverlay };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-price-channel-overlay.ts"],"names":[],"mappings":";AAKA,SAAS,mBAAT,QAA+D,yBAA/D;AAGA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,OAAT,QAAwB,qBAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAA,sBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4C,EAAA,OAAA,CAAA,SAAA,CAAA,sBAAA,EAAA,MAAA;;AAa3C,WAAA,sBAAA,CAAY,KAAZ,EAA+C;WAC9C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,sBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,mBAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,sBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAqC5B,EAAA,MAAA,CAAA,cAAA,CAAI,sBAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AA/BV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFS;SAGV,UAAW,CAAX,EAAoB;AACnB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALS;oBAAA;;AAAA,GAAV;;AAMO,EAAA,sBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,KAAtB,EAAsC,gBAAtC,EAAiE,YAAjE,EAAsF;AACrF,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,gBAA1B,EAA4C,YAA5C,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIA,EAAA,sBAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,KAA3B,EAA2C,YAA3C,EAAgE;AAC/D,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,YAA1B,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIA,EAAA,sBAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,KAA/B,EAA+C,YAA/C,EAAoE;AACnE,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,EAA0B,YAA1B,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,sBAAA;AAAC,CAjED,CAA4C,mBAA5C,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrFinancialOverlay } from \"./igr-financial-overlay\";\nimport { PriceChannelOverlay } from \"./PriceChannelOverlay\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent Financial Price Channel Overlay series.\n * Default required members: High, Low\n*\n* You can use the `IgrPriceChannelOverlay` to display price volatility.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPriceChannelOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPriceChannelOverlay({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrPriceChannelOverlay = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrPriceChannelOverlay, _super);\n    function IgrPriceChannelOverlay(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrPriceChannelOverlay.prototype.createImplementation = function () {\n        return new PriceChannelOverlay();\n    };\n    Object.defineProperty(IgrPriceChannelOverlay.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrPriceChannelOverlay.prototype, \"period\", {\n        /**\n         * Gets or sets the moving average period for the current PriceChannelOverlay object.\n         * The typical, and initial, value for Bollinger band periods is 14.\n        *\n        * You can use the `period` to set the moving average.\n        *\n        * ```ts\n        * this.series.period = 14;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *    <IgrPriceChannelOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tperiod = {14} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.pq;\n        },\n        set: function (v) {\n            this.i.pq = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrPriceChannelOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrPriceChannelOverlay.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.fc(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrPriceChannelOverlay.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.fe(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    return IgrPriceChannelOverlay;\n}(IgrFinancialOverlay));\nexport { IgrPriceChannelOverlay };\n//# sourceMappingURL=igr-price-channel-overlay.js.map\n"]},"metadata":{},"sourceType":"module"}