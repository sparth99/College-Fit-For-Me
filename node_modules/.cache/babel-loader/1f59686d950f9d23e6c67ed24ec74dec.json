{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ConsolidatedItemsPosition_$type } from \"./ConsolidatedItemsPosition\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { ColumnSeries } from \"./ColumnSeries\";\nimport { ensureEnum, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent column series.\n * Compare values across categories by using vertical rectangles.Use it when the order of categories is not important or for displaying\n * item counts such as a histogram.\n*\n* ```ts\n*  <IgrDataChart\n* \t\tref={this.onChartRef}\n*         dataSource={this.data}>\n*\n*         <IgrCategoryXAxis name=\"xAxisYears\"/>\n*         <IgrCategoryXAxis name=\"xAxisMonths\" />\n*         <IgrNumericYAxis  name=\"yAxisLeft\"  />\n*         <IgrNumericYAxis  name=\"yAxisRight\" />\n*\n*         <IgrColumnSeries name=\"series1\"\n*         valueMemberPath=\"volume\"\n*         xAxisName=\"xAxisMonths\"\n*         yAxisName=\"yAxisLeft\"\n*         isTransitionInEnabled=\"true\" />\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"volume\";\n* ```\n*/\n\nvar IgrColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrColumnSeries, _super);\n\n  function IgrColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrColumnSeries.prototype.createImplementation = function () {\n    return new ColumnSeries();\n  };\n\n  Object.defineProperty(IgrColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.ql;\n    },\n    set: function (v) {\n      this.i.ql = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.qm;\n    },\n    set: function (v) {\n      this.i.qm = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"consolidatedColumnVerticalPosition\", {\n    /**\n     * The positioning logic to use for columns which have been consolidated into a single visual element.\n    */\n    get: function () {\n      return this.i.qj;\n    },\n    set: function (v) {\n      this.i.qj = ensureEnum(ConsolidatedItemsPosition_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  */\n\n  IgrColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.lu(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.eg();\n    return iv;\n  };\n\n  return IgrColumnSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrColumnSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-column-series.ts"],"names":[],"mappings":";AAKA,SAAoC,+BAApC,QAA2E,6BAA3E;AACA,SAAS,mCAAT,QAA+F,2CAA/F;AAKA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,UAAT,EAAqB,OAArB,EAA8B,QAA9B,QAA8C,qBAA9C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAA,eAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAA,MAAA;;AAapC,WAAA,eAAA,CAAY,KAAZ,EAAwC;WACvC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,eAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,YAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAS5B,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,oCAAJ,EAAsC;AAHtC;;;SAGA,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,EAAd;AACA,KAFqC;SAGtC,UAAuC,CAAvC,EAAmE;AAClE,WAAK,CAAL,CAAO,EAAP,GAAY,UAAU,CAA4B,+BAA5B,EAA6D,CAA7D,CAAtB;AACA,KALqC;oBAAA;;AAAA,GAAtC;AAMA;;;;;;AAKO,EAAA,eAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,KAAjC,EAA+C;AAC9C,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,OAAO,CAAC,KAAD,CAAjB,CAAT;AACA,WAAO,QAAQ,CAAC,EAAD,CAAf;AACA,GAHM;AAIP;;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,EAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,eAAA;AAAC,CA5DD,CAAqC,mCAArC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ConsolidatedItemsPosition_$type } from \"./ConsolidatedItemsPosition\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { ColumnSeries } from \"./ColumnSeries\";\nimport { ensureEnum, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent column series.\n * Compare values across categories by using vertical rectangles.Use it when the order of categories is not important or for displaying\n * item counts such as a histogram.\n*\n* ```ts\n*  <IgrDataChart\n* \t\tref={this.onChartRef}\n*         dataSource={this.data}>\n*\n*         <IgrCategoryXAxis name=\"xAxisYears\"/>\n*         <IgrCategoryXAxis name=\"xAxisMonths\" />\n*         <IgrNumericYAxis  name=\"yAxisLeft\"  />\n*         <IgrNumericYAxis  name=\"yAxisRight\" />\n*\n*         <IgrColumnSeries name=\"series1\"\n*         valueMemberPath=\"volume\"\n*         xAxisName=\"xAxisMonths\"\n*         yAxisName=\"yAxisLeft\"\n*         isTransitionInEnabled=\"true\" />\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"volume\";\n* ```\n*/\nvar IgrColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrColumnSeries, _super);\n    function IgrColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrColumnSeries.prototype.createImplementation = function () {\n        return new ColumnSeries();\n    };\n    Object.defineProperty(IgrColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.ql;\n        },\n        set: function (v) {\n            this.i.ql = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.qm;\n        },\n        set: function (v) {\n            this.i.qm = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"consolidatedColumnVerticalPosition\", {\n        /**\n         * The positioning logic to use for columns which have been consolidated into a single visual element.\n        */\n        get: function () {\n            return this.i.qj;\n        },\n        set: function (v) {\n            this.i.qj = ensureEnum(ConsolidatedItemsPosition_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    */\n    IgrColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.lu(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.eg();\n        return (iv);\n    };\n    return IgrColumnSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrColumnSeries };\n//# sourceMappingURL=igr-column-series.js.map\n"]},"metadata":{},"sourceType":"module"}