{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { AreaSeries } from \"./AreaSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent area series.\n * Displays trend over time or ordered categories.Useful when there are many data points and the order is important.\n*\n* The `IgrAreaSeries` class represents a IgxDataChartComponent area series.Displays trend over time or ordered categories.\n*\n* Useful when there are many data points and the order is important.\n*\n* ```ts\n* <IgrDataChart\n* \t width=\"100%\"\n*      height=\"100%\"\n* \t chartTitle=\"COMPANY FINANCIAL PROJECTIONS\"\n*      dataSource={this.data}>\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrAreaSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrAreaSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrAreaSeries, _super);\n\n  function IgrAreaSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrAreaSeries.prototype.createImplementation = function () {\n    return new AreaSeries();\n  };\n\n  Object.defineProperty(IgrAreaSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAreaSeries.prototype, \"isAreaOrLine\", {\n    /**\n     * Gets whether the current series shows an area or line shape.\n    *\n    * The `isAreaOrLine` is used to check if the current series shows an area or line shape.\n    */\n    get: function () {\n      return this.i.ck;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrAreaSeries.prototype, \"unknownValuePlotting\", {\n    /**\n     * Determines how unknown values will be plotted on the chart.\n     * Null and Double.NaN are two examples of unknown values.\n    *\n    * The `unknownValuePlotting` property is used to determines how unknown values will be plotted on the chart.\n    *\n    * Null and Double.NaN are two examples of unknown values.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrAreaSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \tunknownValuePlotting=\"DontPlot\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n    * ```\n    */\n    get: function () {\n      return this.i.unknownValuePlotting;\n    },\n    set: function (v) {\n      this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrAreaSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrAreaSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-area-series.ts"],"names":[],"mappings":";AAKA,SAA+B,0BAA/B,QAAiE,qBAAjE;AACA,SAAS,mCAAT,QAA+F,2CAA/F;AAKA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAqB,UAArB,QAAuC,qBAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,IAAA,aAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,EAAA,MAAA;;AAalC,WAAA,aAAA,CAAY,KAAZ,EAAsC;WACrC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,aAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,UAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAW5B,EAAA,MAAA,CAAA,cAAA,CAAI,aAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AALhB;;;;;SAKA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFe;oBAAA;;AAAA,GAAhB;AA+CA,EAAA,MAAA,CAAA,cAAA,CAAI,aAAA,CAAA,SAAJ,EAAI,sBAAJ,EAAwB;AA5CxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4CA,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,oBAAd;AACA,KAFuB;SAGxB,UAAyB,CAAzB,EAAgD;AAC/C,WAAK,CAAL,CAAO,oBAAP,GAA8B,UAAU,CAAuB,0BAAvB,EAAmD,CAAnD,CAAxC;AACA,KALuB;oBAAA;;AAAA,GAAxB;AAMD,SAAA,aAAA;AAAC,CA1ED,CAAmC,mCAAnC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { AreaSeries } from \"./AreaSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent area series.\n * Displays trend over time or ordered categories.Useful when there are many data points and the order is important.\n*\n* The `IgrAreaSeries` class represents a IgxDataChartComponent area series.Displays trend over time or ordered categories.\n*\n* Useful when there are many data points and the order is important.\n*\n* ```ts\n* <IgrDataChart\n* \t width=\"100%\"\n*      height=\"100%\"\n* \t chartTitle=\"COMPANY FINANCIAL PROJECTIONS\"\n*      dataSource={this.data}>\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrAreaSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrAreaSeries, _super);\n    function IgrAreaSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrAreaSeries.prototype.createImplementation = function () {\n        return new AreaSeries();\n    };\n    Object.defineProperty(IgrAreaSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAreaSeries.prototype, \"isAreaOrLine\", {\n        /**\n         * Gets whether the current series shows an area or line shape.\n        *\n        * The `isAreaOrLine` is used to check if the current series shows an area or line shape.\n        */\n        get: function () {\n            return this.i.ck;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrAreaSeries.prototype, \"unknownValuePlotting\", {\n        /**\n         * Determines how unknown values will be plotted on the chart.\n         * Null and Double.NaN are two examples of unknown values.\n        *\n        * The `unknownValuePlotting` property is used to determines how unknown values will be plotted on the chart.\n        *\n        * Null and Double.NaN are two examples of unknown values.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrAreaSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \tunknownValuePlotting=\"DontPlot\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n        * ```\n        */\n        get: function () {\n            return this.i.unknownValuePlotting;\n        },\n        set: function (v) {\n            this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrAreaSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrAreaSeries };\n//# sourceMappingURL=igr-area-series.js.map\n"]},"metadata":{},"sourceType":"module"}