{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { IgrAnchoredRadialSeries } from \"./igr-anchored-radial-series\";\nimport { RadialPieSeries } from \"./RadialPieSeries\";\n/**\n * Represents a IgxDataChartComponent radial pie series.\n * Compare values across categories by using radial pie slices.\n*/\n\nvar IgrRadialPieSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrRadialPieSeries, _super);\n\n  function IgrRadialPieSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrRadialPieSeries.prototype.createImplementation = function () {\n    return new RadialPieSeries();\n  };\n\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.or;\n    },\n    set: function (v) {\n      this.i.or = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.os;\n    },\n    set: function (v) {\n      this.i.os = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n  IgrRadialPieSeries.prototype.getItemSpan = function () {\n    var iv = this.i.eg();\n    return iv;\n  };\n\n  return IgrRadialPieSeries;\n}(IgrAnchoredRadialSeries);\n\nexport { IgrRadialPieSeries };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-radial-pie-series.ts"],"names":[],"mappings":";AAKA,SAAS,uBAAT,QAAuE,8BAAvE;AAIA,SAAS,eAAT,QAAgC,mBAAhC;AAEA;;;;;AAIA,IAAA,kBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAA,MAAA;;AAavC,WAAA,kBAAA,CAAY,KAAZ,EAA2C;WAC1C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,I;AACZ;;AAZQ,EAAA,kBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAEC,WAAO,IAAI,eAAJ,EAAP;AACA,GAHS;;AAOmB,EAAA,MAAA,CAAA,cAAA,CAAW,kBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAS5B,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;SAGX,UAAY,CAAZ,EAAqB;AACpB,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALU;oBAAA;;AAAA,GAAX;AAMA;;;;;AAIO,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,EAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAIR,SAAA,kBAAA;AAAC,CA1CD,CAAwC,uBAAxC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { IgrAnchoredRadialSeries } from \"./igr-anchored-radial-series\";\nimport { RadialPieSeries } from \"./RadialPieSeries\";\n/**\n * Represents a IgxDataChartComponent radial pie series.\n * Compare values across categories by using radial pie slices.\n*/\nvar IgrRadialPieSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrRadialPieSeries, _super);\n    function IgrRadialPieSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrRadialPieSeries.prototype.createImplementation = function () {\n        return new RadialPieSeries();\n    };\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.or;\n        },\n        set: function (v) {\n            this.i.or = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.os;\n        },\n        set: function (v) {\n            this.i.os = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrRadialPieSeries.prototype.getItemSpan = function () {\n        var iv = this.i.eg();\n        return (iv);\n    };\n    return IgrRadialPieSeries;\n}(IgrAnchoredRadialSeries));\nexport { IgrRadialPieSeries };\n//# sourceMappingURL=igr-radial-pie-series.js.map\n"]},"metadata":{},"sourceType":"module"}