{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrNumericXAxis } from \"./igr-numeric-x-axis\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrStyleShapeEventArgs } from \"./igr-style-shape-event-args\";\nimport { IgrSeries } from \"./igr-series\";\n/**\n * Series class for rendering polygons.\n*/\n\nvar IgrShapeSeriesBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrShapeSeriesBase, _super);\n\n  function IgrShapeSeriesBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    _this._styleShape = null;\n    _this._styleShape_wrapped = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"shapeMemberPath\", {\n    /**\n     * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.\n     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.\n    */\n    get: function () {\n      return this.i.mt;\n    },\n    set: function (v) {\n      this.i.mt = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for the current ScatterBase object.\n    */\n    get: function () {\n      if (this.i.l6 == null) {\n        return null;\n      }\n\n      if (!this.i.l6.externalObject) {\n        var e = IgrNumericXAxis._createFromInternal(this.i.l6);\n\n        if (e) {\n          e._implementation = this.i.l6;\n        }\n\n        this.i.l6.externalObject = e;\n      }\n\n      return this.i.l6.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.l6 = null : this.i.l6 = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function () {\n      return this._xAxisName;\n    },\n    set: function (v) {\n      this._xAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for the current ScatterBase object.\n    */\n    get: function () {\n      if (this.i.l8 == null) {\n        return null;\n      }\n\n      if (!this.i.l8.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.l8);\n\n        if (e) {\n          e._implementation = this.i.l8;\n        }\n\n        this.i.l8.externalObject = e;\n      }\n\n      return this.i.l8.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.l8 = null : this.i.l8 = v.i;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function () {\n      return this._yAxisName;\n    },\n    set: function (v) {\n      this._yAxisName = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"shapeFilterResolution\", {\n    /**\n     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.\n     * In the case of ScatterPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.\n    */\n    get: function () {\n      return this.i.mn;\n    },\n    set: function (v) {\n      this.i.mn = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"isShape\", {\n    /**\n     * Gets whether or not this series is a shape series\n    */\n    get: function () {\n      return this.i.c5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrShapeSeriesBase.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrShapeSeriesBase.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrShapeSeriesBase.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.fs(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrShapeSeriesBase.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.md(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  */\n\n\n  IgrShapeSeriesBase.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.mc(axis);\n    return iv;\n  };\n\n  Object.defineProperty(IgrShapeSeriesBase.prototype, \"styleShape\", {\n    /**\n     * Raised when tile's image URI should be provided\n    */\n    get: function () {\n      return this._styleShape;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._styleShape_wrapped !== null) {\n        this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);\n        this._styleShape_wrapped = null;\n        this._styleShape = null;\n      }\n\n      this._styleShape = ev;\n\n      this._styleShape_wrapped = function (o, e) {\n        var outerArgs = new IgrStyleShapeEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeStyleShape) {\n          _this.beforeStyleShape(_this, outerArgs);\n        }\n\n        if (_this._styleShape) {\n          _this._styleShape(_this, outerArgs);\n        }\n      };\n\n      this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrShapeSeriesBase;\n}(IgrSeries);\n\nexport { IgrShapeSeriesBase };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-shape-series-base.ts"],"names":[],"mappings":";AAKA,SAAS,eAAT,EAA0B,cAA1B,QAAgD,qBAAhD;AACA,SAAS,eAAT,QAAgC,sBAAhC;AACA,SAAS,eAAT,QAAgC,sBAAhC;AACA,SAAS,sBAAT,QAAuC,8BAAvC;AACA,SAAS,SAAT,QAA2C,cAA3C;AAKA;;;;AAGA,IAAA,kBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgH,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAA,MAAA;;AAU/G,WAAA,kBAAA,CAAY,KAAZ,EAAoB;AAApB,QAAA,KAAA,GACoC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADhD;;AAsCoB,IAAA,KAAA,CAAA,UAAA,GAAqB,IAArB;AAiCA,IAAA,KAAA,CAAA,UAAA,GAAqB,IAArB;AAkFR,IAAA,KAAA,CAAA,WAAA,GAA0E,IAA1E;AACA,IAAA,KAAA,CAAA,mBAAA,GAA2B,IAA3B;;AAtJX;;AAP2B,EAAA,MAAA,CAAA,cAAA,CAAW,kBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHxC;;;SAG4B,YAAA;AAC3B,aAAO,KAAK,eAAZ;AACA,KAFuC;oBAAA;;AAAA,GAAZ;AAY5B,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AAJnB;;;;SAIA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAA6B;AAC5B,WAAK,CAAL,CAAO,EAAP,GAAY,CAAZ;AACA,KALkB;oBAAA;;AAAA,GAAnB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;;SAGA,YAAA;AACwC,UAAI,KAAK,CAAL,CAAO,EAAP,IAAa,IAAjB,EAAuB;AACnB,eAAO,IAAP;AACH;;AAED,UAAI,CAAE,KAAK,CAAL,CAAO,EAAP,CAAkB,cAAxB,EAAwC;AACpC,YAAI,CAAC,GAAG,eAAe,CAAC,mBAAhB,CAAoC,KAAK,CAAL,CAAO,EAA3C,CAAR;;AACA,YAAI,CAAJ,EAAO;AACF,UAAA,CAAS,CAAC,eAAV,GAA4B,KAAK,CAAL,CAAO,EAAnC;AACJ;;AACA,aAAK,CAAL,CAAO,EAAP,CAAkB,cAAlB,GAAmC,CAAnC;AACJ;;AACxC,aAAQ,KAAK,CAAL,CAAO,EAAP,CAAkB,cAA1B;AACA,KAbQ;SAcT,UAAU,CAAV,EAA4B;AACY,UAAI,CAAC,IAAI,IAAL,IAAa,KAAK,iBAAlB,IAAwC,CAAS,CAAC,QAAtD,EAAiE,CAAS,CAAC,QAAV,CAAmB,KAAK,iBAAxB,EAA2C,IAA3C,EAAiD,IAAjD;AAExG,MAAA,CAAC,IAAI,IAAL,GAAY,KAAK,CAAL,CAAO,EAAP,GAAY,IAAxB,GAA+B,KAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAC,CAA7C;AACA,KAlBQ;oBAAA;;AAAA,GAAT;AAwBY,EAAA,MAAA,CAAA,cAAA,CAAW,kBAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,UAAZ;AACH,KAFmB;SAGpB,UAAqB,CAArB,EAA8B;AAC1B,WAAK,UAAL,GAAkB,CAAlB;AACH,KALmB;oBAAA;;AAAA,GAApB;AASZ,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;;SAGA,YAAA;AACwC,UAAI,KAAK,CAAL,CAAO,EAAP,IAAa,IAAjB,EAAuB;AACnB,eAAO,IAAP;AACH;;AAED,UAAI,CAAE,KAAK,CAAL,CAAO,EAAP,CAAkB,cAAxB,EAAwC;AACpC,YAAI,CAAC,GAAG,eAAe,CAAC,mBAAhB,CAAoC,KAAK,CAAL,CAAO,EAA3C,CAAR;;AACA,YAAI,CAAJ,EAAO;AACF,UAAA,CAAS,CAAC,eAAV,GAA4B,KAAK,CAAL,CAAO,EAAnC;AACJ;;AACA,aAAK,CAAL,CAAO,EAAP,CAAkB,cAAlB,GAAmC,CAAnC;AACJ;;AACxC,aAAQ,KAAK,CAAL,CAAO,EAAP,CAAkB,cAA1B;AACA,KAbQ;SAcT,UAAU,CAAV,EAA4B;AACY,UAAI,CAAC,IAAI,IAAL,IAAa,KAAK,iBAAlB,IAAwC,CAAS,CAAC,QAAtD,EAAiE,CAAS,CAAC,QAAV,CAAmB,KAAK,iBAAxB,EAA2C,IAA3C,EAAiD,IAAjD;AAExG,MAAA,CAAC,IAAI,IAAL,GAAY,KAAK,CAAL,CAAO,EAAP,GAAY,IAAxB,GAA+B,KAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAC,CAA7C;AACA,KAlBQ;oBAAA;;AAAA,GAAT;AAwBY,EAAA,MAAA,CAAA,cAAA,CAAW,kBAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,UAAZ;AACH,KAFmB;SAGpB,UAAqB,CAArB,EAA8B;AAC1B,WAAK,UAAL,GAAkB,CAAlB;AACH,KALmB;oBAAA;;AAAA,GAApB;AAUZ,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,uBAAJ,EAAyB;AAJzB;;;;SAIA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFwB;SAGzB,UAA0B,CAA1B,EAAmC;AAClC,WAAK,CAAL,CAAO,EAAP,GAAY,CAAC,CAAb;AACA,KALwB;oBAAA;;AAAA,GAAzB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAQ,KAAK,CAAL,CAAO,EAAf;AACA,KAFU;oBAAA;;AAAA,GAAX;;AAIoB,EAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA+B;AAC5B,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,IAAf;;AAEJ,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,UAAI,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,MAAf,GAAwB,CAA1C,IACA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,KAAK,SADzB,EACoC;AAChC,aAAK,KAAL,GAAa,IAAI,CAAC,CAAD,CAAjB;AACH;AACJ;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,UAAI,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,MAAf,GAAwB,CAA1C,IACA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,KAAK,SADzB,EACoC;AAChC,aAAK,KAAL,GAAa,IAAI,CAAC,CAAD,CAAjB;AACH;AACJ;AAEZ,GAjBmB;;AAmBF,EAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAV,UAAmB,SAAnB,EAAmC,SAAnC,EAAmD,MAAnD,EAA+D;AAC3D,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,SAAf,EAA0B,SAA1B,EAAqC,MAArC;;AAEA,SAAK,UAAL,GAAkB,IAAlB;;AACA,QAAI,KAAK,KAAL,IAAe,KAAK,KAAL,CAAmB,QAAtC,EAAgD;AACvD,WAAK,KAAL,CAAmB,QAAnB,CAA4B,SAA5B,EAAuC,SAAvC,EAAkD,IAAlD;AACJ;;AACD,QAAI,KAAK,KAAL,IAAe,KAAK,KAAL,CAAmB,QAAtC,EAAgD;AAC3C,WAAK,KAAL,CAAmB,QAAnB,CAA4B,SAA5B,EAAuC,SAAvC,EAAkD,IAAlD;AACJ;;AAEW,SAAK,UAAL,GAAkB,KAAlB;AACH,GAZS;;AAaX,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAA+B,cAA/B,EAAqD;AACpD,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,EAAgB,cAAhB,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAA8B;AAC7B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;AAIP;;;;;;;AAKO,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAA8B;AAC7B,QAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAU,IAAV,CAAT;AACA,WAAQ,EAAR;AACA,GAHM;;AAWP,EAAA,MAAA,CAAA,cAAA,CAAW,kBAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAJrB;;;SAIA,YAAA;AACA,aAAO,KAAK,WAAZ;AACC,KAFoB;SAGjB,UAAsB,EAAtB,EAAoF;AAApF,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,mBAAL,KAA6B,IAAjC,EAAuC;AACnC,aAAK,CAAL,CAAO,UAAP,GAAoB,cAAc,CAAC,KAAK,CAAL,CAAO,UAAR,EAAoB,KAAK,mBAAzB,CAAlC;AACA,aAAK,mBAAL,GAA2B,IAA3B;AACA,aAAK,WAAL,GAAmB,IAAnB;AACH;;AAED,WAAK,WAAL,GAAmB,EAAnB;;AACA,WAAK,mBAAL,GAA2B,UAAC,CAAD,EAAI,CAAJ,EAAK;AAEpB,YAAI,SAAS,GAAG,IAAI,sBAAJ,EAAhB;;AACnB,QAAA,SAAiB,CAAC,sBAAlB,CAAyC,CAAzC;;AACmB,YAAK,KAAY,CAAC,gBAAlB,EAAoC;AAC/B,UAAA,KAAY,CAAC,gBAAb,CAA8B,KAA9B,EAAoC,SAApC;AACJ;;AACD,YAAI,KAAI,CAAC,WAAT,EAAsB;AACtC,UAAA,KAAI,CAAC,WAAL,CAAiB,KAAjB,EAAuB,SAAvB;AACiB;AAEZ,OAXD;;AAYA,WAAK,CAAL,CAAO,UAAP,GAAoB,eAAe,CAAC,KAAK,CAAL,CAAO,UAAR,EAAoB,KAAK,mBAAzB,CAAnC;AACH,KAxBgB;oBAAA;;AAAA,GAArB;AAyBD,SAAA,kBAAA;AAAC,CAlMD,CAAgH,SAAhH,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrNumericXAxis } from \"./igr-numeric-x-axis\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrStyleShapeEventArgs } from \"./igr-style-shape-event-args\";\nimport { IgrSeries } from \"./igr-series\";\n/**\n * Series class for rendering polygons.\n*/\nvar IgrShapeSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrShapeSeriesBase, _super);\n    function IgrShapeSeriesBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        _this._styleShape = null;\n        _this._styleShape_wrapped = null;\n        return _this;\n    }\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"shapeMemberPath\", {\n        /**\n         * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.\n         * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.\n        */\n        get: function () {\n            return this.i.mt;\n        },\n        set: function (v) {\n            this.i.mt = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for the current ScatterBase object.\n        */\n        get: function () {\n            if (this.i.l6 == null) {\n                return null;\n            }\n            if (!this.i.l6.externalObject) {\n                var e = IgrNumericXAxis._createFromInternal(this.i.l6);\n                if (e) {\n                    e._implementation = this.i.l6;\n                }\n                this.i.l6.externalObject = e;\n            }\n            return this.i.l6.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.l6 = null : this.i.l6 = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for the current ScatterBase object.\n        */\n        get: function () {\n            if (this.i.l8 == null) {\n                return null;\n            }\n            if (!this.i.l8.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.l8);\n                if (e) {\n                    e._implementation = this.i.l8;\n                }\n                this.i.l8.externalObject = e;\n            }\n            return this.i.l8.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.l8 = null : this.i.l8 = v.i;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"shapeFilterResolution\", {\n        /**\n         * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.\n         * In the case of ScatterPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.\n        */\n        get: function () {\n            return this.i.mn;\n        },\n        set: function (v) {\n            this.i.mn = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"isShape\", {\n        /**\n         * Gets whether or not this series is a shape series\n        */\n        get: function () {\n            return this.i.c5;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrShapeSeriesBase.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrShapeSeriesBase.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    IgrShapeSeriesBase.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.fs(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrShapeSeriesBase.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.md(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    */\n    IgrShapeSeriesBase.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.mc(axis);\n        return (iv);\n    };\n    Object.defineProperty(IgrShapeSeriesBase.prototype, \"styleShape\", {\n        /**\n         * Raised when tile's image URI should be provided\n        */\n        get: function () {\n            return this._styleShape;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._styleShape_wrapped !== null) {\n                this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);\n                this._styleShape_wrapped = null;\n                this._styleShape = null;\n            }\n            this._styleShape = ev;\n            this._styleShape_wrapped = function (o, e) {\n                var outerArgs = new IgrStyleShapeEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeStyleShape) {\n                    _this.beforeStyleShape(_this, outerArgs);\n                }\n                if (_this._styleShape) {\n                    _this._styleShape(_this, outerArgs);\n                }\n            };\n            this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrShapeSeriesBase;\n}(IgrSeries));\nexport { IgrShapeSeriesBase };\n//# sourceMappingURL=igr-shape-series-base.js.map\n"]},"metadata":{},"sourceType":"module"}