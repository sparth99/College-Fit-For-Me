{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar TreemapNodeVisualData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(TreemapNodeVisualData, _super);\n\n  function TreemapNodeVisualData() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.c = null;\n    _this.b = null;\n    _this.a = null;\n    return _this;\n  }\n\n  TreemapNodeVisualData.prototype.e = function (a) {\n    if (this.c != null) {\n      this.c.scaleByViewport(a);\n    }\n\n    if (this.b != null) {\n      this.b.scaleByViewport(a);\n    }\n\n    if (this.a != null) {\n      this.a.scaleByViewport(a);\n    }\n  };\n\n  TreemapNodeVisualData.prototype.d = function () {\n    var a = new StringBuilder(0);\n    var b = true;\n    a.u(\"{\");\n\n    if (this.c != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"nodeRect: \");\n      a.l(this.c.serialize());\n    }\n\n    if (this.b != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"headerRect: \");\n      a.l(this.b.serialize());\n    }\n\n    if (this.a != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"label: \");\n      a.l(this.a.serialize());\n    }\n\n    a.t();\n    a.u(\"}\");\n    return a.toString();\n  };\n\n  TreemapNodeVisualData.$t = markType(TreemapNodeVisualData, 'TreemapNodeVisualData');\n  return TreemapNodeVisualData;\n}(Base);\n\nexport { TreemapNodeVisualData };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/TreemapNodeVisualData.ts"],"names":[],"mappings":"AAAA;;;;;;;AAOA,SAAS,IAAT,EAAqB,QAArB,QAAqC,qBAArC;AAIA,SAAS,aAAT,QAA8B,qBAA9B;AAEA;;;;AAGA,IAAA,qBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,OAAA,CAAA,SAAA,CAAA,qBAAA,EAAA,MAAA;;AAA3C,WAAA,qBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEC,IAAA,KAAA,CAAA,CAAA,GAAyB,IAAzB;AACA,IAAA,KAAA,CAAA,CAAA,GAAyB,IAAzB;AACA,IAAA,KAAA,CAAA,CAAA,GAA4B,IAA5B;;AA+CA;;AA9CA,EAAA,qBAAA,CAAA,SAAA,CAAA,CAAA,GAAA,UAAE,CAAF,EAAa;AACZ,QAAI,KAAK,CAAL,IAAU,IAAd,EAAoB;AACnB,WAAK,CAAL,CAAO,eAAP,CAAuB,CAAvB;AACA;;AACD,QAAI,KAAK,CAAL,IAAU,IAAd,EAAoB;AACnB,WAAK,CAAL,CAAO,eAAP,CAAuB,CAAvB;AACA;;AACD,QAAI,KAAK,CAAL,IAAU,IAAd,EAAoB;AACnB,WAAK,CAAL,CAAO,eAAP,CAAuB,CAAvB;AACA;AACD,GAVD;;AAWA,EAAA,qBAAA,CAAA,SAAA,CAAA,CAAA,GAAA,YAAA;AACC,QAAI,CAAC,GAAkB,IAAI,aAAJ,CAAkB,CAAlB,CAAvB;AACA,QAAI,CAAC,GAAY,IAAjB;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,GAAJ;;AACA,QAAI,KAAK,CAAL,IAAU,IAAd,EAAoB;AACnB,UAAI,CAAJ,EAAO;AACN,QAAA,CAAC,GAAG,KAAJ;AACA,OAFD,MAEO;AACN,QAAA,CAAC,CAAC,CAAF,CAAI,IAAJ;AACA;;AACD,MAAA,CAAC,CAAC,CAAF,CAAI,YAAJ;AACA,MAAA,CAAC,CAAC,CAAF,CAAI,KAAK,CAAL,CAAO,SAAP,EAAJ;AACA;;AACD,QAAI,KAAK,CAAL,IAAU,IAAd,EAAoB;AACnB,UAAI,CAAJ,EAAO;AACN,QAAA,CAAC,GAAG,KAAJ;AACA,OAFD,MAEO;AACN,QAAA,CAAC,CAAC,CAAF,CAAI,IAAJ;AACA;;AACD,MAAA,CAAC,CAAC,CAAF,CAAI,cAAJ;AACA,MAAA,CAAC,CAAC,CAAF,CAAI,KAAK,CAAL,CAAO,SAAP,EAAJ;AACA;;AACD,QAAI,KAAK,CAAL,IAAU,IAAd,EAAoB;AACnB,UAAI,CAAJ,EAAO;AACN,QAAA,CAAC,GAAG,KAAJ;AACA,OAFD,MAEO;AACN,QAAA,CAAC,CAAC,CAAF,CAAI,IAAJ;AACA;;AACD,MAAA,CAAC,CAAC,CAAF,CAAI,SAAJ;AACA,MAAA,CAAC,CAAC,CAAF,CAAI,KAAK,CAAL,CAAO,SAAP,EAAJ;AACA;;AACD,IAAA,CAAC,CAAC,CAAF;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,GAAJ;AACA,WAAO,CAAC,CAAC,QAAF,EAAP;AACA,GAlCD;;AAfO,EAAA,qBAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,qBAAD,EAAwB,uBAAxB,CAAnB;AAkDR,SAAA,qBAAA;AAAC,CAnDD,CAA2C,IAA3C,CAAA;;SAAa,qB","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar TreemapNodeVisualData = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TreemapNodeVisualData, _super);\n    function TreemapNodeVisualData() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.c = null;\n        _this.b = null;\n        _this.a = null;\n        return _this;\n    }\n    TreemapNodeVisualData.prototype.e = function (a) {\n        if (this.c != null) {\n            this.c.scaleByViewport(a);\n        }\n        if (this.b != null) {\n            this.b.scaleByViewport(a);\n        }\n        if (this.a != null) {\n            this.a.scaleByViewport(a);\n        }\n    };\n    TreemapNodeVisualData.prototype.d = function () {\n        var a = new StringBuilder(0);\n        var b = true;\n        a.u(\"{\");\n        if (this.c != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"nodeRect: \");\n            a.l(this.c.serialize());\n        }\n        if (this.b != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"headerRect: \");\n            a.l(this.b.serialize());\n        }\n        if (this.a != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"label: \");\n            a.l(this.a.serialize());\n        }\n        a.t();\n        a.u(\"}\");\n        return a.toString();\n    };\n    TreemapNodeVisualData.$t = markType(TreemapNodeVisualData, 'TreemapNodeVisualData');\n    return TreemapNodeVisualData;\n}(Base));\nexport { TreemapNodeVisualData };\n//# sourceMappingURL=TreemapNodeVisualData.js.map\n"]},"metadata":{},"sourceType":"module"}